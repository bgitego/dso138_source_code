   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 2
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"UartInt.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.uputDec,"ax",%progbits
  16              		.align	1
  17              		.p2align 2,,3
  18              		.global	uputDec
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	uputDec:
  25              	.LFB29:
  26              		.file 1 "UartInt.c"
   1:UartInt.c     **** #include "UartInt.h"
   2:UartInt.c     **** 
   3:UartInt.c     **** 
   4:UartInt.c     **** //This code tekes in a 32bit Signed Integer and output, the value to the UART as a string of char.
   5:UartInt.c     **** 
   6:UartInt.c     **** void uputDec(S32 a,USART_TypeDef* USARTx)
   7:UartInt.c     **** {
  27              		.loc 1 7 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
   8:UartInt.c     ****     volatile S8 index = 0;
  32              		.loc 1 8 0
  33 0000 0023     		movs	r3, #0
   7:UartInt.c     ****     volatile S8 index = 0;
  34              		.loc 1 7 0
  35 0002 70B5     		push	{r4, r5, r6, lr}
  36              		.cfi_def_cfa_offset 16
  37              		.cfi_offset 4, -16
  38              		.cfi_offset 5, -12
  39              		.cfi_offset 6, -8
  40              		.cfi_offset 14, -4
   9:UartInt.c     ****     volatile U8 isNegative = 0;
  10:UartInt.c     **** 
  11:UartInt.c     ****    if (a & 0xF0000000)
  41              		.loc 1 11 0
  42 0004 10F0704F 		tst	r0, #-268435456
   7:UartInt.c     ****     volatile S8 index = 0;
  43              		.loc 1 7 0
  44 0008 82B0     		sub	sp, sp, #8
  45              		.cfi_def_cfa_offset 24
   8:UartInt.c     ****     volatile U8 isNegative = 0;
  46              		.loc 1 8 0
  47 000a 8DF80630 		strb	r3, [sp, #6]
   7:UartInt.c     ****     volatile S8 index = 0;
  48              		.loc 1 7 0
  49 000e 0C46     		mov	r4, r1
   9:UartInt.c     ****     volatile U8 isNegative = 0;
  50              		.loc 1 9 0
  51 0010 8DF80730 		strb	r3, [sp, #7]
  52              		.loc 1 11 0
  53 0014 03D0     		beq	.L2
  12:UartInt.c     ****     {
  13:UartInt.c     ****         isNegative = 1;
  54              		.loc 1 13 0
  55 0016 0123     		movs	r3, #1
  14:UartInt.c     **** 	    a =((~(a))+1);
  56              		.loc 1 14 0
  57 0018 4042     		negs	r0, r0
  58              	.LVL1:
  13:UartInt.c     **** 	    a =((~(a))+1);
  59              		.loc 1 13 0
  60 001a 8DF80730 		strb	r3, [sp, #7]
  61              	.L2:
  15:UartInt.c     ****     }
  16:UartInt.c     **** 
  17:UartInt.c     ****     while(a >= 10)
  62              		.loc 1 17 0
  63 001e 0928     		cmp	r0, #9
  64 0020 214D     		ldr	r5, .L20
  65 0022 15DD     		ble	.L3
  18:UartInt.c     ****     {
  19:UartInt.c     ****         *(int_buffer + index) = ((a%10) + ascii_num_offset );
  66              		.loc 1 19 0
  67 0024 214E     		ldr	r6, .L20+4
  68              	.LVL2:
  69              	.L4:
  70 0026 A6FB0023 		umull	r2, r3, r6, r0
  71 002a DB08     		lsrs	r3, r3, #3
  72 002c 03EB8302 		add	r2, r3, r3, lsl #2
  73 0030 A0EB4202 		sub	r2, r0, r2, lsl #1
  20:UartInt.c     ****          index++;
  21:UartInt.c     ****          a = a/10;
  74              		.loc 1 21 0
  75 0034 1846     		mov	r0, r3
  76              	.LVL3:
  19:UartInt.c     ****          index++;
  77              		.loc 1 19 0
  78 0036 9DF80610 		ldrb	r1, [sp, #6]	@ zero_extendqisi2
  20:UartInt.c     ****          index++;
  79              		.loc 1 20 0
  80 003a 9DF80630 		ldrb	r3, [sp, #6]	@ zero_extendqisi2
  19:UartInt.c     ****          index++;
  81              		.loc 1 19 0
  82 003e 3032     		adds	r2, r2, #48
  20:UartInt.c     ****          index++;
  83              		.loc 1 20 0
  84 0040 0133     		adds	r3, r3, #1
  19:UartInt.c     ****          index++;
  85              		.loc 1 19 0
  86 0042 49B2     		sxtb	r1, r1
  20:UartInt.c     ****          index++;
  87              		.loc 1 20 0
  88 0044 5BB2     		sxtb	r3, r3
  17:UartInt.c     ****     {
  89              		.loc 1 17 0
  90 0046 0928     		cmp	r0, #9
  19:UartInt.c     ****          index++;
  91              		.loc 1 19 0
  92 0048 6A54     		strb	r2, [r5, r1]
  20:UartInt.c     ****          index++;
  93              		.loc 1 20 0
  94 004a 8DF80630 		strb	r3, [sp, #6]
  17:UartInt.c     ****     {
  95              		.loc 1 17 0
  96 004e EADC     		bgt	.L4
  97              	.L3:
  22:UartInt.c     ****     }
  23:UartInt.c     ****     
  24:UartInt.c     ****     *(int_buffer + index) = ((a) + ascii_num_offset );
  98              		.loc 1 24 0
  99 0050 9DF80630 		ldrb	r3, [sp, #6]	@ zero_extendqisi2
  25:UartInt.c     ****     
  26:UartInt.c     ****     if(isNegative)
 100              		.loc 1 26 0
 101 0054 9DF80720 		ldrb	r2, [sp, #7]	@ zero_extendqisi2
  24:UartInt.c     ****     
 102              		.loc 1 24 0
 103 0058 3030     		adds	r0, r0, #48
 104              	.LVL4:
 105 005a 5BB2     		sxtb	r3, r3
 106 005c E854     		strb	r0, [r5, r3]
 107              		.loc 1 26 0
 108 005e 52B1     		cbz	r2, .L5
  27:UartInt.c     ****     {
  28:UartInt.c     ****         index++;
  29:UartInt.c     ****         *(int_buffer + index) = ascii_minus;
 109              		.loc 1 29 0
 110 0060 2D22     		movs	r2, #45
  28:UartInt.c     ****         *(int_buffer + index) = ascii_minus;
 111              		.loc 1 28 0
 112 0062 9DF80630 		ldrb	r3, [sp, #6]	@ zero_extendqisi2
 113 0066 0133     		adds	r3, r3, #1
 114 0068 5BB2     		sxtb	r3, r3
 115 006a 8DF80630 		strb	r3, [sp, #6]
 116              		.loc 1 29 0
 117 006e 9DF80630 		ldrb	r3, [sp, #6]	@ zero_extendqisi2
 118 0072 5BB2     		sxtb	r3, r3
 119 0074 EA54     		strb	r2, [r5, r3]
 120              	.L5:
  30:UartInt.c     ****     }    
  31:UartInt.c     ****     for(index; index >= 0; index--) 
 121              		.loc 1 31 0
 122 0076 9DF80630 		ldrb	r3, [sp, #6]	@ zero_extendqisi2
 123 007a 9DF80630 		ldrb	r3, [sp, #6]	@ zero_extendqisi2
 124 007e 1A06     		lsls	r2, r3, #24
 125 0080 10D4     		bmi	.L1
 126 0082 0B4E     		ldr	r6, .L20+8
 127              	.LVL5:
 128              	.L7:
  32:UartInt.c     ****     {
  33:UartInt.c     ****         UartPutc(int_buffer[index],USARTx);
 129              		.loc 1 33 0 discriminator 3
 130 0084 9DF80630 		ldrb	r3, [sp, #6]	@ zero_extendqisi2
 131 0088 2146     		mov	r1, r4
 132 008a 5BB2     		sxtb	r3, r3
 133 008c E85C     		ldrb	r0, [r5, r3]	@ zero_extendqisi2
 134 008e B047     		blx	r6
 135              	.LVL6:
  31:UartInt.c     ****     {
 136              		.loc 1 31 0 discriminator 3
 137 0090 9DF80630 		ldrb	r3, [sp, #6]	@ zero_extendqisi2
 138 0094 013B     		subs	r3, r3, #1
 139 0096 5BB2     		sxtb	r3, r3
 140 0098 8DF80630 		strb	r3, [sp, #6]
 141 009c 9DF80630 		ldrb	r3, [sp, #6]	@ zero_extendqisi2
 142 00a0 1B06     		lsls	r3, r3, #24
 143 00a2 EFD5     		bpl	.L7
 144              	.L1:
  34:UartInt.c     ****     }
  35:UartInt.c     ****     
  36:UartInt.c     **** 
  37:UartInt.c     **** }
 145              		.loc 1 37 0
 146 00a4 02B0     		add	sp, sp, #8
 147              		.cfi_def_cfa_offset 16
 148              		@ sp needed
 149 00a6 70BD     		pop	{r4, r5, r6, pc}
 150              	.LVL7:
 151              	.L21:
 152              		.align	2
 153              	.L20:
 154 00a8 00000000 		.word	int_buffer
 155 00ac CDCCCCCC 		.word	-858993459
 156 00b0 00000000 		.word	UartPutc
 157              		.cfi_endproc
 158              	.LFE29:
 160              		.section	.text.uputHex,"ax",%progbits
 161              		.align	1
 162              		.p2align 2,,3
 163              		.global	uputHex
 164              		.syntax unified
 165              		.thumb
 166              		.thumb_func
 167              		.fpu softvfp
 169              	uputHex:
 170              	.LFB30:
  38:UartInt.c     **** 
  39:UartInt.c     **** 
  40:UartInt.c     **** //This function takes a decimal number, convert it to hex then ouput to uart
  41:UartInt.c     **** 
  42:UartInt.c     **** void uputHex(S32 a,USART_TypeDef* USARTx)
  43:UartInt.c     **** {
 171              		.loc 1 43 0
 172              		.cfi_startproc
 173              		@ args = 0, pretend = 0, frame = 8
 174              		@ frame_needed = 0, uses_anonymous_args = 0
 175              	.LVL8:
  44:UartInt.c     ****     volatile S8 index = 0;
 176              		.loc 1 44 0
 177 0000 0023     		movs	r3, #0
  43:UartInt.c     ****     volatile S8 index = 0;
 178              		.loc 1 43 0
 179 0002 70B5     		push	{r4, r5, r6, lr}
 180              		.cfi_def_cfa_offset 16
 181              		.cfi_offset 4, -16
 182              		.cfi_offset 5, -12
 183              		.cfi_offset 6, -8
 184              		.cfi_offset 14, -4
  45:UartInt.c     **** 
  46:UartInt.c     ****     //While number is greater then 16, store the remainder as value (A-F) in array. 
  47:UartInt.c     **** 
  48:UartInt.c     ****     while(a >= 0x10)
 185              		.loc 1 48 0
 186 0004 0F28     		cmp	r0, #15
  43:UartInt.c     ****     volatile S8 index = 0;
 187              		.loc 1 43 0
 188 0006 82B0     		sub	sp, sp, #8
 189              		.cfi_def_cfa_offset 24
  43:UartInt.c     ****     volatile S8 index = 0;
 190              		.loc 1 43 0
 191 0008 0C46     		mov	r4, r1
  44:UartInt.c     **** 
 192              		.loc 1 44 0
 193 000a 8DF80730 		strb	r3, [sp, #7]
 194 000e 234D     		ldr	r5, .L37
 195              		.loc 1 48 0
 196 0010 0DDC     		bgt	.L26
 197 0012 19E0     		b	.L23
 198              	.L36:
  49:UartInt.c     ****     {
  50:UartInt.c     ****         //If remainder of (number/16) greater then 10, then send letter (A -F), otherwise store val
  51:UartInt.c     ****         if((a%0x10)  > 0x0A )
  52:UartInt.c     ****         {
  53:UartInt.c     ****            *(int_buffer + index) = (((a%0x10)-0x0A) + ascii_letter_A_offset );
 199              		.loc 1 53 0
 200 0014 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 201 0018 5BB2     		sxtb	r3, r3
 202 001a EA54     		strb	r2, [r5, r3]
 203              	.L25:
  54:UartInt.c     ****         }
  55:UartInt.c     ****         else
  56:UartInt.c     ****         {
  57:UartInt.c     ****            *(int_buffer + index) = ((a%0x10) + ascii_num_offset );
  58:UartInt.c     ****         }
  59:UartInt.c     **** 
  60:UartInt.c     ****         index++;
 204              		.loc 1 60 0
 205 001c 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
  61:UartInt.c     ****         a = a/0x10;
 206              		.loc 1 61 0
 207 0020 0011     		asrs	r0, r0, #4
 208              	.LVL9:
  60:UartInt.c     ****         a = a/0x10;
 209              		.loc 1 60 0
 210 0022 0133     		adds	r3, r3, #1
 211 0024 5BB2     		sxtb	r3, r3
  48:UartInt.c     ****     {
 212              		.loc 1 48 0
 213 0026 0F28     		cmp	r0, #15
  60:UartInt.c     ****         a = a/0x10;
 214              		.loc 1 60 0
 215 0028 8DF80730 		strb	r3, [sp, #7]
  48:UartInt.c     ****     {
 216              		.loc 1 48 0
 217 002c 0CDD     		ble	.L23
 218              	.L26:
  51:UartInt.c     ****         {
 219              		.loc 1 51 0
 220 002e 00F00F02 		and	r2, r0, #15
 221 0032 D3B2     		uxtb	r3, r2
 222 0034 0A2A     		cmp	r2, #10
  53:UartInt.c     ****         }
 223              		.loc 1 53 0
 224 0036 03F13702 		add	r2, r3, #55
  51:UartInt.c     ****         {
 225              		.loc 1 51 0
 226 003a EBDC     		bgt	.L36
  57:UartInt.c     ****         }
 227              		.loc 1 57 0
 228 003c 9DF80720 		ldrb	r2, [sp, #7]	@ zero_extendqisi2
 229 0040 3033     		adds	r3, r3, #48
 230 0042 52B2     		sxtb	r2, r2
 231 0044 AB54     		strb	r3, [r5, r2]
 232 0046 E9E7     		b	.L25
 233              	.L23:
  62:UartInt.c     ****     }
  63:UartInt.c     ****     // if last value is greater then 10 send letter(A-F) else send (0-9)
  64:UartInt.c     ****     if((a%0x10)  > 0x0A )
 234              		.loc 1 64 0
 235 0048 4342     		rsbs	r3, r0, #0
 236 004a 03F00F03 		and	r3, r3, #15
 237 004e 00F00F00 		and	r0, r0, #15
 238              	.LVL10:
  65:UartInt.c     ****     {
  66:UartInt.c     ****         *(int_buffer + index) = (((a%0x10)-0x0A) + ascii_letter_A_offset );
 239              		.loc 1 66 0
 240 0052 9DF80720 		ldrb	r2, [sp, #7]	@ zero_extendqisi2
  64:UartInt.c     ****     {
 241              		.loc 1 64 0
 242 0056 58BF     		it	pl
 243 0058 5842     		rsbpl	r0, r3, #0
 244 005a C3B2     		uxtb	r3, r0
 245 005c 0A28     		cmp	r0, #10
 246              		.loc 1 66 0
 247 005e CCBF     		ite	gt
 248 0060 3733     		addgt	r3, r3, #55
  67:UartInt.c     ****     }
  68:UartInt.c     ****     else
  69:UartInt.c     ****     {
  70:UartInt.c     ****         *(int_buffer + index) = ((a%0x10) + ascii_num_offset );
 249              		.loc 1 70 0
 250 0062 3033     		addle	r3, r3, #48
 251 0064 52B2     		sxtb	r2, r2
 252 0066 AB54     		strb	r3, [r5, r2]
  71:UartInt.c     ****     }
  72:UartInt.c     ****     
  73:UartInt.c     ****     //Send all values in buffer over uart    
  74:UartInt.c     ****     for(index; index >= 0; index--) 
 253              		.loc 1 74 0
 254 0068 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 255 006c 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 256 0070 1A06     		lsls	r2, r3, #24
 257 0072 10D4     		bmi	.L22
 258 0074 0A4E     		ldr	r6, .L37+4
 259              	.LVL11:
 260              	.L30:
  75:UartInt.c     ****     {
  76:UartInt.c     ****         UartPutc(int_buffer[index],USARTx);
 261              		.loc 1 76 0 discriminator 3
 262 0076 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 263 007a 2146     		mov	r1, r4
 264 007c 5BB2     		sxtb	r3, r3
 265 007e E85C     		ldrb	r0, [r5, r3]	@ zero_extendqisi2
 266 0080 B047     		blx	r6
 267              	.LVL12:
  74:UartInt.c     ****     {
 268              		.loc 1 74 0 discriminator 3
 269 0082 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 270 0086 013B     		subs	r3, r3, #1
 271 0088 5BB2     		sxtb	r3, r3
 272 008a 8DF80730 		strb	r3, [sp, #7]
 273 008e 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 274 0092 1B06     		lsls	r3, r3, #24
 275 0094 EFD5     		bpl	.L30
 276              	.L22:
  77:UartInt.c     ****     }
  78:UartInt.c     ****     
  79:UartInt.c     **** }...
 277              		.loc 1 79 0
 278 0096 02B0     		add	sp, sp, #8
 279              		.cfi_def_cfa_offset 16
 280              		@ sp needed
 281 0098 70BD     		pop	{r4, r5, r6, pc}
 282              	.LVL13:
 283              	.L38:
 284 009a 00BF     		.align	2
 285              	.L37:
 286 009c 00000000 		.word	int_buffer
 287 00a0 00000000 		.word	UartPutc
 288              		.cfi_endproc
 289              	.LFE30:
 291              		.comm	int_buffer,32,4
 292              		.text
 293              	.Letext0:
 294              		.file 2 "Common.h"
 295              		.file 3 "/home/bot-10/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/machine/_default
 296              		.file 4 "/home/bot-10/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_stdint.h"
 297              		.file 5 "./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h"
 298              		.file 6 "./Libraries/CMSIS/CM3/CoreSupport/system_stm32f10x.h"
 299              		.file 7 "./Libraries/CMSIS/CM3/CoreSupport/stm32f10x.h"
 300              		.file 8 "Board.h"
 301              		.file 9 "UartInt.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 UartInt.c
     /tmp/ccuaMdJO.s:16     .text.uputDec:0000000000000000 $t
     /tmp/ccuaMdJO.s:24     .text.uputDec:0000000000000000 uputDec
     /tmp/ccuaMdJO.s:154    .text.uputDec:00000000000000a8 $d
                            *COM*:0000000000000020 int_buffer
     /tmp/ccuaMdJO.s:161    .text.uputHex:0000000000000000 $t
     /tmp/ccuaMdJO.s:169    .text.uputHex:0000000000000000 uputHex
     /tmp/ccuaMdJO.s:286    .text.uputHex:000000000000009c $d

UNDEFINED SYMBOLS
UartPutc
