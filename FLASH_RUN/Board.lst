   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 2
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"Board.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.Clock_Init,"ax",%progbits
  16              		.align	1
  17              		.p2align 2,,3
  18              		.global	Clock_Init
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	Clock_Init:
  25              	.LFB29:
  26              		.file 1 "Board.c"
   1:Board.c       **** //////////////////////////////////////////////////////////////////////////////
   2:Board.c       **** //
   3:Board.c       **** // 	Filename:	Board.c
   4:Board.c       **** //	Version:		
   5:Board.c       **** //	Data:		
   6:Board.c       **** //
   7:Board.c       **** //	Author:		Liu, Zemin
   8:Board.c       **** //	Company:	JYE Tech Ltd.
   9:Board.c       **** //	Web:		www.jyetech.com
  10:Board.c       **** //
  11:Board.c       **** //-----------------------------------------------------------------------------
  12:Board.c       **** //
  13:Board.c       **** // 	Target: 		STM32F103C8
  14:Board.c       **** // 	Tool chain: 	CodeSourcery G++
  15:Board.c       **** //
  16:Board.c       **** //-----------------------------------------------------------------------------
  17:Board.c       **** //	Required files:
  18:Board.c       **** //
  19:Board.c       **** //-----------------------------------------------------------------------------
  20:Board.c       **** //	Notes:
  21:Board.c       **** //
  22:Board.c       **** //
  23:Board.c       **** //-----------------------------------------------------------------------------
  24:Board.c       **** //	Revision History:
  25:Board.c       **** //
  26:Board.c       **** ///////////////////////////////////////////////////////////////////////////////
  27:Board.c       **** //
  28:Board.c       **** //-----------------------------------------------------------------------------
  29:Board.c       **** // 	Includes
  30:Board.c       **** //-----------------------------------------------------------------------------
  31:Board.c       **** 
  32:Board.c       **** #include "stm32f10x.h"
  33:Board.c       **** 
  34:Board.c       **** #include "Common.h"
  35:Board.c       **** #include "Board.h"
  36:Board.c       **** #include	"libdso138.h"
  37:Board.c       **** 
  38:Board.c       **** // ===========================================================
  39:Board.c       **** //	File Scope Variables
  40:Board.c       **** // ===========================================================
  41:Board.c       **** //
  42:Board.c       **** 	
  43:Board.c       **** U16		GTimer;
  44:Board.c       **** U8		GTimeout;
  45:Board.c       **** 
  46:Board.c       **** U16		TimerKeyScan;
  47:Board.c       **** 
  48:Board.c       **** //U8	GeneralBuf[50];
  49:Board.c       **** 
  50:Board.c       **** // ===========================================================
  51:Board.c       **** //	Function Definitions
  52:Board.c       **** // ===========================================================
  53:Board.c       **** 
  54:Board.c       **** //-----------------------------------------------------------------------------
  55:Board.c       **** // Clock_Init
  56:Board.c       **** //-----------------------------------------------------------------------------
  57:Board.c       **** //
  58:Board.c       **** void	Clock_Init(void)
  59:Board.c       **** {
  27              		.loc 1 59 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 70B4     		push	{r4, r5, r6}
  33              		.cfi_def_cfa_offset 12
  34              		.cfi_offset 4, -12
  35              		.cfi_offset 5, -8
  36              		.cfi_offset 6, -4
  60:Board.c       ****  RCC->CR =  (1 << HSION)  		/*!< Internal High Speed clock enable */
  61:Board.c       **** 			|(0 << HSIRDY)     	/*!< Internal High Speed clock ready flag */
  62:Board.c       **** 			|(0x10 << HSITRIM)     /*!< Internal High Speed clock trimming */
  63:Board.c       **** 			|(0 << HSICAL)     	/*!< Internal High Speed clock Calibration */
  64:Board.c       **** 			|(1 << HSEON)     		/*!< External High Speed clock enable */
  65:Board.c       **** 			|(0 << HSERDY)     	/*!< External High Speed clock ready flag */
  66:Board.c       **** 			|(0 << HSEBYP)     	/*!< External High Speed clock Bypass */
  67:Board.c       **** 			|(0 << CSSON)     	/*!< Clock Security System enable */
  68:Board.c       **** 			|(0 << PLLON)     		/*!< PLL enable */
  69:Board.c       **** 			|(0 << PLLRDY);    	/*!< PLL clock ready flag */
  70:Board.c       **** 
  71:Board.c       **** //	MCO[2:0] : Microcontroller clock output
  72:Board.c       **** //		0xx: No clock
  73:Board.c       **** //		100: System clock (SYSCLK) selected
  74:Board.c       **** //		101: HSI clock selected
  75:Board.c       **** //		110: HSE clock selected
  76:Board.c       **** //		111: PLL clock divided by 2 selected
  77:Board.c       **** //		
  78:Board.c       **** //	USBPRE: USB prescaler
  79:Board.c       **** //	Set and cleared by software to generate 48 MHz USB clock. This bit must be valid before
  80:Board.c       **** //	enabling the USB clock in the RCC_APB1ENR register. This bit can��t be reset if the USB
  81:Board.c       **** //	clock is enabled.
  82:Board.c       **** //		0: PLL clock is divided by 1.5
  83:Board.c       **** //		1: PLL clock is not divided
  84:Board.c       **** //		
  85:Board.c       **** //	PLLMUL[3:0] : PLL multiplication factor
  86:Board.c       **** //	These bits are written by software to define the PLL multiplication factor. These bits can be
  87:Board.c       **** //	written only when PLL is disabled.
  88:Board.c       **** //		0000: PLL input clock x 2
  89:Board.c       **** //		0001: PLL input clock x 3
  90:Board.c       **** //		0010: PLL input clock x 4
  91:Board.c       **** //		0011: PLL input clock x 5
  92:Board.c       **** //		0100: PLL input clock x 6
  93:Board.c       **** //		0101: PLL input clock x 7
  94:Board.c       **** //		0110: PLL input clock x 8
  95:Board.c       **** //		0111: PLL input clock x 9
  96:Board.c       **** //		1000: PLL input clock x 10
  97:Board.c       **** //		1001: PLL input clock x 11
  98:Board.c       **** //		1010: PLL input clock x 12
  99:Board.c       **** //		1011: PLL input clock x 13
 100:Board.c       **** //		1100: PLL input clock x 14
 101:Board.c       **** //		1101: PLL input clock x 15
 102:Board.c       **** //		1110: PLL input clock x 16
 103:Board.c       **** //		1111: PLL input clock x 16
 104:Board.c       **** //
 105:Board.c       **** //	PLLXTPRE: HSE divider for PLL entry
 106:Board.c       **** //	Set and cleared by software to divide HSE before PLL entry. This bit can be written only
 107:Board.c       **** //	when PLL is disabled.
 108:Board.c       **** //		0: HSE clock not divided
 109:Board.c       **** //		1: HSE clock divided by 2
 110:Board.c       **** //		
 111:Board.c       **** //	PLLSRC: PLL entry clock source
 112:Board.c       **** //	Set and cleared by software to select PLL clock source. This bit can be written only when
 113:Board.c       **** //	PLL is disabled.
 114:Board.c       **** //		0: HSI oscillator clock / 2 selected as PLL input clock
 115:Board.c       **** //		1: HSE oscillator clock selected as PLL input clock	
 116:Board.c       **** //		
 117:Board.c       **** //	ADCPRE[1:0] : ADC prescaler
 118:Board.c       **** //	Set and cleared by software to select the frequency of the clock to the ADCs.
 119:Board.c       **** //		00: PLCK2 divided by 2
 120:Board.c       **** //		01: PLCK2 divided by 4
 121:Board.c       **** //		10: PLCK2 divided by 6
 122:Board.c       **** //		11: PLCK2 divided by 8
 123:Board.c       **** //	
 124:Board.c       **** //	PPRE2[2:0] : APB high-speed prescaler (APB2)
 125:Board.c       **** //	Set and cleared by software to control the division factor of the APB high-speed clock
 126:Board.c       **** //	(PCLK2).
 127:Board.c       **** //		0xx: HCLK not divided
 128:Board.c       **** //		100: HCLK divided by 2
 129:Board.c       **** //		101: HCLK divided by 4
 130:Board.c       **** //		110: HCLK divided by 8
 131:Board.c       **** //		111: HCLK divided by 16
 132:Board.c       **** 
 133:Board.c       **** //	PPRE1[2:0] : APB low-speed prescaler (APB1)
 134:Board.c       **** //	Set and cleared by software to control the division factor of the APB low-speed clock
 135:Board.c       **** //	(PCLK1).
 136:Board.c       **** //	Warning: the software has to set correctly these bits to not exceed 36 MHz on this domain.
 137:Board.c       **** //		0xx: HCLK not divided
 138:Board.c       **** //		100: HCLK divided by 2
 139:Board.c       **** //		101: HCLK divided by 4
 140:Board.c       **** //		110: HCLK divided by 8
 141:Board.c       **** //		111: HCLK divided by 16
 142:Board.c       **** 
 143:Board.c       **** //	HPRE[3:0] : AHB prescaler
 144:Board.c       **** //	Set and cleared by software to control the division factor of the AHB clock.
 145:Board.c       **** //		0xxx: SYSCLK not divided
 146:Board.c       **** //		1000: SYSCLK divided by 2
 147:Board.c       **** //		1001: SYSCLK divided by 4
 148:Board.c       **** //		1010: SYSCLK divided by 8
 149:Board.c       **** //		1011: SYSCLK divided by 16
 150:Board.c       **** //		1100: SYSCLK divided by 64
 151:Board.c       **** //		1101: SYSCLK divided by 128
 152:Board.c       **** //		1110: SYSCLK divided by 256
 153:Board.c       **** //		1111: SYSCLK divided by 512	
 154:Board.c       **** //		
 155:Board.c       **** //	SWS[1:0] : System clock switch status
 156:Board.c       **** //	Set and cleared by hardware to indicate which clock source is used as system clock.
 157:Board.c       **** //		00: HSI oscillator used as system clock
 158:Board.c       **** //		01: HSE oscillator used as system clock
 159:Board.c       **** //		10: PLL used as system clock
 160:Board.c       **** //		11: not applicable
 161:Board.c       **** 
 162:Board.c       **** //	SW[1:0] : System clock switch
 163:Board.c       **** //	Set and cleared by software to select SYSCLK source.
 164:Board.c       **** //	Set by hardware to force HSI selection when leaving Stop and Standby mode or in case of
 165:Board.c       **** //	failure of the HSE oscillator used directly or indirectly as system clock (if the Clock Security
 166:Board.c       **** //	System is enabled).
 167:Board.c       **** //		00: HSI selected as system clock
 168:Board.c       **** //		01: HSE selected as system clock
 169:Board.c       **** //		10: PLL selected as system clock
 170:Board.c       **** //		11: not allowed
 171:Board.c       **** //
 172:Board.c       ****  RCC->CFGR = (0 << SW)     		/*!< SW[1:0] bits (System clock Switch) */
 173:Board.c       **** 			|(0 << SWS)     		/*!< SWS[1:0] bits (System Clock Switch Status) */
 174:Board.c       **** 			|(0 << HPRE)     		/*!< HPRE[3:0] bits (AHB prescaler)  [HCLK] */ 
 175:Board.c       **** 			|(0b100 << PPRE1)     	/*!< PRE1[2:0] bits (APB1 prescaler) [PCLK1] */
 176:Board.c       **** 			|(0 << PPRE2)     		/*!< PRE2[2:0] bits (APB2 prescaler) [PCLK2] */
 177:Board.c       **** 			|(2 << ADCPRE)     	/*!< ADCPRE[1:0] bits (ADC prescaler) */
 178:Board.c       **** 			|(1 << PLLSRC)     	/*!< PLL entry clock source */
 179:Board.c       **** 			|(0 << PLLXTPRE)     	/*!< HSE divider for PLL entry */
 180:Board.c       **** 			|(7 << PLLMULL)     	/*!< PLLMUL[3:0] bits (PLL multiplication factor) */
 181:Board.c       **** 			|(0 << USBPRE)     	/*!< USB Device prescaler */
 182:Board.c       **** 			|(0 << MCO);     		/*!< MCO[2:0] bits (Microcontroller Clock Output) */
 183:Board.c       **** 
 184:Board.c       ****  RCC->CR =  (1 << HSION)  		/*!< Internal High Speed clock enable */
 185:Board.c       **** 			|(0 << HSIRDY)     	/*!< Internal High Speed clock ready flag */
 186:Board.c       **** 			|(0x10 << HSITRIM)     /*!< Internal High Speed clock trimming */
 187:Board.c       **** 			|(0 << HSICAL)     	/*!< Internal High Speed clock Calibration */
 188:Board.c       **** 			|(1 << HSEON)     		/*!< External High Speed clock enable */
 189:Board.c       **** 			|(0 << HSERDY)     	/*!< External High Speed clock ready flag */
 190:Board.c       **** 			|(0 << HSEBYP)     	/*!< External High Speed clock Bypass */
 191:Board.c       **** 			|(0 << CSSON)     	/*!< Clock Security System enable */
 192:Board.c       **** 			|(1 << PLLON)     		/*!< PLL enable */
 193:Board.c       **** 			|(0 << PLLRDY);    	/*!< PLL clock ready flag */
 194:Board.c       **** 
 195:Board.c       **** 
 196:Board.c       ****  RCC->CIR = (0 << LSIRDYF)     	/*!< LSI Ready Interrupt flag */
  37              		.loc 1 196 0
  38 0002 0022     		movs	r2, #0
 197:Board.c       **** 			|(0 << LSERDYF)     	/*!< LSE Ready Interrupt flag */
 198:Board.c       **** 			|(0 << HSIRDYF)     	/*!< HSI Ready Interrupt flag */
 199:Board.c       **** 			|(0 << HSERDYF)     	/*!< HSE Ready Interrupt flag */
 200:Board.c       **** 			|(0 << PLLRDYF)     	/*!< PLL Ready Interrupt flag */
 201:Board.c       **** 			|(0 << CSSF)     		/*!< Clock Security System Interrupt flag */
 202:Board.c       **** 			|(0 << LSIRDYIE )     	/*!< LSI Ready Interrupt Enable */
 203:Board.c       **** 			|(0 << LSERDYIE)     	/*!< LSE Ready Interrupt Enable */
 204:Board.c       **** 			|(0 << HSIRDYIE)     	/*!< HSI Ready Interrupt Enable */
 205:Board.c       **** 			|(0 << HSERDYIE)     	/*!< HSE Ready Interrupt Enable */
 206:Board.c       **** 			|(0 << PLLRDYIE)     	/*!< PLL Ready Interrupt Enable */
 207:Board.c       **** 			|(0 << LSIRDYC)     	/*!< LSI Ready Interrupt Clear */
 208:Board.c       **** 			|(0 << LSERDYC)     	/*!< LSE Ready Interrupt Clear */
 209:Board.c       **** 			|(0 << HSIRDYC)     	/*!< HSI Ready Interrupt Clear */
 210:Board.c       **** 			|(0 << HSERDYC)     	/*!< HSE Ready Interrupt Clear */
 211:Board.c       **** 			|(0 << PLLRDYC)     	/*!< PLL Ready Interrupt Clear */
 212:Board.c       **** 			|(0 << CSSC);	     	/*!< Clock Security System Interrupt Clear */
 213:Board.c       **** 
 214:Board.c       **** 
 215:Board.c       ****  RCC->APB2RSTR = (0 << AFIORST) 	/*!< Alternate Function I/O reset */
 216:Board.c       **** 			|(0 << IOPARST)     	/*!< I/O port A reset */
 217:Board.c       **** 			|(0 << IOPBRST)     	/*!< I/O port B reset */
 218:Board.c       **** 			|(0 << IOPCRST)     	/*!< I/O port C reset */
 219:Board.c       **** 			|(0 << IOPDRST)     	/*!< I/O port D reset */
 220:Board.c       **** 			|(0 << IOPERST)     	/*!< I/O port E reset */
 221:Board.c       **** 			|(0 << IOPFRST)     	/*!< I/O port F reset */
 222:Board.c       **** 			|(0 << IOPGRST)     	/*!< I/O port G reset */
 223:Board.c       **** 			|(0 << ADC1RST)     	/*!< ADC 1 interface reset */
 224:Board.c       **** 			|(0 << ADC2RST)     	/*!< ADC 2 interface reset */
 225:Board.c       **** 			|(0 << TIM1RST)     	/*!< TIM1 Timer reset */
 226:Board.c       **** 			|(0 << SPI1RST)     	/*!< SPI 1 reset */
 227:Board.c       **** 			|(0 << TIM8RST)     	/*!< TIM8 Timer reset */
 228:Board.c       **** 			|(0 << USART1RST)     	/*!< USART1 reset */
 229:Board.c       **** 			|(0 << ADC3RST);     	/*!< ADC3 interface reset */
 230:Board.c       **** 
 231:Board.c       ****  RCC->APB1RSTR = (0 << TIM2RST) /*!< Timer 2 reset */
 232:Board.c       **** 			|(0 << TIM3RST)     	/*!< Timer 3 reset */
 233:Board.c       **** 			|(0 << TIM4RST)     	/*!< Timer 4 reset */
 234:Board.c       **** 			|(0 << TIM5RST)     	/*!< Timer 5 reset */
 235:Board.c       **** 			|(0 << TIM6RST)     	/*!< Timer 6 reset */
 236:Board.c       **** 			|(0 << TIM7RST)     	/*!< Timer 7 reset */
 237:Board.c       **** 			|(0 << WWDGRST)     	/*!< Window Watchdog reset */
 238:Board.c       **** 			|(0 << SPI2RST)     	/*!< SPI 2 reset */
 239:Board.c       **** 			|(0 << SPI3RST)     	/*!< SPI 3 reset */
 240:Board.c       **** 			|(0 << USART2RST)     	/*!< USART 2 reset */
 241:Board.c       **** 			|(0 << USART3RST)     	/*!< RUSART 3 reset */
 242:Board.c       **** 			|(0 << UART4RST )     	/*!< UART 4 reset */
 243:Board.c       **** 			|(0 << UART5RST)     	/*!< UART 5 reset */
 244:Board.c       **** 			|(0 << I2C1RST)     	/*!< I2C 1 reset */
 245:Board.c       **** 			|(0 << I2C2RST)     	/*!< I2C 2 reset */
 246:Board.c       **** 			|(0 << USBRST)     	/*!< USB Device reset */
 247:Board.c       **** 			|(0 << CAN1RST)     	/*!< CAN1 reset */
 248:Board.c       **** 			|(0 << BKPRST)     	/*!< Backup interface reset */
 249:Board.c       **** 			|(0 << PWRRST)     	/*!< Power interface reset */
 250:Board.c       **** 			|(0 << DACRST);     	/*!< DAC interface reset */
 251:Board.c       **** 
 252:Board.c       ****  
 253:Board.c       ****  RCC->AHBENR = (0 << SDIOEN)
 254:Board.c       **** 				|(0 << FSMCEN)
 255:Board.c       **** 				|(0 << CRCEN)
 256:Board.c       **** 				|(1 << FLITFEN)
 257:Board.c       **** 				|(1 << SRAMEN)
 258:Board.c       **** 				|(0 << DMA2EN)
 259:Board.c       **** 				|(1 << DMA1EN);
 260:Board.c       **** 
 261:Board.c       ****  RCC->APB1ENR = (0 << DACEN)
 262:Board.c       **** 				|(0 << PWREN)
 263:Board.c       **** 				|(0 << BKPEN)
 264:Board.c       **** 				|(0 << CANEN)
 265:Board.c       **** 				|(0 << USBEN)
 266:Board.c       **** 				|(0 << I2C2EN)
 267:Board.c       **** 				|(0 << I2C1EN)
 268:Board.c       **** 				|(0 << UART5EN)
 269:Board.c       **** 				|(0 << UART4EN)
 270:Board.c       **** 				|(0 << USART3EN)
 271:Board.c       **** 				|(0 << USART2EN)
 272:Board.c       **** 				|(0 << SPI3EN)
 273:Board.c       **** 				|(0 << SPI2EN)
 274:Board.c       **** 				|(0 << WWDGEN)
 275:Board.c       **** 				|(0 << TIM7EN)
 276:Board.c       **** 				|(0 << TIM6EN)
 277:Board.c       **** 				|(0 << TIM5EN)
 278:Board.c       **** 				|(1 << TIM4EN)
 279:Board.c       **** 				|(1 << TIM3EN)
 280:Board.c       **** 				|(1 << TIM2EN);
 281:Board.c       **** 
 282:Board.c       ****  RCC->APB2ENR = (0 << ADC3EN)
  39              		.loc 1 282 0
  40 0004 44F63D61 		movw	r1, #20029
 253:Board.c       **** 				|(0 << FSMCEN)
  41              		.loc 1 253 0
  42 0008 1524     		movs	r4, #21
 261:Board.c       **** 				|(0 << PWREN)
  43              		.loc 1 261 0
  44 000a 0720     		movs	r0, #7
  60:Board.c       **** 			|(0 << HSIRDY)     	/*!< Internal High Speed clock ready flag */
  45              		.loc 1 60 0
  46 000c 134B     		ldr	r3, .L12
 172:Board.c       **** 			|(0 << SWS)     		/*!< SWS[1:0] bits (System Clock Switch Status) */
  47              		.loc 1 172 0
  48 000e 144D     		ldr	r5, .L12+4
  60:Board.c       **** 			|(0 << HSIRDY)     	/*!< Internal High Speed clock ready flag */
  49              		.loc 1 60 0
  50 0010 144E     		ldr	r6, .L12+8
  51 0012 1E60     		str	r6, [r3]
 172:Board.c       **** 			|(0 << SWS)     		/*!< SWS[1:0] bits (System Clock Switch Status) */
  52              		.loc 1 172 0
  53 0014 5D60     		str	r5, [r3, #4]
 184:Board.c       **** 			|(0 << HSIRDY)     	/*!< Internal High Speed clock ready flag */
  54              		.loc 1 184 0
  55 0016 144D     		ldr	r5, .L12+12
  56 0018 1D60     		str	r5, [r3]
 196:Board.c       **** 			|(0 << LSERDYF)     	/*!< LSE Ready Interrupt flag */
  57              		.loc 1 196 0
  58 001a 9A60     		str	r2, [r3, #8]
 215:Board.c       **** 			|(0 << IOPARST)     	/*!< I/O port A reset */
  59              		.loc 1 215 0
  60 001c DA60     		str	r2, [r3, #12]
 231:Board.c       **** 			|(0 << TIM3RST)     	/*!< Timer 3 reset */
  61              		.loc 1 231 0
  62 001e 1A61     		str	r2, [r3, #16]
 253:Board.c       **** 				|(0 << FSMCEN)
  63              		.loc 1 253 0
  64 0020 5C61     		str	r4, [r3, #20]
 261:Board.c       **** 				|(0 << PWREN)
  65              		.loc 1 261 0
  66 0022 D861     		str	r0, [r3, #28]
  67              		.loc 1 282 0
  68 0024 9961     		str	r1, [r3, #24]
 283:Board.c       **** 				|(1 << USART1EN)
 284:Board.c       **** 				|(0 << TIM8EN)
 285:Board.c       **** 				|(0 << SPI1EN)
 286:Board.c       **** 				|(1 << TIM1EN)
 287:Board.c       **** 				|(1 << ADC2EN)
 288:Board.c       **** 				|(1 << ADC1EN)
 289:Board.c       **** 				|(0 << IOPGEN)
 290:Board.c       **** 				|(0 << IOPFEN)
 291:Board.c       **** 				|(0 << IOPEEN)
 292:Board.c       **** 				|(1 << IOPDEN)
 293:Board.c       **** 				|(1 << IOPCEN)
 294:Board.c       **** 				|(1 << IOPBEN)
 295:Board.c       **** 				|(1 << IOPAEN)
 296:Board.c       **** 				|(1 << AFIOEN);
 297:Board.c       **** 
 298:Board.c       ****  RCC->BDCR = 0x00000000;
  69              		.loc 1 298 0
  70 0026 1A62     		str	r2, [r3, #32]
 299:Board.c       ****  RCC->CSR = 0x00000000;
  71              		.loc 1 299 0
  72 0028 5A62     		str	r2, [r3, #36]
 300:Board.c       **** 
 301:Board.c       ****  // Switch to HSE if it is ready
 302:Board.c       ****  if(BitTest(RCC->CR, (1 << HSERDY))) {
  73              		.loc 1 302 0
  74 002a 1A68     		ldr	r2, [r3]
  75 002c 9103     		lsls	r1, r2, #14
  76 002e 07D5     		bpl	.L2
 303:Board.c       **** 	RCC->CFGR &= ~RCC_CFGR_SW;
  77              		.loc 1 303 0
  78 0030 5A68     		ldr	r2, [r3, #4]
  79 0032 22F00302 		bic	r2, r2, #3
  80 0036 5A60     		str	r2, [r3, #4]
 304:Board.c       **** 	RCC->CFGR |= RCC_CFGR_SW_HSE;
  81              		.loc 1 304 0
  82 0038 5A68     		ldr	r2, [r3, #4]
  83 003a 42F00102 		orr	r2, r2, #1
  84 003e 5A60     		str	r2, [r3, #4]
  85              	.L2:
 305:Board.c       ****  	}
 306:Board.c       **** 
 307:Board.c       ****   // Switch to PLL if it is ready
 308:Board.c       ****  if(BitTest(RCC->CR, (1 << PLLRDY))) {
  86              		.loc 1 308 0
  87 0040 064B     		ldr	r3, .L12
  88 0042 1A68     		ldr	r2, [r3]
  89 0044 9201     		lsls	r2, r2, #6
  90 0046 07D5     		bpl	.L1
 309:Board.c       **** 	RCC->CFGR &= ~RCC_CFGR_SW;
  91              		.loc 1 309 0
  92 0048 5A68     		ldr	r2, [r3, #4]
  93 004a 22F00302 		bic	r2, r2, #3
  94 004e 5A60     		str	r2, [r3, #4]
 310:Board.c       **** 	RCC->CFGR |= RCC_CFGR_SW_PLL;
  95              		.loc 1 310 0
  96 0050 5A68     		ldr	r2, [r3, #4]
  97 0052 42F00202 		orr	r2, r2, #2
  98 0056 5A60     		str	r2, [r3, #4]
  99              	.L1:
 311:Board.c       ****  	}
 312:Board.c       **** 
 313:Board.c       **** }
 100              		.loc 1 313 0
 101 0058 70BC     		pop	{r4, r5, r6}
 102              		.cfi_restore 6
 103              		.cfi_restore 5
 104              		.cfi_restore 4
 105              		.cfi_def_cfa_offset 0
 106 005a 7047     		bx	lr
 107              	.L13:
 108              		.align	2
 109              	.L12:
 110 005c 00100240 		.word	1073876992
 111 0060 00841D00 		.word	1934336
 112 0064 81000100 		.word	65665
 113 0068 81000101 		.word	16842881
 114              		.cfi_endproc
 115              	.LFE29:
 117              		.section	.text.Port_Init,"ax",%progbits
 118              		.align	1
 119              		.p2align 2,,3
 120              		.global	Port_Init
 121              		.syntax unified
 122              		.thumb
 123              		.thumb_func
 124              		.fpu softvfp
 126              	Port_Init:
 127              	.LFB30:
 314:Board.c       **** 
 315:Board.c       **** //-----------------------------------------------------------------------------
 316:Board.c       **** // Misc_Init
 317:Board.c       **** //-----------------------------------------------------------------------------
 318:Board.c       **** 
 319:Board.c       **** //-----------------------------------------------------------------------------
 320:Board.c       **** // PORT_Init
 321:Board.c       **** //-----------------------------------------------------------------------------
 322:Board.c       **** //
 323:Board.c       **** // This routine configures the crossbar and GPIO ports.
 324:Board.c       **** //
 325:Board.c       **** void Port_Init(void)
 326:Board.c       **** {
 128              		.loc 1 326 0
 129              		.cfi_startproc
 130              		@ args = 0, pretend = 0, frame = 0
 131              		@ frame_needed = 0, uses_anonymous_args = 0
 132              		@ link register save eliminated.
 133 0000 30B4     		push	{r4, r5}
 134              		.cfi_def_cfa_offset 8
 135              		.cfi_offset 4, -8
 136              		.cfi_offset 5, -4
 327:Board.c       ****  GPIOA->CRL = ((GPIO_CNF_AnalogIn | GPIO_Mode_In) << (0*4))	// ADC1_IN0
 328:Board.c       ****  			|((GPIO_CNF_Floating | GPIO_Mode_In) << (1*4))
 329:Board.c       ****  			|((GPIO_CNF_Floating|GPIO_Mode_In) << (2*4))	
 330:Board.c       ****  			|((GPIO_CNF_Floating |GPIO_Mode_In) << (3*4))		
 331:Board.c       ****  			|((GPIO_CNF_Floating | GPIO_Mode_In) << (4*4))
 332:Board.c       ****  			|((GPIO_CNF_Floating | GPIO_Mode_In) << (5*4))
 333:Board.c       ****  			|((GPIO_CNF_Floating | GPIO_Mode_In) << (6*4))		
 334:Board.c       ****  			|((GPIO_CNF_AF_PP | GPIO_Mode_Out50M) << (7*4));		//Test signal
 335:Board.c       **** 
 336:Board.c       **** 
 337:Board.c       ****  GPIOA->CRH = ((GPIO_CNF_Floating| GPIO_Mode_In) << (8 - 8)*4)		// TrigIn
 338:Board.c       ****  			|((GPIO_CNF_AF_PP |GPIO_Mode_Out50M) << (9 - 8)*4)	// TX1
 339:Board.c       ****  			|((GPIO_CNF_Floating | GPIO_Mode_In) << (10 - 8)*4)		// RX1
 340:Board.c       ****  			|((GPIO_CNF_Floating | GPIO_Mode_In) << (11 - 8)*4)
 341:Board.c       ****  			|((GPIO_CNF_Floating | GPIO_Mode_In) << (12 - 8)*4)
 342:Board.c       ****  			|((GPIO_CNF_Floating | GPIO_Mode_In) << (13 - 8)*4)
 343:Board.c       ****  			|((GPIO_CNF_Floating | GPIO_Mode_In) << (14 - 8)*4)
 344:Board.c       ****  			|((GPIO_CNF_GP_PP | GPIO_Mode_Out50M) << (15 - 8)*4);	// LED
 345:Board.c       **** 
 346:Board.c       ****  GPIOA->ODR = 0xFFFF;
 137              		.loc 1 346 0
 138 0002 4FF6FF72 		movw	r2, #65535
 347:Board.c       **** 
 348:Board.c       ****  GPIOB->CRL = ((GPIO_CNF_GP_PP | GPIO_Mode_Out50M) << (0*4))		// TFT port - D0
 139              		.loc 1 348 0
 140 0006 4FF03335 		mov	r5, #858993459
 349:Board.c       ****  			|((GPIO_CNF_GP_PP | GPIO_Mode_Out50M) << (1*4))		// TFT port - D1
 350:Board.c       ****  			|((GPIO_CNF_GP_PP | GPIO_Mode_Out50M) << (2*4))		// TFT port - D2
 351:Board.c       ****  			|((GPIO_CNF_GP_PP | GPIO_Mode_Out50M) << (3*4))		// TFT port - D3
 352:Board.c       ****  			|((GPIO_CNF_GP_PP | GPIO_Mode_Out50M) << (4*4))		// TFT port - D4
 353:Board.c       ****  			|((GPIO_CNF_GP_PP | GPIO_Mode_Out50M) << (5*4))		// TFT port - D5
 354:Board.c       ****  			|((GPIO_CNF_GP_PP | GPIO_Mode_Out50M) << (6*4))		// TFT port - D6	
 355:Board.c       ****  			|((GPIO_CNF_GP_PP | GPIO_Mode_Out50M) << (7*4));		// TFT port - D7		
 356:Board.c       **** 
 357:Board.c       ****  GPIOB->CRH = ((GPIO_CNF_AF_PP| GPIO_Mode_Out50M) << ((8 - 8)*4))		// Output, Trigger level
 358:Board.c       ****  			|((GPIO_CNF_AF_PP| GPIO_Mode_Out50M) << ((9 - 8)*4))		// Output, Gen
 359:Board.c       ****  			|((GPIO_CNF_GP_PP | GPIO_Mode_Out50M) << ((10 - 8)*4))		// Output, TFT_nRD
 360:Board.c       ****  			|((GPIO_CNF_GP_PP | GPIO_Mode_Out50M) << ((11 - 8)*4))		// Output, TFT_nReset
 361:Board.c       ****  			|((GPIO_CNF_IPU | GPIO_Mode_In) << ((12 - 8)*4))		// SW4	
 362:Board.c       ****  			|((GPIO_CNF_IPU | GPIO_Mode_In) << ((13 - 8)*4))		// SW3
 363:Board.c       ****  			|((GPIO_CNF_IPU | GPIO_Mode_In) << ((14 - 8)*4))		// SW2
 364:Board.c       ****  			|((GPIO_CNF_IPU | GPIO_Mode_In) << ((15 - 8)*4));		// SW1
 365:Board.c       **** 
 366:Board.c       ****  GPIOB->ODR = 0xFFFF;
 367:Board.c       **** 
 368:Board.c       ****  GPIOC->CRH = ((GPIO_CNF_GP_PP | GPIO_Mode_Out50M) << (13 - 8)*4)		// TFT_nCS
 369:Board.c       ****  			|((GPIO_CNF_GP_PP | GPIO_Mode_Out50M) << (14 - 8)*4)		// TFT_RS
 370:Board.c       ****  			|((GPIO_CNF_GP_PP | GPIO_Mode_Out50M) << (15 - 8)*4);		// TFT_nWR
 371:Board.c       **** 
 372:Board.c       ****  GPIOC->ODR = 0xFFFF;
 373:Board.c       ****  
 374:Board.c       ****  GPIOD->CRL = ((GPIO_CNF_Floating | GPIO_Mode_In) << (0*4))		
 141              		.loc 1 374 0
 142 000a 4424     		movs	r4, #68
 327:Board.c       ****  			|((GPIO_CNF_Floating | GPIO_Mode_In) << (1*4))
 143              		.loc 1 327 0
 144 000c 0E49     		ldr	r1, .L16
 145 000e 0F4B     		ldr	r3, .L16+4
 337:Board.c       ****  			|((GPIO_CNF_AF_PP |GPIO_Mode_Out50M) << (9 - 8)*4)	// TX1
 146              		.loc 1 337 0
 147 0010 0F48     		ldr	r0, .L16+8
 327:Board.c       ****  			|((GPIO_CNF_Floating | GPIO_Mode_In) << (1*4))
 148              		.loc 1 327 0
 149 0012 0B60     		str	r3, [r1]
 337:Board.c       ****  			|((GPIO_CNF_AF_PP |GPIO_Mode_Out50M) << (9 - 8)*4)	// TX1
 150              		.loc 1 337 0
 151 0014 4860     		str	r0, [r1, #4]
 348:Board.c       ****  			|((GPIO_CNF_GP_PP | GPIO_Mode_Out50M) << (1*4))		// TFT port - D1
 152              		.loc 1 348 0
 153 0016 0F4B     		ldr	r3, .L16+12
 357:Board.c       ****  			|((GPIO_CNF_AF_PP| GPIO_Mode_Out50M) << ((9 - 8)*4))		// Output, Gen
 154              		.loc 1 357 0
 155 0018 0F48     		ldr	r0, .L16+16
 346:Board.c       **** 
 156              		.loc 1 346 0
 157 001a CA60     		str	r2, [r1, #12]
 348:Board.c       ****  			|((GPIO_CNF_GP_PP | GPIO_Mode_Out50M) << (1*4))		// TFT port - D1
 158              		.loc 1 348 0
 159 001c 1D60     		str	r5, [r3]
 357:Board.c       ****  			|((GPIO_CNF_AF_PP| GPIO_Mode_Out50M) << ((9 - 8)*4))		// Output, Gen
 160              		.loc 1 357 0
 161 001e 5860     		str	r0, [r3, #4]
 368:Board.c       ****  			|((GPIO_CNF_GP_PP | GPIO_Mode_Out50M) << (14 - 8)*4)		// TFT_RS
 162              		.loc 1 368 0
 163 0020 0E4D     		ldr	r5, .L16+20
 164              		.loc 1 374 0
 165 0022 0F48     		ldr	r0, .L16+24
 366:Board.c       **** 
 166              		.loc 1 366 0
 167 0024 DA60     		str	r2, [r3, #12]
 368:Board.c       ****  			|((GPIO_CNF_GP_PP | GPIO_Mode_Out50M) << (14 - 8)*4)		// TFT_RS
 168              		.loc 1 368 0
 169 0026 C1F80458 		str	r5, [r1, #2052]
 375:Board.c       ****  			|((GPIO_CNF_Floating | GPIO_Mode_In) << (1*4));		
 376:Board.c       **** 
 377:Board.c       ****  // Remap to make PB3 & PB4 available
 378:Board.c       ****  AFIO->MAPR &= ~AFIO_MAPR_SWJ_CFG;
 170              		.loc 1 378 0
 171 002a A3F54063 		sub	r3, r3, #3072
 372:Board.c       ****  
 172              		.loc 1 372 0
 173 002e C1F80C28 		str	r2, [r1, #2060]
 374:Board.c       ****  			|((GPIO_CNF_Floating | GPIO_Mode_In) << (1*4));		
 174              		.loc 1 374 0
 175 0032 0460     		str	r4, [r0]
 176              		.loc 1 378 0
 177 0034 5A68     		ldr	r2, [r3, #4]
 379:Board.c       ****  AFIO->MAPR |= AFIO_MAPR_SWJ_CFG_1;
 380:Board.c       ****  
 381:Board.c       **** }
 178              		.loc 1 381 0
 179 0036 30BC     		pop	{r4, r5}
 180              		.cfi_restore 5
 181              		.cfi_restore 4
 182              		.cfi_def_cfa_offset 0
 378:Board.c       ****  AFIO->MAPR |= AFIO_MAPR_SWJ_CFG_1;
 183              		.loc 1 378 0
 184 0038 22F0E062 		bic	r2, r2, #117440512
 185 003c 5A60     		str	r2, [r3, #4]
 379:Board.c       ****  AFIO->MAPR |= AFIO_MAPR_SWJ_CFG_1;
 186              		.loc 1 379 0
 187 003e 5A68     		ldr	r2, [r3, #4]
 188 0040 42F00072 		orr	r2, r2, #33554432
 189 0044 5A60     		str	r2, [r3, #4]
 190              		.loc 1 381 0
 191 0046 7047     		bx	lr
 192              	.L17:
 193              		.align	2
 194              	.L16:
 195 0048 00080140 		.word	1073809408
 196 004c 404444B4 		.word	-1270594496
 197 0050 B4444434 		.word	876889268
 198 0054 000C0140 		.word	1073810432
 199 0058 BB338888 		.word	-2004339781
 200 005c 00003033 		.word	858783744
 201 0060 00140140 		.word	1073812480
 202              		.cfi_endproc
 203              	.LFE30:
 205              		.section	.text.USART1_Init,"ax",%progbits
 206              		.align	1
 207              		.p2align 2,,3
 208              		.global	USART1_Init
 209              		.syntax unified
 210              		.thumb
 211              		.thumb_func
 212              		.fpu softvfp
 214              	USART1_Init:
 215              	.LFB31:
 382:Board.c       **** 
 383:Board.c       **** void	USART1_Init(void)
 384:Board.c       **** {
 216              		.loc 1 384 0
 217              		.cfi_startproc
 218              		@ args = 0, pretend = 0, frame = 16
 219              		@ frame_needed = 0, uses_anonymous_args = 0
 220 0000 30B5     		push	{r4, r5, lr}
 221              		.cfi_def_cfa_offset 12
 222              		.cfi_offset 4, -12
 223              		.cfi_offset 5, -8
 224              		.cfi_offset 14, -4
 385:Board.c       ****  USART_InitTypeDef USART_InitStructure;
 386:Board.c       ****  
 387:Board.c       ****   USART_InitStructure.USART_BaudRate = 38400;
 225              		.loc 1 387 0
 226 0002 0023     		movs	r3, #0
 227 0004 4FF41642 		mov	r2, #38400
 388:Board.c       ****   USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 389:Board.c       ****   USART_InitStructure.USART_StopBits = USART_StopBits_1;
 228              		.loc 1 389 0
 229 0008 4FF44025 		mov	r5, #786432
 390:Board.c       ****   USART_InitStructure.USART_Parity = USART_Parity_No;
 391:Board.c       ****   USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 392:Board.c       ****   USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 393:Board.c       ****   
 394:Board.c       ****   /* Configure USART1 */
 395:Board.c       ****   USART_Init(USART1, &USART_InitStructure);
 230              		.loc 1 395 0
 231 000c 084C     		ldr	r4, .L20
 384:Board.c       ****  USART_InitTypeDef USART_InitStructure;
 232              		.loc 1 384 0
 233 000e 85B0     		sub	sp, sp, #20
 234              		.cfi_def_cfa_offset 32
 235              		.loc 1 395 0
 236 0010 6946     		mov	r1, sp
 237 0012 2046     		mov	r0, r4
 387:Board.c       ****   USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 238              		.loc 1 387 0
 239 0014 0092     		str	r2, [sp]
 240 0016 0193     		str	r3, [sp, #4]
 241              		.loc 1 395 0
 242 0018 064A     		ldr	r2, .L20+4
 392:Board.c       ****   
 243              		.loc 1 392 0
 244 001a ADF80C30 		strh	r3, [sp, #12]	@ movhi
 389:Board.c       ****   USART_InitStructure.USART_Parity = USART_Parity_No;
 245              		.loc 1 389 0
 246 001e 0295     		str	r5, [sp, #8]
 247              		.loc 1 395 0
 248 0020 9047     		blx	r2
 249              	.LVL0:
 396:Board.c       ****   
 397:Board.c       ****   /* Enable the USART1 */
 398:Board.c       ****   USART_Cmd(USART1, ENABLE);
 250              		.loc 1 398 0
 251 0022 2046     		mov	r0, r4
 252 0024 0121     		movs	r1, #1
 253 0026 044B     		ldr	r3, .L20+8
 254 0028 9847     		blx	r3
 255              	.LVL1:
 399:Board.c       **** 
 400:Board.c       **** }
 256              		.loc 1 400 0
 257 002a 05B0     		add	sp, sp, #20
 258              		.cfi_def_cfa_offset 12
 259              		@ sp needed
 260 002c 30BD     		pop	{r4, r5, pc}
 261              	.L21:
 262 002e 00BF     		.align	2
 263              	.L20:
 264 0030 00380140 		.word	1073821696
 265 0034 00000000 		.word	USART_Init
 266 0038 00000000 		.word	USART_Cmd
 267              		.cfi_endproc
 268              	.LFE31:
 270              		.section	.text.UartPutc,"ax",%progbits
 271              		.align	1
 272              		.p2align 2,,3
 273              		.global	UartPutc
 274              		.syntax unified
 275              		.thumb
 276              		.thumb_func
 277              		.fpu softvfp
 279              	UartPutc:
 280              	.LFB32:
 401:Board.c       **** 
 402:Board.c       **** void	UartPutc(U8 ch, USART_TypeDef* USARTx)
 403:Board.c       **** {
 281              		.loc 1 403 0
 282              		.cfi_startproc
 283              		@ args = 0, pretend = 0, frame = 0
 284              		@ frame_needed = 0, uses_anonymous_args = 0
 285              	.LVL2:
 286 0000 70B5     		push	{r4, r5, r6, lr}
 287              		.cfi_def_cfa_offset 16
 288              		.cfi_offset 4, -16
 289              		.cfi_offset 5, -12
 290              		.cfi_offset 6, -8
 291              		.cfi_offset 14, -4
 292              		.loc 1 403 0
 293 0002 0646     		mov	r6, r0
 294 0004 0C46     		mov	r4, r1
 295 0006 064D     		ldr	r5, .L27
 296              	.LVL3:
 297              	.L23:
 404:Board.c       ****  while(USART_GetFlagStatus(USARTx, USART_FLAG_TXE) == RESET) {
 298              		.loc 1 404 0 discriminator 1
 299 0008 8021     		movs	r1, #128
 300 000a 2046     		mov	r0, r4
 301 000c A847     		blx	r5
 302              	.LVL4:
 303 000e 0028     		cmp	r0, #0
 304 0010 FAD0     		beq	.L23
 405:Board.c       **** 	}
 406:Board.c       ****  USART_SendData(USARTx, ch);
 305              		.loc 1 406 0
 306 0012 3146     		mov	r1, r6
 307 0014 2046     		mov	r0, r4
 407:Board.c       **** }
 308              		.loc 1 407 0
 309 0016 BDE87040 		pop	{r4, r5, r6, lr}
 310              		.cfi_restore 14
 311              		.cfi_restore 6
 312              		.cfi_restore 5
 313              		.cfi_restore 4
 314              		.cfi_def_cfa_offset 0
 315              	.LVL5:
 406:Board.c       **** }
 316              		.loc 1 406 0
 317 001a 024B     		ldr	r3, .L27+4
 318 001c 1847     		bx	r3	@ indirect register sibling call
 319              	.LVL6:
 320              	.L28:
 321 001e 00BF     		.align	2
 322              	.L27:
 323 0020 00000000 		.word	USART_GetFlagStatus
 324 0024 00000000 		.word	USART_SendData
 325              		.cfi_endproc
 326              	.LFE32:
 328              		.section	.text.uputs,"ax",%progbits
 329              		.align	1
 330              		.p2align 2,,3
 331              		.global	uputs
 332              		.syntax unified
 333              		.thumb
 334              		.thumb_func
 335              		.fpu softvfp
 337              	uputs:
 338              	.LFB33:
 408:Board.c       **** 
 409:Board.c       **** void	uputs(U8 *s, USART_TypeDef* USARTx)
 410:Board.c       **** {
 339              		.loc 1 410 0
 340              		.cfi_startproc
 341              		@ args = 0, pretend = 0, frame = 0
 342              		@ frame_needed = 0, uses_anonymous_args = 0
 343              	.LVL7:
 344 0000 70B5     		push	{r4, r5, r6, lr}
 345              		.cfi_def_cfa_offset 16
 346              		.cfi_offset 4, -16
 347              		.cfi_offset 5, -12
 348              		.cfi_offset 6, -8
 349              		.cfi_offset 14, -4
 350              		.loc 1 410 0
 351 0002 0446     		mov	r4, r0
 411:Board.c       ****  while(*s != 0) {
 352              		.loc 1 411 0
 353 0004 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 354              	.LVL8:
 355 0006 38B1     		cbz	r0, .L29
 356 0008 0D46     		mov	r5, r1
 357 000a 044E     		ldr	r6, .L37
 358              	.LVL9:
 359              	.L31:
 412:Board.c       ****  	UartPutc(*s, USARTx);
 360              		.loc 1 412 0
 361 000c 2946     		mov	r1, r5
 362 000e B047     		blx	r6
 363              	.LVL10:
 411:Board.c       ****  while(*s != 0) {
 364              		.loc 1 411 0
 365 0010 14F8010F 		ldrb	r0, [r4, #1]!	@ zero_extendqisi2
 366              	.LVL11:
 367 0014 0028     		cmp	r0, #0
 368 0016 F9D1     		bne	.L31
 369              	.LVL12:
 370              	.L29:
 413:Board.c       **** 	s++;
 414:Board.c       ****  	}
 415:Board.c       **** }
 371              		.loc 1 415 0
 372 0018 70BD     		pop	{r4, r5, r6, pc}
 373              	.L38:
 374 001a 00BF     		.align	2
 375              	.L37:
 376 001c 00000000 		.word	UartPutc
 377              		.cfi_endproc
 378              	.LFE33:
 380              		.section	.text.TIM3_Init,"ax",%progbits
 381              		.align	1
 382              		.p2align 2,,3
 383              		.global	TIM3_Init
 384              		.syntax unified
 385              		.thumb
 386              		.thumb_func
 387              		.fpu softvfp
 389              	TIM3_Init:
 390              	.LFB34:
 416:Board.c       **** 
 417:Board.c       ****  void	TIM3_Init(void)
 418:Board.c       **** {
 391              		.loc 1 418 0
 392              		.cfi_startproc
 393              		@ args = 0, pretend = 0, frame = 0
 394              		@ frame_needed = 0, uses_anonymous_args = 0
 395              		@ link register save eliminated.
 396 0000 F0B4     		push	{r4, r5, r6, r7}
 397              		.cfi_def_cfa_offset 16
 398              		.cfi_offset 4, -16
 399              		.cfi_offset 5, -12
 400              		.cfi_offset 6, -8
 401              		.cfi_offset 7, -4
 419:Board.c       ****  // Disable counter first
 420:Board.c       ****  TIM3->CR1 = (0 << CEN)    	    	//!<Counter enable //
 421:Board.c       **** 		| (0 << UDIS)           		//!<Update disable //
 422:Board.c       **** 		| (0 << URS)          		//!<Update request source //
 423:Board.c       **** 		| (0 << OPM)          		//!<One pulse mode //
 424:Board.c       **** 		| (0 << DIR)          		//!<Direction. 0: Up, 1: Down
 425:Board.c       **** 		| (0 << CMS)          		//!<CMS[1:0] bits (Center-aligned mode selection) //
 426:Board.c       **** 		| (1 << ARPE)          		//!<Auto-reload preload enable //
 427:Board.c       **** 		| (0 << CKD);          		//!<CKD[1:0] bits (clock division for filtering) 0 = 1/1, 1 = 1/2, 2 = 1
 428:Board.c       **** 
 429:Board.c       ****  TIM3->CR2 = (0 << CCPC)           	//<Capture/Compare Preloaded Control //
 402              		.loc 1 429 0
 403 0002 0022     		movs	r2, #0
 430:Board.c       **** 		| (0 << CCUS)           		//<Capture/Compare Control Update Selection //
 431:Board.c       **** 		| (0 << CCDS)           		//<Capture/Compare DMA Selection //
 432:Board.c       **** 		| (0 << MMS)           		//<MMS[2:0] bits (Master Mode Selection) //
 433:Board.c       **** 		| (0 << TI1S)           		//<TI1 Selection //
 434:Board.c       **** 		| (0 << OIS1)           		//<Output Idle state 1 (OC1 output) //
 435:Board.c       **** 		| (0 << OIS1N)           		//<Output Idle state 1 (OC1N output) //
 436:Board.c       **** 		| (0 << OIS2)           		//<Output Idle state 2 (OC2 output) //
 437:Board.c       **** 		| (0 << OIS2N)           		//<Output Idle state 2 (OC2N output) //
 438:Board.c       **** 		| (0 << OIS3)           		//<Output Idle state 3 (OC3 output) //
 439:Board.c       **** 		| (0 << OIS3N)           		//<Output Idle state 3 (OC3N output) //
 440:Board.c       **** 		| (0 << OIS4);           		//<Output Idle state 4 (OC4 output) //
 441:Board.c       **** 
 442:Board.c       ****  TIM3->SMCR = (0 << SMS)           	//<SMS[2:0] bits (Slave mode selection) //
 443:Board.c       **** 		| (0 << TS)           		//<TS[2:0] bits (Trigger selection) //
 444:Board.c       **** 		| (0 << MSM)           		//<Master/slave mode //
 445:Board.c       **** 		| (0 << ETF)           		//<ETF[3:0] bits (External trigger filter) //
 446:Board.c       **** 		| (0 << ETPS)           		//<ETPS[1:0] bits (External trigger prescaler) //
 447:Board.c       **** 		| (0 << ECE)           		//<External clock enable //
 448:Board.c       **** 		| (0 << ETP);           		//<External trigger polarity //
 449:Board.c       **** 
 450:Board.c       ****  
 451:Board.c       ****  TIM3->DIER = (0 << UIE)           	//<Update interrupt enable //
 452:Board.c       **** 		| (0 << CC1IE)           		//<Capture/Compare 1 interrupt enable //
 453:Board.c       **** 		| (0 << CC2IE)           		//<Capture/Compare 2 interrupt enable //
 454:Board.c       **** 		| (0 << CC3IE)           		//<Capture/Compare 3 interrupt enable //
 455:Board.c       **** 		| (0 << CC4IE)           		//<Capture/Compare 4 interrupt enable //
 456:Board.c       **** 		| (0 << COMIE)           		//<COM interrupt enable //
 457:Board.c       **** 		| (0 << TIE)           		//<Trigger interrupt enable //
 458:Board.c       **** 		| (0 << BIE)           		//<Break interrupt enable //
 459:Board.c       **** 		| (0 << UDE)           		//<Update DMA request enable //
 460:Board.c       **** 		| (0 << CC1DE)           		//<Capture/Compare 1 DMA request enable //
 461:Board.c       **** 		| (0 << CC2DE)           		//<Capture/Compare 2 DMA request enable //
 462:Board.c       **** 		| (0 << CC3DE)           		//<Capture/Compare 3 DMA request enable //
 463:Board.c       **** 		| (0 << CC4DE)           		//<Capture/Compare 4 DMA request enable //
 464:Board.c       **** 		| (0 << COMDE)           	//<COM DMA request enable //
 465:Board.c       **** 		| (0 << TDE);           		//<Trigger DMA request enable //
 466:Board.c       **** 
 467:Board.c       ****  
 468:Board.c       ****  TIM3->SR = 0x0000;
 469:Board.c       ****  TIM3->EGR = 0x0000;
 470:Board.c       ****  
 471:Board.c       **** //----------------------------------------------------------------------------
 472:Board.c       **** // TIMx capture/compare usage (x = 2 ~ 5, n = 1 ~ 4)
 473:Board.c       **** //
 474:Board.c       **** //	CCnS[1:0] :
 475:Board.c       **** //		00: CCn channel is configured as output.
 476:Board.c       **** //		01: CCn channel is configured as input, ICn is mapped on TI1.
 477:Board.c       **** //		10: CCn channel is configured as input, ICn is mapped on TI2.
 478:Board.c       **** //		11: CCn channel is configured as input, ICn is mapped on TRC. This mode is working only
 479:Board.c       **** //			if an internal trigger input is selected through TS bit (TIMx_SMCR register)
 480:Board.c       **** //		Note: 	CCnS bits are writable only when the channel is OFF (CCnE = 0 in TIMx_CCER).
 481:Board.c       **** //				Output compare mode
 482:Board.c       **** //
 483:Board.c       **** //	OCnM[2:0] :
 484:Board.c       **** //		000: Frozen
 485:Board.c       **** //		001: Set channel n to active level on match. 
 486:Board.c       **** //		010: Set channel n to inactive level on match. 
 487:Board.c       **** //		011: Toggle - OCnREF toggles when TIMx_CNT=TIMx_CCRn.
 488:Board.c       **** //		100: Force inactive level - OCnREF is forced low.
 489:Board.c       **** //		101: Force active level - OCnREF is forced high.
 490:Board.c       **** //		110: PWM mode 1 - In upcounting, channel n is active as long as TIMx_CNT<TIMx_CCRn
 491:Board.c       **** //			else inactive. In downcounting, channel 1 is inactive (OCnREF=0) as long as
 492:Board.c       **** //			TIMx_CNT>TIMx_CCRn else active (OCnREF=1).
 493:Board.c       **** //		111: PWM mode 2 - In upcounting, channel n is inactive as long as
 494:Board.c       **** //			TIMx_CNT<TIMx_CCRn else active. In downcounting, channel n is active as long as
 495:Board.c       **** //			TIMx_CNT>TIMx_CCRn else inactive.
 496:Board.c       **** //		Note: 1: These bits can not be modified as long as LOCK level 3 has been programmed
 497:Board.c       **** //				(LOCK bits in TIMx_BDTR register) and CC1S=00 (the channel is configured in output).
 498:Board.c       **** //			  2: In PWM mode 1 or 2, the OCREF level changes only when the result of the
 499:Board.c       **** //				comparison changes or when the output compare mode switches from "frozen" mode
 500:Board.c       **** //				to "PWM" mode.
 501:Board.c       **** //		
 502:Board.c       **** //	ICnPSC[1:0] :
 503:Board.c       **** //			This bit-field defines the ratio of the prescaler acting on CCn input (ICn).
 504:Board.c       **** //			The prescaler is reset as soon as CC1E= 0 (TIMx_CCER register).
 505:Board.c       **** //		00: no prescaler, capture is done each time an edge is detected on the capture input.
 506:Board.c       **** //		01: capture is done once every 2 events.
 507:Board.c       **** //		10: capture is done once every 4 events.
 508:Board.c       **** //		11: capture is done once every 8 events.
 509:Board.c       **** //		
 510:Board.c       **** //	ICnF[3:0] :
 511:Board.c       **** //			This bit-field defines the frequency used to sample TIn input and the length of the digital
 512:Board.c       **** //			filter applied to TIn. The digital filter is made of an event counter in which N events are
 513:Board.c       **** //			needed to validate a transition on the output:
 514:Board.c       **** //		0000: No filter, sampling is done at fDTS.
 515:Board.c       **** //		0001: fSAMPLING=fCK_INT, N=2.
 516:Board.c       **** //		0010: fSAMPLING=fCK_INT, N=4.
 517:Board.c       **** //		0011: fSAMPLING=fCK_INT, N=8.
 518:Board.c       **** //		0100: fSAMPLING=fDTS/2, N=6.
 519:Board.c       **** //		0101: fSAMPLING=fDTS/2, N=8.
 520:Board.c       **** //		0110: fSAMPLING=fDTS/4, N=6.
 521:Board.c       **** //		0111: fSAMPLING=fDTS/4, N=8.
 522:Board.c       **** //		1000: fSAMPLING=fDTS/8, N=6.
 523:Board.c       **** //		1001: fSAMPLING=fDTS/8, N=8.
 524:Board.c       **** //		1010: fSAMPLING=fDTS/16, N=5.
 525:Board.c       **** //		1011: fSAMPLING=fDTS/16, N=6.
 526:Board.c       **** //		1100: fSAMPLING=fDTS/16, N=8.
 527:Board.c       **** //		1101: fSAMPLING=fDTS/32, N=5.
 528:Board.c       **** //		1110: fSAMPLING=fDTS/32, N=6.
 529:Board.c       **** //		1111: fSAMPLING=fDTS/32, N=8.
 530:Board.c       **** //				Note: 	In current silicon revision, fDTS is replaced in the formula by CK_INT 
 531:Board.c       **** //						when ICnF[3:0]= 1, 2 or 3.
 532:Board.c       **** //		
 533:Board.c       **** // Output compare mode
 534:Board.c       ****  TIM3->CCMR1 = (0 << CC1S)          	//!<CC1S[1:0] bits (Capture/Compare 1 Selection) 
 404              		.loc 1 534 0
 405 0004 4FF44057 		mov	r7, #12288
 535:Board.c       **** 		| (0 << OC1FE)           	 	//!<Output Compare 1 Fast enable 
 536:Board.c       **** 		| (0 << OC1PE)           		//!<Output Compare 1 Preload enable 
 537:Board.c       **** 		| (0 << OC1M)           	//!<OC1M[2:0] bits (Output Compare 1 Mode) 
 538:Board.c       **** 		| (0 << OC1CE)           		//!<Output Compare 1Clear Enable 
 539:Board.c       **** 		| (0 << CC2S)           		//!<CC2S[1:0] bits (Capture/Compare 2 Selection) 
 540:Board.c       **** 		| (0 << OC2FE)           		//!<Output Compare 2 Fast enable 
 541:Board.c       **** 		| (0 << OC2PE)           		//!<Output Compare 2 Preload enable 
 542:Board.c       **** 		| (3 << OC2M)           		//!<OC2M[2:0] bits (Output Compare 2 Mode) 
 543:Board.c       **** 		| (0 << OC2CE);           	//!<Output Compare 2 Clear Enable 
 544:Board.c       **** 
 545:Board.c       **** // Input capture mode
 546:Board.c       **** // TIM3->CCMR1 = (0 << CC1S)          	//!<CC1S[1:0] bits (Capture/Compare 1 Selection) 
 547:Board.c       **** //		| (0 << IC1PSC)           	//!<IC1PSC[1:0] bits (Input Capture 1 Prescaler) 
 548:Board.c       **** //		| (0 << IC1F)           	 	//!<IC1F[3:0] bits (Input Capture 1 Filter) 
 549:Board.c       **** //		| (0 << CC2S)           		//!<CC2S[1:0] bits (Capture/Compare 2 Selection) 
 550:Board.c       **** //		| (0 << IC2PSC)           	//!<IC2PSC[1:0] bits (Input Capture 2 Prescaler) 
 551:Board.c       **** //		| (0 << IC2F);           	 	//!<IC2F[3:0] bits (Input Capture 2 Filter) 
 552:Board.c       **** 
 553:Board.c       **** // Output compare mode
 554:Board.c       ****  TIM3->CCMR2 = (0 << CC3S)          	//!<CC3S[1:0] bits (Capture/Compare 3 Selection) 
 555:Board.c       **** 		| (0 << OC3FE)           	 	//!<Output Compare 3 Fast enable 
 556:Board.c       **** 		| (0 << OC3PE)           		//!<Output Compare 3 Preload enable 
 557:Board.c       **** 		| (0 << OC3M)           		//!<OC3M[2:0] bits (Output Compare 3 Mode) 
 558:Board.c       **** 		| (0 << OC3CE)           		//!<Output Compare 3Clear Enable 
 559:Board.c       **** 		| (0 << CC4S)           		//!<CC4S[1:0] bits (Capture/Compare 4 Selection) 
 560:Board.c       **** 		| (0 << OC4FE)           		//!<Output Compare 4 Fast enable 
 561:Board.c       **** 		| (0 << OC4PE)           		//!<Output Compare 4 Preload enable 
 562:Board.c       **** 		| (0 << OC4M)           		//!<OC4M[2:0] bits (Output Compare 4 Mode) 
 563:Board.c       **** 		| (0 << OC4CE);           	//!<Output Compare 4 Clear Enable 
 564:Board.c       **** 
 565:Board.c       **** // Input capture mode
 566:Board.c       **** // TIM3->CCMR2 = (0 << CC3S)          	//!<CC3S[1:0] bits (Capture/Compare 3 Selection) 
 567:Board.c       **** //		| (0 << IC3PSC)           	//!<IC3PSC[1:0] bits (Input Capture 3 Prescaler) 
 568:Board.c       **** //		| (0 << IC3F)           	 	//!<IC3F[3:0] bits (Input Capture 3 Filter) 
 569:Board.c       **** //		| (0 << CC4S)           		//!<CC4S[1:0] bits (Capture/Compare 4 Selection) 
 570:Board.c       **** //		| (0 << IC4PSC)           	//!<IC4PSC[1:0] bits (Input Capture 4 Prescaler) 
 571:Board.c       **** //		| (0 << IC4F);           	 	//!<IC4F[3:0] bits (Input Capture 4 Filter) 
 572:Board.c       **** 
 573:Board.c       ****  TIM3->CCER = (0 << CC1E)           	//<Capture/Compare 1 output enable //
 406              		.loc 1 573 0
 407 0008 1026     		movs	r6, #16
 574:Board.c       **** 		| (0 << CC1P)           		//<Capture/Compare 1 output Polarity //
 575:Board.c       **** 		| (0 << CC1NE)           		//<Capture/Compare 1 Complementary output enable //
 576:Board.c       **** 		| (0 << CC1NP)           		//<Capture/Compare 1 Complementary output Polarity //
 577:Board.c       **** 		| (1 << CC2E)           		//<Capture/Compare 2 output enable //
 578:Board.c       **** 		| (0 << CC2P)           		//<Capture/Compare 2 output Polarity //
 579:Board.c       **** 		| (0 << CC2NE)           		//<Capture/Compare 2 Complementary output enable //
 580:Board.c       **** 		| (0 << CC2NP)           		//<Capture/Compare 2 Complementary output Polarity //
 581:Board.c       **** 		| (0 << CC3E)           		//<Capture/Compare 3 output enable //
 582:Board.c       **** 		| (0 << CC3P)           		//<Capture/Compare 3 output Polarity //
 583:Board.c       **** 		| (0 << CC3NE)           		//<Capture/Compare 3 Complementary output enable //
 584:Board.c       **** 		| (0 << CC3NP)           		//<Capture/Compare 3 Complementary output Polarity //
 585:Board.c       **** 		| (0 << CC4E)           		//<Capture/Compare 4 output enable //
 586:Board.c       **** 		| (0 << CC4P);           		 //<Capture/Compare 4 output Polarity //
 587:Board.c       **** 
 588:Board.c       ****  
 589:Board.c       ****  TIM3->CNT = 0x0000;
 590:Board.c       ****  
 591:Board.c       ****  TIM3->PSC = 3600 - 1;			// 0.5ms clock cycle
 408              		.loc 1 591 0
 409 000a 40F60F65 		movw	r5, #3599
 592:Board.c       ****  
 593:Board.c       ****  TIM3->ARR = 10 - 1;
 410              		.loc 1 593 0
 411 000e 0924     		movs	r4, #9
 594:Board.c       ****  
 595:Board.c       ****  TIM3->CCR1 = 5;
 412              		.loc 1 595 0
 413 0010 0521     		movs	r1, #5
 420:Board.c       **** 		| (0 << UDIS)           		//!<Update disable //
 414              		.loc 1 420 0
 415 0012 4FF0800C 		mov	ip, #128
 596:Board.c       ****  TIM3->CCR2 = 5;
 597:Board.c       ****  TIM3->CCR3 = 0x0000;
 598:Board.c       ****  TIM3->CCR4 = 0x0000;
 599:Board.c       ****  TIM3->DCR = 0x0000;
 600:Board.c       ****  TIM3->DMAR = 0x0000;
 601:Board.c       **** 
 602:Board.c       ****  TIM3->CR1 = (1 << CEN)    	    	//<Counter enable //
 416              		.loc 1 602 0
 417 0016 8120     		movs	r0, #129
 420:Board.c       **** 		| (0 << UDIS)           		//!<Update disable //
 418              		.loc 1 420 0
 419 0018 0C4B     		ldr	r3, .L41
 420 001a A3F800C0 		strh	ip, [r3]	@ movhi
 429:Board.c       **** 		| (0 << CCUS)           		//<Capture/Compare Control Update Selection //
 421              		.loc 1 429 0
 422 001e 9A80     		strh	r2, [r3, #4]	@ movhi
 442:Board.c       **** 		| (0 << TS)           		//<TS[2:0] bits (Trigger selection) //
 423              		.loc 1 442 0
 424 0020 1A81     		strh	r2, [r3, #8]	@ movhi
 451:Board.c       **** 		| (0 << CC1IE)           		//<Capture/Compare 1 interrupt enable //
 425              		.loc 1 451 0
 426 0022 9A81     		strh	r2, [r3, #12]	@ movhi
 468:Board.c       ****  TIM3->EGR = 0x0000;
 427              		.loc 1 468 0
 428 0024 1A82     		strh	r2, [r3, #16]	@ movhi
 469:Board.c       ****  
 429              		.loc 1 469 0
 430 0026 9A82     		strh	r2, [r3, #20]	@ movhi
 534:Board.c       **** 		| (0 << OC1FE)           	 	//!<Output Compare 1 Fast enable 
 431              		.loc 1 534 0
 432 0028 1F83     		strh	r7, [r3, #24]	@ movhi
 554:Board.c       **** 		| (0 << OC3FE)           	 	//!<Output Compare 3 Fast enable 
 433              		.loc 1 554 0
 434 002a 9A83     		strh	r2, [r3, #28]	@ movhi
 573:Board.c       **** 		| (0 << CC1P)           		//<Capture/Compare 1 output Polarity //
 435              		.loc 1 573 0
 436 002c 1E84     		strh	r6, [r3, #32]	@ movhi
 589:Board.c       ****  
 437              		.loc 1 589 0
 438 002e 9A84     		strh	r2, [r3, #36]	@ movhi
 591:Board.c       ****  
 439              		.loc 1 591 0
 440 0030 1D85     		strh	r5, [r3, #40]	@ movhi
 593:Board.c       ****  
 441              		.loc 1 593 0
 442 0032 9C85     		strh	r4, [r3, #44]	@ movhi
 595:Board.c       ****  TIM3->CCR2 = 5;
 443              		.loc 1 595 0
 444 0034 9986     		strh	r1, [r3, #52]	@ movhi
 603:Board.c       **** 		| (0 << UDIS)           		//<Update disable //
 604:Board.c       **** 		| (0 << URS)          		//<Update request source //
 605:Board.c       **** 		| (0 << OPM)          		//<One pulse mode //
 606:Board.c       **** 		| (0 << DIR)          		//<Direction //
 607:Board.c       **** 		| (0 << CMS)          		//<CMS[1:0] bits (Center-aligned mode selection) //
 608:Board.c       **** 		| (1 << ARPE)          		//<Auto-reload preload enable //
 609:Board.c       **** 		| (0 << CKD);          		//<CKD[1:0] bits (clock division) //
 610:Board.c       **** 
 611:Board.c       **** }
 445              		.loc 1 611 0
 446 0036 F0BC     		pop	{r4, r5, r6, r7}
 447              		.cfi_restore 7
 448              		.cfi_restore 6
 449              		.cfi_restore 5
 450              		.cfi_restore 4
 451              		.cfi_def_cfa_offset 0
 596:Board.c       ****  TIM3->CCR3 = 0x0000;
 452              		.loc 1 596 0
 453 0038 1987     		strh	r1, [r3, #56]	@ movhi
 597:Board.c       ****  TIM3->CCR4 = 0x0000;
 454              		.loc 1 597 0
 455 003a 9A87     		strh	r2, [r3, #60]	@ movhi
 598:Board.c       ****  TIM3->DCR = 0x0000;
 456              		.loc 1 598 0
 457 003c A3F84020 		strh	r2, [r3, #64]	@ movhi
 599:Board.c       ****  TIM3->DMAR = 0x0000;
 458              		.loc 1 599 0
 459 0040 A3F84820 		strh	r2, [r3, #72]	@ movhi
 600:Board.c       **** 
 460              		.loc 1 600 0
 461 0044 A3F84C20 		strh	r2, [r3, #76]	@ movhi
 602:Board.c       **** 		| (0 << UDIS)           		//<Update disable //
 462              		.loc 1 602 0
 463 0048 1880     		strh	r0, [r3]	@ movhi
 464              		.loc 1 611 0
 465 004a 7047     		bx	lr
 466              	.L42:
 467              		.align	2
 468              	.L41:
 469 004c 00040040 		.word	1073742848
 470              		.cfi_endproc
 471              	.LFE34:
 473              		.section	.text.TIM4_Init,"ax",%progbits
 474              		.align	1
 475              		.p2align 2,,3
 476              		.global	TIM4_Init
 477              		.syntax unified
 478              		.thumb
 479              		.thumb_func
 480              		.fpu softvfp
 482              	TIM4_Init:
 483              	.LFB35:
 612:Board.c       **** 
 613:Board.c       **** void	TIM4_Init(void)
 614:Board.c       **** {
 484              		.loc 1 614 0
 485              		.cfi_startproc
 486              		@ args = 0, pretend = 0, frame = 0
 487              		@ frame_needed = 0, uses_anonymous_args = 0
 488              		@ link register save eliminated.
 489 0000 F0B4     		push	{r4, r5, r6, r7}
 490              		.cfi_def_cfa_offset 16
 491              		.cfi_offset 4, -16
 492              		.cfi_offset 5, -12
 493              		.cfi_offset 6, -8
 494              		.cfi_offset 7, -4
 615:Board.c       ****  // Disable counter first
 616:Board.c       ****  TIM4->CR1 = (0 << CEN)    	    	//!<Counter enable //
 617:Board.c       **** 		| (0 << UDIS)           		//!<Update disable //
 618:Board.c       **** 		| (0 << URS)          		//!<Update request source //
 619:Board.c       **** 		| (0 << OPM)          		//!<One pulse mode //
 620:Board.c       **** 		| (0 << DIR)          		//!<Direction. 0: Up, 1: Down
 621:Board.c       **** 		| (0 << CMS)          		//!<CMS[1:0] bits (Center-aligned mode selection) //
 622:Board.c       **** 		| (1 << ARPE)          		//!<Auto-reload preload enable //
 623:Board.c       **** 		| (0 << CKD);          		//!<CKD[1:0] bits (clock division for filtering) 0 = 1/1, 1 = 1/2, 2 = 1
 624:Board.c       **** 
 625:Board.c       ****  TIM4->CR2 = (0 << CCPC)           	//!<Capture/Compare Preloaded Control //
 495              		.loc 1 625 0
 496 0002 0022     		movs	r2, #0
 626:Board.c       **** 		| (0 << CCUS)           		//!<Capture/Compare Control Update Selection //
 627:Board.c       **** 		| (0 << CCDS)           		//!<Capture/Compare DMA Selection //
 628:Board.c       **** 		| (0 << MMS)           		//!<MMS[2:0] bits (Master Mode Selection) //
 629:Board.c       **** 		| (0 << TI1S)           		//!<TI1 Selection //
 630:Board.c       **** 		| (0 << OIS1)           		//!<Output Idle state 1 (OC1 output) //
 631:Board.c       **** 		| (0 << OIS1N)           		//!<Output Idle state 1 (OC1N output) //
 632:Board.c       **** 		| (0 << OIS2)           		//!<Output Idle state 2 (OC2 output) //
 633:Board.c       **** 		| (0 << OIS2N)           		//!<Output Idle state 2 (OC2N output) //
 634:Board.c       **** 		| (0 << OIS3)           		//!<Output Idle state 3 (OC3 output) //
 635:Board.c       **** 		| (0 << OIS3N)           		//!<Output Idle state 3 (OC3N output) //
 636:Board.c       **** 		| (0 << OIS4);           		//!<Output Idle state 4 (OC4 output) //
 637:Board.c       **** 
 638:Board.c       ****  TIM4->SMCR = (0 << SMS)           	//!<SMS[2:0] bits (Slave mode selection) //
 639:Board.c       **** 		| (0 << TS)           		//!<TS[2:0] bits (Trigger selection) //
 640:Board.c       **** 		| (0 << MSM)           		//!<Master/slave mode //
 641:Board.c       **** 		| (0 << ETF)           		//!<ETF[3:0] bits (External trigger filter) //
 642:Board.c       **** 		| (0 << ETPS)           		//!<ETPS[1:0] bits (External trigger prescaler) //
 643:Board.c       **** 		| (0 << ECE)           		//!<External clock enable //
 644:Board.c       **** 		| (0 << ETP);           		//!<External trigger polarity //
 645:Board.c       **** 
 646:Board.c       ****  
 647:Board.c       ****  TIM4->SR = 0x0000;
 648:Board.c       ****  TIM4->EGR = 0x0000;
 649:Board.c       ****  
 650:Board.c       **** //----------------------------------------------------------------------------
 651:Board.c       **** // TIMx capture/compare usage (x = 2 ~ 5, n = 1 ~ 4)
 652:Board.c       **** //
 653:Board.c       **** //	CCnS[1:0] :
 654:Board.c       **** //		00: CCn channel is configured as output.
 655:Board.c       **** //		01: CCn channel is configured as input, ICn is mapped on TI1.
 656:Board.c       **** //		10: CCn channel is configured as input, ICn is mapped on TI2.
 657:Board.c       **** //		11: CCn channel is configured as input, ICn is mapped on TRC. This mode is working only
 658:Board.c       **** //			if an internal trigger input is selected through TS bit (TIMx_SMCR register)
 659:Board.c       **** //		Note: 	CCnS bits are writable only when the channel is OFF (CCnE = 0 in TIMx_CCER).
 660:Board.c       **** //				Output compare mode
 661:Board.c       **** //
 662:Board.c       **** //	OCnM[2:0] :
 663:Board.c       **** //		000: Frozen
 664:Board.c       **** //		001: Set channel n to active level on match. 
 665:Board.c       **** //		010: Set channel n to inactive level on match. 
 666:Board.c       **** //		011: Toggle - OCnREF toggles when TIMx_CNT=TIMx_CCRn.
 667:Board.c       **** //		100: Force inactive level - OCnREF is forced low.
 668:Board.c       **** //		101: Force active level - OCnREF is forced high.
 669:Board.c       **** //		110: PWM mode 1 - In upcounting, channel n is active as long as TIMx_CNT<TIMx_CCRn
 670:Board.c       **** //			else inactive. In downcounting, channel 1 is inactive (OCnREF=0) as long as
 671:Board.c       **** //			TIMx_CNT>TIMx_CCRn else active (OCnREF=1).
 672:Board.c       **** //		111: PWM mode 2 - In upcounting, channel n is inactive as long as
 673:Board.c       **** //			TIMx_CNT<TIMx_CCRn else active. In downcounting, channel n is active as long as
 674:Board.c       **** //			TIMx_CNT>TIMx_CCRn else inactive.
 675:Board.c       **** //		Note: 1: These bits can not be modified as long as LOCK level 3 has been programmed
 676:Board.c       **** //				(LOCK bits in TIMx_BDTR register) and CC1S=00 (the channel is configured in output).
 677:Board.c       **** //			  2: In PWM mode 1 or 2, the OCREF level changes only when the result of the
 678:Board.c       **** //				comparison changes or when the output compare mode switches from "frozen" mode
 679:Board.c       **** //				to "PWM" mode.
 680:Board.c       **** //		
 681:Board.c       **** //	ICnPSC[1:0] :
 682:Board.c       **** //			This bit-field defines the ratio of the prescaler acting on CCn input (ICn).
 683:Board.c       **** //			The prescaler is reset as soon as CC1E= 0 (TIMx_CCER register).
 684:Board.c       **** //		00: no prescaler, capture is done each time an edge is detected on the capture input.
 685:Board.c       **** //		01: capture is done once every 2 events.
 686:Board.c       **** //		10: capture is done once every 4 events.
 687:Board.c       **** //		11: capture is done once every 8 events.
 688:Board.c       **** //		
 689:Board.c       **** //	ICnF[3:0] :
 690:Board.c       **** //			This bit-field defines the frequency used to sample TIn input and the length of the digital
 691:Board.c       **** //			filter applied to TIn. The digital filter is made of an event counter in which N events are
 692:Board.c       **** //			needed to validate a transition on the output:
 693:Board.c       **** //		0000: No filter, sampling is done at fDTS.
 694:Board.c       **** //		0001: fSAMPLING=fCK_INT, N=2.
 695:Board.c       **** //		0010: fSAMPLING=fCK_INT, N=4.
 696:Board.c       **** //		0011: fSAMPLING=fCK_INT, N=8.
 697:Board.c       **** //		0100: fSAMPLING=fDTS/2, N=6.
 698:Board.c       **** //		0101: fSAMPLING=fDTS/2, N=8.
 699:Board.c       **** //		0110: fSAMPLING=fDTS/4, N=6.
 700:Board.c       **** //		0111: fSAMPLING=fDTS/4, N=8.
 701:Board.c       **** //		1000: fSAMPLING=fDTS/8, N=6.
 702:Board.c       **** //		1001: fSAMPLING=fDTS/8, N=8.
 703:Board.c       **** //		1010: fSAMPLING=fDTS/16, N=5.
 704:Board.c       **** //		1011: fSAMPLING=fDTS/16, N=6.
 705:Board.c       **** //		1100: fSAMPLING=fDTS/16, N=8.
 706:Board.c       **** //		1101: fSAMPLING=fDTS/32, N=5.
 707:Board.c       **** //		1110: fSAMPLING=fDTS/32, N=6.
 708:Board.c       **** //		1111: fSAMPLING=fDTS/32, N=8.
 709:Board.c       **** //				Note: 	In current silicon revision, fDTS is replaced in the formula by CK_INT 
 710:Board.c       **** //						when ICnF[3:0]= 1, 2 or 3.
 711:Board.c       **** //		
 712:Board.c       **** // Output compare mode
 713:Board.c       **** // CH3 for VGEN generation
 714:Board.c       **** // -- Set OC3 to output mode (CC3S[1:0] = 00)
 715:Board.c       **** // -- Set output to PWM mode 1 (OC3M[2:0] = 110)
 716:Board.c       **** // -- Set OC4 to output mode (CC4S[1:0] = 00)
 717:Board.c       **** // -- Set output to PWM mode 1 (OC4M[2:0] = 110)
 718:Board.c       **** 
 719:Board.c       ****  TIM4->CCMR1 = (0 << CC1S)          	//!<CC1S[1:0] bits (Capture/Compare 1 Selection) 
 720:Board.c       **** 		| (0 << OC1FE)           	 	//!<Output Compare 1 Fast enable 
 721:Board.c       **** 		| (0 << OC1PE)           		//!<Output Compare 1 Preload enable 
 722:Board.c       **** 		| (0 << OC1M)           	//!<OC1M[2:0] bits (Output Compare 1 Mode) 
 723:Board.c       **** 		| (0 << OC1CE)           		//!<Output Compare 1Clear Enable 
 724:Board.c       **** 		| (0 << CC2S)           		//!<CC2S[1:0] bits (Capture/Compare 2 Selection) 
 725:Board.c       **** 		| (0 << OC2FE)           		//!<Output Compare 2 Fast enable 
 726:Board.c       **** 		| (0 << OC2PE)           		//!<Output Compare 2 Preload enable 
 727:Board.c       **** 		| (0 << OC2M)           		//!<OC2M[2:0] bits (Output Compare 2 Mode) 
 728:Board.c       **** 		| (0 << OC2CE);           	//!<Output Compare 2 Clear Enable 
 729:Board.c       **** 
 730:Board.c       **** // Input capture mode
 731:Board.c       **** /*
 732:Board.c       ****  TIM4->CCMR1 = (0 << CC1S)          	//!<CC1S[1:0] bits (Capture/Compare 1 Selection) 
 733:Board.c       **** 		| (0 << IC1PSC)           	//!<IC1PSC[1:0] bits (Input Capture 1 Prescaler) 
 734:Board.c       **** 		| (0 << IC1F)           	 	//!<IC1F[3:0] bits (Input Capture 1 Filter) 
 735:Board.c       **** 		| (0 << CC2S)           		//!<CC2S[1:0] bits (Capture/Compare 2 Selection) 
 736:Board.c       **** 		| (0 << IC2PSC)           	//!<IC2PSC[1:0] bits (Input Capture 2 Prescaler) 
 737:Board.c       **** 		| (0 << IC2F);           	 	//!<IC2F[3:0] bits (Input Capture 2 Filter) 
 738:Board.c       **** */
 739:Board.c       **** 
 740:Board.c       **** // Output compare mode
 741:Board.c       ****  TIM4->CCMR2 = (0 << CC3S)          	//!<CC3S[1:0] bits (Capture/Compare 3 Selection) 
 497              		.loc 1 741 0
 498 0004 46F26007 		movw	r7, #24672
 742:Board.c       **** 		| (0 << OC3FE)           	 	//!<Output Compare 3 Fast enable 
 743:Board.c       **** 		| (0 << OC3PE)           		//!<Output Compare 3 Preload enable 
 744:Board.c       **** 		| (0x06 << OC3M)           	//!<OC3M[2:0] bits (Output Compare 3 Mode) 
 745:Board.c       **** 		| (0 << OC3CE)           		//!<Output Compare 3Clear Enable 
 746:Board.c       **** 		| (0 << CC4S)           		//!<CC4S[1:0] bits (Capture/Compare 4 Selection) 
 747:Board.c       **** 		| (0 << OC4FE)           		//!<Output Compare 4 Fast enable 
 748:Board.c       **** 		| (0 << OC4PE)           		//!<Output Compare 4 Preload enable 
 749:Board.c       **** 		| (0x06 << OC4M)           		//!<OC4M[2:0] bits (Output Compare 4 Mode) 
 750:Board.c       **** 		| (0 << OC4CE);           	//!<Output Compare 4 Clear Enable 
 751:Board.c       **** 
 752:Board.c       **** // Input capture mode
 753:Board.c       **** /*
 754:Board.c       ****  TIM4->CCMR2 = (0 << CC3S)          	//!<CC3S[1:0] bits (Capture/Compare 3 Selection) 
 755:Board.c       **** 		| (0 << IC3PSC)           	//!<IC3PSC[1:0] bits (Input Capture 3 Prescaler) 
 756:Board.c       **** 		| (0 << IC3F)           	 	//!<IC3F[3:0] bits (Input Capture 3 Filter) 
 757:Board.c       **** 		| (0 << CC4S)           		//!<CC4S[1:0] bits (Capture/Compare 4 Selection) 
 758:Board.c       **** 		| (0 << IC4PSC)           	//!<IC4PSC[1:0] bits (Input Capture 4 Prescaler) 
 759:Board.c       **** 		| (0 << IC4F);           	 	//!<IC4F[3:0] bits (Input Capture 4 Filter) 
 760:Board.c       **** */
 761:Board.c       **** 
 762:Board.c       ****  TIM4->CCER = (0 << CC1E)           	//!<Capture/Compare 1 output enable //
 499              		.loc 1 762 0
 500 0008 4FF48856 		mov	r6, #4352
 763:Board.c       **** 		| (0 << CC1P)           		//!<Capture/Compare 1 output Polarity //
 764:Board.c       **** 		| (0 << CC1NE)           		//!<Capture/Compare 1 Complementary output enable //
 765:Board.c       **** 		| (0 << CC1NP)           		//!<Capture/Compare 1 Complementary output Polarity //
 766:Board.c       **** 		| (0 << CC2E)           		//!<Capture/Compare 2 output enable //
 767:Board.c       **** 		| (0 << CC2P)           		//!<Capture/Compare 2 output Polarity //
 768:Board.c       **** 		| (0 << CC2NE)           		//!<Capture/Compare 2 Complementary output enable //
 769:Board.c       **** 		| (0 << CC2NP)           		//!<Capture/Compare 2 Complementary output Polarity //
 770:Board.c       **** 		| (1 << CC3E)           		//!<Capture/Compare 3 output enable //
 771:Board.c       **** 		| (0 << CC3P)           		//!<Capture/Compare 3 output Polarity //
 772:Board.c       **** 		| (0 << CC3NE)           		//!<Capture/Compare 3 Complementary output enable //
 773:Board.c       **** 		| (0 << CC3NP)           		//!<Capture/Compare 3 Complementary output Polarity //
 774:Board.c       **** 		| (1 << CC4E)           		//!<Capture/Compare 4 output enable //
 775:Board.c       **** 		| (0 << CC4P);           		 //!<Capture/Compare 4 output Polarity //
 776:Board.c       **** 
 777:Board.c       ****  
 778:Board.c       ****  TIM4->CNT = 0x0000;
 779:Board.c       ****  
 780:Board.c       ****  TIM4->PSC = 1 - 1;		// Make 1M (36M/36) as basic clock
 781:Board.c       ****  
 782:Board.c       ****  TIM4->ARR = 4096 - 1;	//  1KHz
 501              		.loc 1 782 0
 502 000c 40F6FF75 		movw	r5, #4095
 783:Board.c       ****  
 784:Board.c       ****  TIM4->CCR1 = 0x0000;	// This value must be set to smaller than ARR. Otherwise there is no
 785:Board.c       ****  						//	compare match and no output generated at pin.
 786:Board.c       ****  TIM4->CCR2 = 0x0000;
 787:Board.c       ****  TIM4->CCR3 = 0x800 - 1;
 503              		.loc 1 787 0
 504 0010 40F2FF74 		movw	r4, #2047
 616:Board.c       **** 		| (0 << UDIS)           		//!<Update disable //
 505              		.loc 1 616 0
 506 0014 4FF0800C 		mov	ip, #128
 788:Board.c       ****  TIM4->CCR4 = 0x400 - 1;
 507              		.loc 1 788 0
 508 0018 40F2FF30 		movw	r0, #1023
 789:Board.c       ****  TIM4->DCR = 0x0000;
 790:Board.c       ****  TIM4->DMAR = 0x0000;
 791:Board.c       **** 
 792:Board.c       ****  TIM4->DIER = (0 << UIE)           	//!<Update interrupt enable //
 793:Board.c       **** 		| (0 << CC1IE)           		//!<Capture/Compare 1 interrupt enable //
 794:Board.c       **** 		| (0 << CC2IE)           		//!<Capture/Compare 2 interrupt enable //
 795:Board.c       **** 		| (0 << CC3IE)           		//!<Capture/Compare 3 interrupt enable //
 796:Board.c       **** 		| (0 << CC4IE)           		//!<Capture/Compare 4 interrupt enable //
 797:Board.c       **** 		| (0 << COMIE)           		//!<COM interrupt enable //
 798:Board.c       **** 		| (0 << TIE)           		//!<Trigger interrupt enable //
 799:Board.c       **** 		| (0 << BIE)           		//!<Break interrupt enable //
 800:Board.c       **** 		| (0 << UDE)           		//!<Update DMA request enable //
 801:Board.c       **** 		| (0 << CC1DE)           		//!<Capture/Compare 1 DMA request enable //
 802:Board.c       **** 		| (0 << CC2DE)           		//!<Capture/Compare 2 DMA request enable //
 803:Board.c       **** 		| (0 << CC3DE)           		//!<Capture/Compare 3 DMA request enable //
 804:Board.c       **** 		| (0 << CC4DE)           		//!<Capture/Compare 4 DMA request enable //
 805:Board.c       **** 		| (0 << COMDE)           	//!<COM DMA request enable //
 806:Board.c       **** 		| (0 << TDE);           		//!<Trigger DMA request enable //
 807:Board.c       **** 
 808:Board.c       ****  TIM4->CR1 = (1 << CEN)    	    	//!<Counter enable //
 509              		.loc 1 808 0
 510 001c 8121     		movs	r1, #129
 616:Board.c       **** 		| (0 << UDIS)           		//!<Update disable //
 511              		.loc 1 616 0
 512 001e 0D4B     		ldr	r3, .L45
 513 0020 A3F800C0 		strh	ip, [r3]	@ movhi
 625:Board.c       **** 		| (0 << CCUS)           		//!<Capture/Compare Control Update Selection //
 514              		.loc 1 625 0
 515 0024 9A80     		strh	r2, [r3, #4]	@ movhi
 638:Board.c       **** 		| (0 << TS)           		//!<TS[2:0] bits (Trigger selection) //
 516              		.loc 1 638 0
 517 0026 1A81     		strh	r2, [r3, #8]	@ movhi
 647:Board.c       ****  TIM4->EGR = 0x0000;
 518              		.loc 1 647 0
 519 0028 1A82     		strh	r2, [r3, #16]	@ movhi
 648:Board.c       ****  
 520              		.loc 1 648 0
 521 002a 9A82     		strh	r2, [r3, #20]	@ movhi
 719:Board.c       **** 		| (0 << OC1FE)           	 	//!<Output Compare 1 Fast enable 
 522              		.loc 1 719 0
 523 002c 1A83     		strh	r2, [r3, #24]	@ movhi
 741:Board.c       **** 		| (0 << OC3FE)           	 	//!<Output Compare 3 Fast enable 
 524              		.loc 1 741 0
 525 002e 9F83     		strh	r7, [r3, #28]	@ movhi
 762:Board.c       **** 		| (0 << CC1P)           		//!<Capture/Compare 1 output Polarity //
 526              		.loc 1 762 0
 527 0030 1E84     		strh	r6, [r3, #32]	@ movhi
 778:Board.c       ****  
 528              		.loc 1 778 0
 529 0032 9A84     		strh	r2, [r3, #36]	@ movhi
 780:Board.c       ****  
 530              		.loc 1 780 0
 531 0034 1A85     		strh	r2, [r3, #40]	@ movhi
 782:Board.c       ****  
 532              		.loc 1 782 0
 533 0036 9D85     		strh	r5, [r3, #44]	@ movhi
 784:Board.c       ****  						//	compare match and no output generated at pin.
 534              		.loc 1 784 0
 535 0038 9A86     		strh	r2, [r3, #52]	@ movhi
 786:Board.c       ****  TIM4->CCR3 = 0x800 - 1;
 536              		.loc 1 786 0
 537 003a 1A87     		strh	r2, [r3, #56]	@ movhi
 787:Board.c       ****  TIM4->CCR4 = 0x400 - 1;
 538              		.loc 1 787 0
 539 003c 9C87     		strh	r4, [r3, #60]	@ movhi
 788:Board.c       ****  TIM4->DCR = 0x0000;
 540              		.loc 1 788 0
 541 003e A3F84000 		strh	r0, [r3, #64]	@ movhi
 809:Board.c       **** 		| (0 << UDIS)           		//!<Update disable //
 810:Board.c       **** 		| (0 << URS)          		//!<Update request source //
 811:Board.c       **** 		| (0 << OPM)          		//!<One pulse mode //
 812:Board.c       **** 		| (0 << DIR)          		//!<Direction //
 813:Board.c       **** 		| (0 << CMS)          		//!<CMS[1:0] bits (Center-aligned mode selection) //
 814:Board.c       **** 		| (1 << ARPE)          		//!<Auto-reload preload enable //
 815:Board.c       **** 		| (0 << CKD);          		//!<CKD[1:0] bits (clock division) //
 816:Board.c       **** 
 817:Board.c       **** }
 542              		.loc 1 817 0
 543 0042 F0BC     		pop	{r4, r5, r6, r7}
 544              		.cfi_restore 7
 545              		.cfi_restore 6
 546              		.cfi_restore 5
 547              		.cfi_restore 4
 548              		.cfi_def_cfa_offset 0
 789:Board.c       ****  TIM4->DMAR = 0x0000;
 549              		.loc 1 789 0
 550 0044 A3F84820 		strh	r2, [r3, #72]	@ movhi
 790:Board.c       **** 
 551              		.loc 1 790 0
 552 0048 A3F84C20 		strh	r2, [r3, #76]	@ movhi
 792:Board.c       **** 		| (0 << CC1IE)           		//!<Capture/Compare 1 interrupt enable //
 553              		.loc 1 792 0
 554 004c 9A81     		strh	r2, [r3, #12]	@ movhi
 808:Board.c       **** 		| (0 << UDIS)           		//!<Update disable //
 555              		.loc 1 808 0
 556 004e 1980     		strh	r1, [r3]	@ movhi
 557              		.loc 1 817 0
 558 0050 7047     		bx	lr
 559              	.L46:
 560 0052 00BF     		.align	2
 561              	.L45:
 562 0054 00080040 		.word	1073743872
 563              		.cfi_endproc
 564              	.LFE35:
 566              		.section	.text.SysTick_Init,"ax",%progbits
 567              		.align	1
 568              		.p2align 2,,3
 569              		.global	SysTick_Init
 570              		.syntax unified
 571              		.thumb
 572              		.thumb_func
 573              		.fpu softvfp
 575              	SysTick_Init:
 576              	.LFB36:
 818:Board.c       **** 
 819:Board.c       **** 
 820:Board.c       **** void	SysTick_Init(void)
 821:Board.c       **** {
 577              		.loc 1 821 0
 578              		.cfi_startproc
 579              		@ args = 0, pretend = 0, frame = 0
 580              		@ frame_needed = 0, uses_anonymous_args = 0
 581              		@ link register save eliminated.
 822:Board.c       ****  SysTick->VAL = 0;				// Write this register will clear itself and the settings in 
 582              		.loc 1 822 0
 583 0000 0020     		movs	r0, #0
 823:Board.c       **** 								//	SysTick->CTRL
 824:Board.c       **** 								
 825:Board.c       ****  SysTick->CTRL = (1 << SysTick_ENABLE)         
 584              		.loc 1 825 0
 585 0002 0721     		movs	r1, #7
 822:Board.c       ****  SysTick->VAL = 0;				// Write this register will clear itself and the settings in 
 586              		.loc 1 822 0
 587 0004 024B     		ldr	r3, .L48
 826:Board.c       **** 				| (1 << SysTick_TICKINT)         	// Counting down to 0 pends the SysTick handler 
 827:Board.c       **** 				| (1 << SysTick_CLKSOURCE)   	// Clock source. 0 = HCLK/8; 1 = HCLK
 828:Board.c       **** 				| (0 << SysTick_COUNTFLAG);   	// Count Flag
 829:Board.c       **** 
 830:Board.c       ****  SysTick->LOAD = 72000;
 588              		.loc 1 830 0
 589 0006 034A     		ldr	r2, .L48+4
 822:Board.c       **** 								//	SysTick->CTRL
 590              		.loc 1 822 0
 591 0008 9860     		str	r0, [r3, #8]
 825:Board.c       **** 				| (1 << SysTick_TICKINT)         	// Counting down to 0 pends the SysTick handler 
 592              		.loc 1 825 0
 593 000a 1960     		str	r1, [r3]
 594              		.loc 1 830 0
 595 000c 5A60     		str	r2, [r3, #4]
 831:Board.c       **** 
 832:Board.c       **** // SysTick->CALRB         
 833:Board.c       **** // This register is read-only. When clock source is set to HCLK/8 (CLKSOURCE bit is 0) the 
 834:Board.c       **** //	TENMS value in this register will be used to generate 1ms tick.
 835:Board.c       **** //
 836:Board.c       **** 
 837:Board.c       **** }
 596              		.loc 1 837 0
 597 000e 7047     		bx	lr
 598              	.L49:
 599              		.align	2
 600              	.L48:
 601 0010 10E000E0 		.word	-536813552
 602 0014 40190100 		.word	72000
 603              		.cfi_endproc
 604              	.LFE36:
 606              		.section	.text.ADC2_Init,"ax",%progbits
 607              		.align	1
 608              		.p2align 2,,3
 609              		.global	ADC2_Init
 610              		.syntax unified
 611              		.thumb
 612              		.thumb_func
 613              		.fpu softvfp
 615              	ADC2_Init:
 616              	.LFB37:
 838:Board.c       **** 
 839:Board.c       **** 
 840:Board.c       **** void	ADC2_Init(void)
 841:Board.c       **** {
 617              		.loc 1 841 0
 618              		.cfi_startproc
 619              		@ args = 0, pretend = 0, frame = 0
 620              		@ frame_needed = 0, uses_anonymous_args = 0
 621              		@ link register save eliminated.
 842:Board.c       **** // NOTE: Remember to program ADC clock in RCC->CFGR
 843:Board.c       **** 
 844:Board.c       ****   ADC2->SR = (0 << AWD)                         /*!<Analog watchdog flag */
 622              		.loc 1 844 0
 623 0000 0022     		movs	r2, #0
 845:Board.c       **** 		| (0 << EOC)                              /*!<End of conversion */
 846:Board.c       **** 		| (0 << JEOC)                            /*!<Injected channel end of conversion */
 847:Board.c       **** 		| (0 << JSTRT)                             /*!<Injected channel Start flag */
 848:Board.c       **** 		| (0 << STRT);                             /*!<Regular channel Start flag */
 849:Board.c       ****   	
 850:Board.c       ****   ADC2->CR1 = (0 << AWDCH)            /*!<AWDCH[4:0] bits (Analog watchdog channel select bits) */
 851:Board.c       **** 			| (0 << EOCIE)           /*!<Interrupt enable for EOC */
 852:Board.c       **** 			| (0 << AWDIE)              /*!<AAnalog Watchdog interrupt enable */
 853:Board.c       **** 			| (0 << JEOCIE)          /*!<Interrupt enable for injected channels */
 854:Board.c       **** 			| (0 << SCAN )           /*!<Scan mode */
 855:Board.c       **** 			| (0 << AWDSGL)             /*!<Enable the watchdog on a single channel in scan mode */
 856:Board.c       **** 			| (0 << JAUTO)            /*!<Automatic injected group conversion */
 857:Board.c       **** 			| (0 << DISCEN)            /*!<Discontinuous mode on regular channels */
 858:Board.c       **** 			| (0 << JDISCEN)             /*!<Discontinuous mode on injected channels */
 859:Board.c       **** 			| (0 << DISCNUM )           /*!<DISCNUM[2:0] bits (Discontinuous mode channel count) */
 860:Board.c       **** 			| (0 << DUALMOD)             /*!<DUALMOD[3:0] bits (Dual mode selection) */
 861:Board.c       **** 			| (0 << JAWDEN )            /*!<Analog watchdog enable on injected channels */
 862:Board.c       **** 			| (0 << AWDEN);		/*!<Analog watchdog enable on regular channels */
 863:Board.c       **** 
 864:Board.c       ****   ADC2->CR2 = (0 << ADON)        	//           /*!<A/D Converter ON / OFF */
 865:Board.c       **** 			| (0 << CONT)        	//          /*!<Continuous Conversion */
 866:Board.c       **** 			| (0 << CAL)     		//           /*!<A/D Calibration */
 867:Board.c       **** 			| (0 << RSTCAL)       	//            /*!<Reset Calibration */
 868:Board.c       **** 			| (0 << DMA)     		//            /*!<Direct Memory access mode */
 869:Board.c       **** 								//				0: DMA mode disabled
 870:Board.c       **** 								//				1: DMA mode enabled
 871:Board.c       **** 			| (0 << ALIGN)   		//            /*!<Data Alignment */
 872:Board.c       **** 			| (0 << JEXTSEL)		//           /*!<JEXTSEL[2:0] bits (External event select for injected group) 
 873:Board.c       **** 			| (0 << JEXTTRIG)		//           /*!<External Trigger Conversion mode for injected channels */
 874:Board.c       **** 			| (0 << EXTSEL)		//            /*!<EXTSEL[2:0] bits (External Event Select for regular group) */
 875:Board.c       **** 								//			For ADC2 and ADC2, the assigned triggers are:
 876:Board.c       **** 								//				000: Timer 1 CC1 event
 877:Board.c       **** 								//				001: Timer 1 CC2 event
 878:Board.c       **** 								//				010: Timer 1 CC3 event
 879:Board.c       **** 								//				011: Timer 2 CC2 event
 880:Board.c       **** 								//				100: Timer 3 TRGO event
 881:Board.c       **** 								//				101: Timer 4 CC4 event
 882:Board.c       **** 								//				110: EXTI line11/TIM8_TRGO event (TIM8_TRGO is available only in high-density devices
 883:Board.c       **** 								//				111: SWSTART
 884:Board.c       **** 			| (0 << EXTTRIG)		//              /*!<External Trigger Conversion mode for regular channels */
 885:Board.c       **** 			| (0 << JSWSTART)	//            /*!<Start Conversion of injected channels */
 886:Board.c       **** 			| (0 << SWSTART)		//              /*!<Start Conversion of regular channels */
 887:Board.c       **** 			| (0 << TSVREFE);		//              /*!<Temperature Sensor and VREFINT Enable */
 888:Board.c       **** 
 889:Board.c       ****  // Sample time selection
 890:Board.c       ****  // SMPx[2:0]:
 891:Board.c       ****  //		000: 1.5 cycles
 892:Board.c       ****  //		001: 7.5 cycles
 893:Board.c       ****  //		010: 13.5 cycles
 894:Board.c       ****  //		011: 28.5 cycles
 895:Board.c       ****  //		100: 41.5 cycles
 896:Board.c       ****  //		101: 55.5 cycles
 897:Board.c       ****  //		110: 71.5 cycles
 898:Board.c       ****  //		111: 239.5 cycles
 899:Board.c       ****  ADC2->SMPR1 = (0 << SMP10) 	//           /*!<SMP10[2:0] bits (Channel 10 Sample time selection) */
 900:Board.c       **** 			| (0 << SMP11) 	//            /*!<SMP11[2:0] bits (Channel 11 Sample time selection) */
 901:Board.c       **** 			| (0 << SMP12) 	//              /*!<SMP12[2:0] bits (Channel 12 Sample time selection) */
 902:Board.c       **** 			| (0 << SMP13)	//                 /*!<SMP13[2:0] bits (Channel 13 Sample time selection) */
 903:Board.c       **** 			| (0 << SMP14)	//               /*!<SMP14[2:0] bits (Channel 14 Sample time selection) */
 904:Board.c       **** 			| (0 << SMP15)	//            /*!<SMP15[2:0] bits (Channel 15 Sample time selection) */
 905:Board.c       **** 			| (0 << SMP16) 	//             /*!<SMP16[2:0] bits (Channel 16 Sample time selection) */
 906:Board.c       **** 			| (0 << SMP17); 	//               /*!<SMP17[2:0] bits (Channel 17 Sample time selection) */
 907:Board.c       **** 
 908:Board.c       ****  ADC2->SMPR2 = (0 << SMP0 )  	//        /*!<SMP0[2:0] bits (Channel 0 Sample time selection) */
 909:Board.c       **** 			| (0 << SMP1)   	//            /*!<SMP1[2:0] bits (Channel 1 Sample time selection) */
 910:Board.c       **** 			| (0 << SMP2)   	//              /*!<SMP2[2:0] bits (Channel 2 Sample time selection) */
 911:Board.c       **** 			| (0 << SMP3) 	//             /*!<SMP3[2:0] bits (Channel 3 Sample time selection) */
 912:Board.c       **** 			| (0 << SMP4 )  	//              /*!<SMP4[2:0] bits (Channel 4 Sample time selection) */
 913:Board.c       **** 			| (0 << SMP5)   	//            /*!<SMP5[2:0] bits (Channel 5 Sample time selection) */
 914:Board.c       **** 			| (0 << SMP6)   	//           /*!<SMP6[2:0] bits (Channel 6 Sample time selection) */
 915:Board.c       **** 			| (0 << SMP7)  	//           /*!<SMP7[2:0] bits (Channel 7 Sample time selection) */
 916:Board.c       **** 			| (0 << SMP8)  	//          /*!<SMP8[2:0] bits (Channel 8 Sample time selection) */
 917:Board.c       **** 			| (0 << SMP9);  	//            /*!<SMP9[2:0] bits (Channel 9 Sample time selection) */
 918:Board.c       ****   
 919:Board.c       ****   ADC2->JOFR1 = 0x0000;
 920:Board.c       ****   ADC2->JOFR2 = 0x0000;
 921:Board.c       ****   ADC2->JOFR3 = 0x0000;
 922:Board.c       ****   ADC2->JOFR4 = 0x0000;
 923:Board.c       ****   
 924:Board.c       ****   ADC2->HTR = 0x0FFF;
 624              		.loc 1 924 0
 625 0002 40F6FF70 		movw	r0, #4095
 844:Board.c       **** 		| (0 << EOC)                              /*!<End of conversion */
 626              		.loc 1 844 0
 627 0006 0E4B     		ldr	r3, .L54
 925:Board.c       ****   ADC2->LTR = 0x0000;
 926:Board.c       **** 
 927:Board.c       ****  //	L[3:0]: Regular channel sequence length, i.e. number of channels in the sequence.
 928:Board.c       ****  //		These bits are written by software to define the total number of conversions in the regular
 929:Board.c       ****  //		channel conversion sequence.
 930:Board.c       ****  //			0000: 1 conversion
 931:Board.c       ****  //			0001: 2 conversions
 932:Board.c       ****  //			.....
 933:Board.c       ****  //			1111: 16 conversions 
 934:Board.c       ****  //	SQn[4:0]: The order of conversion in regular sequence
 935:Board.c       ****  //		These bits are written by software with the channel number (0..17) assigned as the n-th conver
 936:Board.c       ****  //		sequence to be converted.
 937:Board.c       ****  //
 938:Board.c       ****  ADC2->SQR1 = (0 << SQ13 )   //            /*!<SQ13[4:0] bits (13th conversion in regular sequence)
 939:Board.c       **** 			| (0 << SQ14)     	//              /*!<SQ14[4:0] bits (14th conversion in regular sequence) */
 940:Board.c       **** 			| (0 << SQ15)    	//                /*!<SQ15[4:0] bits (15th conversion in regular sequence) */
 941:Board.c       **** 			| (0 << SQ16)    	//              /*!<SQ16[4:0] bits (16th conversion in regular sequence) */
 942:Board.c       **** 			| (0 << L );     	//             /*!<L[3:0] bits (Regular channel sequence length) */
 943:Board.c       ****   
 944:Board.c       ****   ADC2->SQR2 = (0 << SQ7)      //               /*!<SQ7[4:0] bits (7th conversion in regular sequen
 945:Board.c       **** 			| (0 << SQ8)       	//              /*!<SQ8[4:0] bits (8th conversion in regular sequence) */
 946:Board.c       **** 			| (0 << SQ9)     	//                /*!<SQ9[4:0] bits (9th conversion in regular sequence) */
 947:Board.c       **** 			| (0 << SQ10)     	//               /*!<SQ10[4:0] bits (10th conversion in regular sequence) */
 948:Board.c       **** 			| (0 << SQ11)      	//               /*!<SQ11[4:0] bits (11th conversion in regular sequence) */
 949:Board.c       **** 			| (0 << SQ12);     	//               /*!<SQ12[4:0] bits (12th conversion in regular sequence) */
 950:Board.c       ****   
 951:Board.c       ****   ADC2->SQR3 = (0 << SQ1)     	//             /*!<SQ1[4:0] bits (1st conversion in regular sequence
 952:Board.c       **** 			| (0 << SQ2)        	//            /*!<SQ2[4:0] bits (2nd conversion in regular sequence) */
 953:Board.c       **** 			| (0 << SQ3)      	//              /*!<SQ3[4:0] bits (3rd conversion in regular sequence) */
 954:Board.c       **** 			| (0 << SQ4)      	//             /*!<SQ4[4:0] bits (4th conversion in regular sequence) */
 955:Board.c       **** 			| (0 << SQ5)      	//              /*!<SQ5[4:0] bits (5th conversion in regular sequence) */
 956:Board.c       **** 			| (0 << SQ6);       	//             /*!<SQ6[4:0] bits (6th conversion in regular sequence) */
 957:Board.c       **** 			
 958:Board.c       ****  //	JL[1:0]: Injected sequence length
 959:Board.c       ****  //		These bits are written by software to define the total number of conversions in the injected
 960:Board.c       ****  //		channel conversion sequence.
 961:Board.c       ****  //			00: 1 conversion
 962:Board.c       ****  //			01: 2 conversions
 963:Board.c       ****  //			10: 3 conversions
 964:Board.c       ****  //			11: 4 conversions
 965:Board.c       ****  //	JSQ4[4:0]: 4th conversion in injected sequence
 966:Board.c       ****  //		These bits are written by software with the channel number (0..17) assigned as the 4th in
 967:Board.c       ****  //		the sequence to be converted.
 968:Board.c       ****  //		Note: Unlike a regular conversion sequence, if JL[1:0] length is less than four, the channels
 969:Board.c       ****  //				are converted in a sequence starting from (4-JL). Example: ADC_JSQR[21:0] = 10
 970:Board.c       ****  //				00011 00011 00111 00010 means that a scan conversion will convert the following
 971:Board.c       ****  //				channel sequence: 7, 3, 3. (not 2, 7, 3) 
 972:Board.c       ****  //
 973:Board.c       ****   ADC2->JSQR = (0 << JSQ1)     //            /*!<JSQ1[4:0] bits (1st conversion in injected sequenc
 974:Board.c       **** 			| (0 << JSQ2)       	//             /*!<JSQ2[4:0] bits (2nd conversion in injected sequence) */
 975:Board.c       **** 			| (0 << JSQ3)       	//             /*!<JSQ3[4:0] bits (3rd conversion in injected sequence) */
 976:Board.c       **** 			| (0 << JSQ4)       	//              /*!<JSQ4[4:0] bits (4th conversion in injected sequence) */
 977:Board.c       **** 			| (0 << JL);        	//            /*!<JL[1:0] bits (Injected Sequence length) */
 978:Board.c       **** 
 979:Board.c       ****   // These registers are read-only
 980:Board.c       **** //  ADC2->JDR1;
 981:Board.c       **** //  ADC2->JDR2;
 982:Board.c       **** //  ADC2->JDR3;
 983:Board.c       **** //  ADC2->JDR4;
 984:Board.c       **** //  ADC2->DR;
 985:Board.c       **** 
 986:Board.c       ****  // Do calibration
 987:Board.c       ****  ADC2->CR2 |= (1 << CAL);     		
 988:Board.c       ****  while(!BitTest(ADC2->CR2, (1 << CAL))) {
 628              		.loc 1 988 0
 629 0008 1946     		mov	r1, r3
 844:Board.c       **** 		| (0 << EOC)                              /*!<End of conversion */
 630              		.loc 1 844 0
 631 000a 1A60     		str	r2, [r3]
 850:Board.c       **** 			| (0 << EOCIE)           /*!<Interrupt enable for EOC */
 632              		.loc 1 850 0
 633 000c 5A60     		str	r2, [r3, #4]
 864:Board.c       **** 			| (0 << CONT)        	//          /*!<Continuous Conversion */
 634              		.loc 1 864 0
 635 000e 9A60     		str	r2, [r3, #8]
 899:Board.c       **** 			| (0 << SMP11) 	//            /*!<SMP11[2:0] bits (Channel 11 Sample time selection) */
 636              		.loc 1 899 0
 637 0010 DA60     		str	r2, [r3, #12]
 908:Board.c       **** 			| (0 << SMP1)   	//            /*!<SMP1[2:0] bits (Channel 1 Sample time selection) */
 638              		.loc 1 908 0
 639 0012 1A61     		str	r2, [r3, #16]
 919:Board.c       ****   ADC2->JOFR2 = 0x0000;
 640              		.loc 1 919 0
 641 0014 5A61     		str	r2, [r3, #20]
 920:Board.c       ****   ADC2->JOFR3 = 0x0000;
 642              		.loc 1 920 0
 643 0016 9A61     		str	r2, [r3, #24]
 921:Board.c       ****   ADC2->JOFR4 = 0x0000;
 644              		.loc 1 921 0
 645 0018 DA61     		str	r2, [r3, #28]
 922:Board.c       ****   
 646              		.loc 1 922 0
 647 001a 1A62     		str	r2, [r3, #32]
 924:Board.c       ****   ADC2->LTR = 0x0000;
 648              		.loc 1 924 0
 649 001c 5862     		str	r0, [r3, #36]
 925:Board.c       **** 
 650              		.loc 1 925 0
 651 001e 9A62     		str	r2, [r3, #40]
 938:Board.c       **** 			| (0 << SQ14)     	//              /*!<SQ14[4:0] bits (14th conversion in regular sequence) */
 652              		.loc 1 938 0
 653 0020 DA62     		str	r2, [r3, #44]
 944:Board.c       **** 			| (0 << SQ8)       	//              /*!<SQ8[4:0] bits (8th conversion in regular sequence) */
 654              		.loc 1 944 0
 655 0022 1A63     		str	r2, [r3, #48]
 951:Board.c       **** 			| (0 << SQ2)        	//            /*!<SQ2[4:0] bits (2nd conversion in regular sequence) */
 656              		.loc 1 951 0
 657 0024 5A63     		str	r2, [r3, #52]
 973:Board.c       **** 			| (0 << JSQ2)       	//             /*!<JSQ2[4:0] bits (2nd conversion in injected sequence) */
 658              		.loc 1 973 0
 659 0026 9A63     		str	r2, [r3, #56]
 987:Board.c       ****  while(!BitTest(ADC2->CR2, (1 << CAL))) {
 660              		.loc 1 987 0
 661 0028 9A68     		ldr	r2, [r3, #8]
 662 002a 42F00402 		orr	r2, r2, #4
 663 002e 9A60     		str	r2, [r3, #8]
 664              	.L51:
 665              		.loc 1 988 0 discriminator 1
 666 0030 8B68     		ldr	r3, [r1, #8]
 667 0032 5B07     		lsls	r3, r3, #29
 668 0034 FCD5     		bpl	.L51
 989:Board.c       ****  	// Wait for end of  calibration
 990:Board.c       ****  	}
 991:Board.c       ****  
 992:Board.c       ****  // Start ADC (the first ADON set turn on ADC power)
 993:Board.c       ****  ADC2->CR2 |= (1 << ADON);        	//           /*!<A/D Converter ON / OFF */
 669              		.loc 1 993 0
 670 0036 8B68     		ldr	r3, [r1, #8]
 671 0038 43F00103 		orr	r3, r3, #1
 672 003c 8B60     		str	r3, [r1, #8]
 994:Board.c       **** }
 673              		.loc 1 994 0
 674 003e 7047     		bx	lr
 675              	.L55:
 676              		.align	2
 677              	.L54:
 678 0040 00280140 		.word	1073817600
 679              		.cfi_endproc
 680              	.LFE37:
 682              		.section	.text.ADC_Poll,"ax",%progbits
 683              		.align	1
 684              		.p2align 2,,3
 685              		.global	ADC_Poll
 686              		.syntax unified
 687              		.thumb
 688              		.thumb_func
 689              		.fpu softvfp
 691              	ADC_Poll:
 692              	.LFB38:
 995:Board.c       **** 
 996:Board.c       **** 
 997:Board.c       **** U16	ADC_Poll(ADC_TypeDef * adc, U8 chn)
 998:Board.c       **** {
 693              		.loc 1 998 0
 694              		.cfi_startproc
 695              		@ args = 0, pretend = 0, frame = 0
 696              		@ frame_needed = 0, uses_anonymous_args = 0
 697              		@ link register save eliminated.
 698              	.LVL13:
 999:Board.c       ****  // Assuming that the ADC refered has been properly initialized with channel and sample time select
1000:Board.c       ****   adc->SQR3 = (chn << SQ1);     	//             /*!<SQ1[4:0] bits (1st conversion in regular sequen
 699              		.loc 1 1000 0
 700 0000 4163     		str	r1, [r0, #52]
1001:Board.c       ****  
1002:Board.c       ****  // Start conversion
1003:Board.c       ****  adc->CR2 |= (1 << ADON); 
 701              		.loc 1 1003 0
 702 0002 8368     		ldr	r3, [r0, #8]
 703 0004 43F00103 		orr	r3, r3, #1
 704 0008 8360     		str	r3, [r0, #8]
 705              	.L57:
1004:Board.c       ****  while(!BitTest(adc->SR, (1 << EOC))) {
 706              		.loc 1 1004 0 discriminator 1
 707 000a 0368     		ldr	r3, [r0]
 708 000c 9B07     		lsls	r3, r3, #30
 709 000e FCD5     		bpl	.L57
1005:Board.c       ****  	// Wait for end of conversion
1006:Board.c       ****  	}
1007:Board.c       ****  return (adc->DR);
 710              		.loc 1 1007 0
 711 0010 C06C     		ldr	r0, [r0, #76]
 712              	.LVL14:
1008:Board.c       **** }
 713              		.loc 1 1008 0
 714 0012 80B2     		uxth	r0, r0
 715 0014 7047     		bx	lr
 716              		.cfi_endproc
 717              	.LFE38:
 719 0016 00BF     		.section	.text.TFT_Init_Ili9341,"ax",%progbits
 720              		.align	1
 721              		.p2align 2,,3
 722              		.global	TFT_Init_Ili9341
 723              		.syntax unified
 724              		.thumb
 725              		.thumb_func
 726              		.fpu softvfp
 728              	TFT_Init_Ili9341:
 729              	.LFB39:
1009:Board.c       **** 
1010:Board.c       **** void	TFT_Init_Ili9341(void)
1011:Board.c       **** {
 730              		.loc 1 1011 0
 731              		.cfi_startproc
 732              		@ args = 0, pretend = 0, frame = 0
 733              		@ frame_needed = 0, uses_anonymous_args = 0
 734 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 735              		.cfi_def_cfa_offset 24
 736              		.cfi_offset 4, -24
 737              		.cfi_offset 5, -20
 738              		.cfi_offset 6, -16
 739              		.cfi_offset 7, -12
 740              		.cfi_offset 8, -8
 741              		.cfi_offset 14, -4
1012:Board.c       ****  U8  tmp;
1013:Board.c       **** 
1014:Board.c       ****  // Reset TFT controller (Ili9341)
1015:Board.c       ****  SetToHigh(TFT_nRESET_Port, (1 << TFT_nRESET_Bit));
 742              		.loc 1 1015 0
 743 0004 4FF40067 		mov	r7, #2048
1016:Board.c       ****  Delay(5000);	// About 1.1ms
1017:Board.c       ****  SetToLow(TFT_nRESET_Port, (1 << TFT_nRESET_Bit));
1018:Board.c       ****  Delay(65000);	// About 15ms
1019:Board.c       ****  SetToHigh(TFT_nRESET_Port, (1 << TFT_nRESET_Bit));
 744              		.loc 1 1019 0
 745 0008 0A24     		movs	r4, #10
1015:Board.c       ****  Delay(5000);	// About 1.1ms
 746              		.loc 1 1015 0
 747 000a 9B4E     		ldr	r6, .L66
1016:Board.c       ****  Delay(5000);	// About 1.1ms
 748              		.loc 1 1016 0
 749 000c 41F28830 		movw	r0, #5000
 750 0010 9A4D     		ldr	r5, .L66+4
1015:Board.c       ****  Delay(5000);	// About 1.1ms
 751              		.loc 1 1015 0
 752 0012 3761     		str	r7, [r6, #16]
1016:Board.c       ****  Delay(5000);	// About 1.1ms
 753              		.loc 1 1016 0
 754 0014 A847     		blx	r5
 755              	.LVL15:
1017:Board.c       ****  Delay(65000);	// About 15ms
 756              		.loc 1 1017 0
 757 0016 7761     		str	r7, [r6, #20]
1018:Board.c       ****  SetToHigh(TFT_nRESET_Port, (1 << TFT_nRESET_Bit));
 758              		.loc 1 1018 0
 759 0018 4FF6E850 		movw	r0, #65000
 760 001c A847     		blx	r5
 761              	.LVL16:
 762              		.loc 1 1019 0
 763 001e 3761     		str	r7, [r6, #16]
 764              	.LVL17:
 765              	.L61:
1020:Board.c       ****  tmp = 10;
1021:Board.c       ****  while(tmp) {
1022:Board.c       ****  	Delay(65535);
 766              		.loc 1 1022 0
 767 0020 4FF6FF70 		movw	r0, #65535
 768 0024 A847     		blx	r5
 769              	.LVL18:
 770 0026 631E     		subs	r3, r4, #1
1021:Board.c       ****  	Delay(65535);
 771              		.loc 1 1021 0
 772 0028 13F0FF04 		ands	r4, r3, #255
 773              	.LVL19:
 774 002c F8D1     		bne	.L61
 775              	.LVL20:
 776              	.LBB164:
 777              	.LBB165:
1023:Board.c       **** 	tmp--;
1024:Board.c       ****  	}
1025:Board.c       ****  
1026:Board.c       **** 	write_comm(0xcf); 
1027:Board.c       **** 	write_data(0x00);
1028:Board.c       **** 	write_data(0xC1);
1029:Board.c       **** 	write_data(0x30);
1030:Board.c       **** 
1031:Board.c       **** 	write_comm(0xed); 
1032:Board.c       **** 	write_data(0x67);
1033:Board.c       **** 	write_data(0x03);
1034:Board.c       **** 	write_data(0x12);
1035:Board.c       **** 	write_data(0x81);
1036:Board.c       **** 
1037:Board.c       **** 	write_comm(0xcb); 
1038:Board.c       **** 	write_data(0x39);
1039:Board.c       **** 	write_data(0x2c);
1040:Board.c       **** 	write_data(0x00);
1041:Board.c       **** 	write_data(0x34);
1042:Board.c       **** 	write_data(0x02);
1043:Board.c       **** 
1044:Board.c       **** 	write_comm(0xea); 
1045:Board.c       **** 	write_data(0x00);
1046:Board.c       **** 	write_data(0x00);
1047:Board.c       **** 
1048:Board.c       **** 	write_comm(0xe8); 
1049:Board.c       **** 	write_data(0x85);
1050:Board.c       **** 	write_data(0x0a);
1051:Board.c       **** 	write_data(0x78);
1052:Board.c       **** 
1053:Board.c       **** 	write_comm(0xF7); 
1054:Board.c       **** 	write_data(0x20);
1055:Board.c       **** 
1056:Board.c       **** 	write_comm(0xC0); //Power control
1057:Board.c       **** 	write_data(0x26); //VRH[5:0]
1058:Board.c       **** 
1059:Board.c       **** 	write_comm(0xC1); //Power control
1060:Board.c       **** 	write_data(0x01); //SAP[2:0];BT[3:0]
1061:Board.c       **** 
1062:Board.c       **** 	write_comm(0xC5); //VCM control
1063:Board.c       **** 	write_data(0x2b);
1064:Board.c       **** 	write_data(0x2F);
1065:Board.c       **** 
1066:Board.c       **** 	write_comm(0xc7); 
1067:Board.c       **** 	write_data(0xc7);
1068:Board.c       **** 
1069:Board.c       **** 	write_comm(0x3A); 
1070:Board.c       **** 	write_data(0x55);
1071:Board.c       **** 
1072:Board.c       **** 	write_comm(0x36); // Memory Access Control
1073:Board.c       **** //	write_data(0x08);
1074:Board.c       **** 	write_data(0x20);
1075:Board.c       **** 	
1076:Board.c       **** 	write_comm(0xB1); // Frame Rate Control
1077:Board.c       **** 	write_data(0x00);
1078:Board.c       **** 	write_data(0x18);
1079:Board.c       **** 	
1080:Board.c       **** 	write_comm(0xB6); // Display Function Control
1081:Board.c       **** 	write_data(0x0a);
1082:Board.c       **** 	write_data(0xE2);
1083:Board.c       **** 	
1084:Board.c       **** 	write_comm(0xF2); // 3Gamma Function Disable
1085:Board.c       **** 	write_data(0x00);
1086:Board.c       **** 	write_comm(0x26); //Gamma curve selected
1087:Board.c       **** 	write_data(0x01);
1088:Board.c       **** 	write_comm(0xE0); //Set Gamma
1089:Board.c       **** 	write_data(0x0f);
1090:Board.c       **** 	write_data(0x1d);
1091:Board.c       **** 	write_data(0x1a);
1092:Board.c       **** 	write_data(0x09);
1093:Board.c       **** 	write_data(0x0f);
1094:Board.c       **** 	write_data(0x09);
1095:Board.c       **** 	write_data(0x46);
1096:Board.c       **** 	write_data(0x88);
1097:Board.c       **** 	write_data(0x39);
1098:Board.c       **** 	write_data(0x05);
1099:Board.c       **** 	write_data(0x0f);
1100:Board.c       **** 	write_data(0x03);
1101:Board.c       **** 	write_data(0x07);
1102:Board.c       **** 	write_data(0x05);
1103:Board.c       **** 	write_data(0x00);
1104:Board.c       **** 
1105:Board.c       **** 	write_comm(0XE1); //Set Gamma
1106:Board.c       **** 	write_data(0x00);
1107:Board.c       **** 	write_data(0x22);
1108:Board.c       **** 	write_data(0x25);
1109:Board.c       **** 	write_data(0x06);
1110:Board.c       **** 	write_data(0x10);
1111:Board.c       **** 	write_data(0x06);
1112:Board.c       **** 	write_data(0x39);
1113:Board.c       **** 	write_data(0x22);
1114:Board.c       **** 	write_data(0x4a);
1115:Board.c       **** 	write_data(0x0a);
1116:Board.c       **** 	write_data(0x10);
1117:Board.c       **** 	write_data(0x0c);
1118:Board.c       **** 	write_data(0x38);
1119:Board.c       **** 	write_data(0x3a);
1120:Board.c       **** 	write_data(0x0F);
1121:Board.c       **** 
1122:Board.c       **** 	write_comm(0x11); //Exit Sleep
1123:Board.c       **** //	delay(120);
1124:Board.c       **** 	 tmp = 100;
1125:Board.c       **** 	 while(tmp) {
1126:Board.c       **** 	 	Delay(50000);
1127:Board.c       **** 		tmp--;
1128:Board.c       **** 	 	}
1129:Board.c       **** 	write_comm(0x29); //display on	
1130:Board.c       **** //	write_comm(0x2C);	
1131:Board.c       **** 
1132:Board.c       ****  Delay(50000);
1133:Board.c       ****  Delay(50000);
1134:Board.c       ****  
1135:Board.c       **** }
1136:Board.c       **** 
1137:Board.c       **** 
1138:Board.c       **** void	write_comm(U8 commport)
1139:Board.c       **** {
1140:Board.c       ****  // Set TFT_nCS low
1141:Board.c       ****  SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 778              		.loc 1 1141 0
 779 002e 4FF40052 		mov	r2, #8192
1142:Board.c       ****  // Set up to access Index Register (RS == 0)
1143:Board.c       ****  SetToLow(TFT_RS_Port, (1 << TFT_RS_Bit));
 780              		.loc 1 1143 0
 781 0032 4FF48046 		mov	r6, #16384
1144:Board.c       **** // Delay(2);
1145:Board.c       **** 
1146:Board.c       ****  TFT_Port = (TFT_Port & 0xFF00) | commport;
1147:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 782              		.loc 1 1147 0
 783 0036 4FF40041 		mov	r1, #32768
1141:Board.c       ****  // Set up to access Index Register (RS == 0)
 784              		.loc 1 1141 0
 785 003a 914B     		ldr	r3, .L66+8
1146:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 786              		.loc 1 1146 0
 787 003c 8E48     		ldr	r0, .L66
1141:Board.c       ****  // Set up to access Index Register (RS == 0)
 788              		.loc 1 1141 0
 789 003e 5A61     		str	r2, [r3, #20]
1143:Board.c       **** // Delay(2);
 790              		.loc 1 1143 0
 791 0040 5E61     		str	r6, [r3, #20]
1146:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 792              		.loc 1 1146 0
 793 0042 C768     		ldr	r7, [r0, #12]
 794              	.LBE165:
 795              	.LBE164:
 796              	.LBB167:
 797              	.LBB168:
1148:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
1149:Board.c       **** 
1150:Board.c       ****  // Set up to access Data Register (RS == 1)
1151:Board.c       ****  SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
1152:Board.c       **** // Delay(2);
1153:Board.c       **** 
1154:Board.c       ****  // Set TFT_nCS high
1155:Board.c       ****  SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 798              		.loc 1 1155 0
 799 0044 6424     		movs	r4, #100
 800              	.LBE168:
 801              	.LBE167:
 802              	.LBB170:
 803              	.LBB166:
1146:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 804              		.loc 1 1146 0
 805 0046 07F47F47 		and	r7, r7, #65280
 806 004a 47F0CF07 		orr	r7, r7, #207
 807 004e C760     		str	r7, [r0, #12]
1147:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 808              		.loc 1 1147 0
 809 0050 5961     		str	r1, [r3, #20]
1148:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 810              		.loc 1 1148 0
 811 0052 1961     		str	r1, [r3, #16]
1151:Board.c       **** // Delay(2);
 812              		.loc 1 1151 0
 813 0054 1E61     		str	r6, [r3, #16]
 814              		.loc 1 1155 0
 815 0056 1A61     		str	r2, [r3, #16]
 816              	.LVL21:
 817              	.LBE166:
 818              	.LBE170:
 819              	.LBB171:
 820              	.LBB172:
1156:Board.c       ****  
1157:Board.c       **** }
1158:Board.c       **** 
1159:Board.c       **** void write_data(U8 data)
1160:Board.c       **** {
1161:Board.c       ****  // Set TFT_nCS low
1162:Board.c       ****  SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 821              		.loc 1 1162 0
 822 0058 5A61     		str	r2, [r3, #20]
1163:Board.c       **** 
1164:Board.c       ****  // Set up to access Data Register (RS == 1)
1165:Board.c       ****  SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 823              		.loc 1 1165 0
 824 005a 1E61     		str	r6, [r3, #16]
1166:Board.c       **** 
1167:Board.c       ****  TFT_Port = (TFT_Port & 0xFF00) | data;
 825              		.loc 1 1167 0
 826 005c C768     		ldr	r7, [r0, #12]
 827 005e 07F47F47 		and	r7, r7, #65280
 828 0062 C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 829              		.loc 1 1168 0
 830 0064 5961     		str	r1, [r3, #20]
1169:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 831              		.loc 1 1169 0
 832 0066 1961     		str	r1, [r3, #16]
1170:Board.c       **** 
1171:Board.c       ****  // Set TFT_nCS high
1172:Board.c       ****  SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 833              		.loc 1 1172 0
 834 0068 1A61     		str	r2, [r3, #16]
 835              	.LVL22:
 836              	.LBE172:
 837              	.LBE171:
 838              	.LBB173:
 839              	.LBB174:
1162:Board.c       **** 
 840              		.loc 1 1162 0
 841 006a 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 842              		.loc 1 1165 0
 843 006c 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 844              		.loc 1 1167 0
 845 006e C768     		ldr	r7, [r0, #12]
 846 0070 07F47F47 		and	r7, r7, #65280
 847 0074 47F0C107 		orr	r7, r7, #193
 848 0078 C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 849              		.loc 1 1168 0
 850 007a 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 851              		.loc 1 1169 0
 852 007c 1961     		str	r1, [r3, #16]
 853              		.loc 1 1172 0
 854 007e 1A61     		str	r2, [r3, #16]
 855              	.LVL23:
 856              	.LBE174:
 857              	.LBE173:
 858              	.LBB175:
 859              	.LBB176:
1162:Board.c       **** 
 860              		.loc 1 1162 0
 861 0080 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 862              		.loc 1 1165 0
 863 0082 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 864              		.loc 1 1167 0
 865 0084 C768     		ldr	r7, [r0, #12]
 866 0086 07F47F47 		and	r7, r7, #65280
 867 008a 47F03007 		orr	r7, r7, #48
 868 008e C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 869              		.loc 1 1168 0
 870 0090 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 871              		.loc 1 1169 0
 872 0092 1961     		str	r1, [r3, #16]
 873              		.loc 1 1172 0
 874 0094 1A61     		str	r2, [r3, #16]
 875              	.LVL24:
 876              	.LBE176:
 877              	.LBE175:
 878              	.LBB177:
 879              	.LBB178:
1141:Board.c       ****  // Set up to access Index Register (RS == 0)
 880              		.loc 1 1141 0
 881 0096 5A61     		str	r2, [r3, #20]
1143:Board.c       **** // Delay(2);
 882              		.loc 1 1143 0
 883 0098 5E61     		str	r6, [r3, #20]
1146:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 884              		.loc 1 1146 0
 885 009a C768     		ldr	r7, [r0, #12]
 886 009c 07F47F47 		and	r7, r7, #65280
 887 00a0 47F0ED07 		orr	r7, r7, #237
 888 00a4 C760     		str	r7, [r0, #12]
1147:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 889              		.loc 1 1147 0
 890 00a6 5961     		str	r1, [r3, #20]
1148:Board.c       **** 
 891              		.loc 1 1148 0
 892 00a8 1961     		str	r1, [r3, #16]
1151:Board.c       **** // Delay(2);
 893              		.loc 1 1151 0
 894 00aa 1E61     		str	r6, [r3, #16]
1155:Board.c       ****  
 895              		.loc 1 1155 0
 896 00ac 1A61     		str	r2, [r3, #16]
 897              	.LVL25:
 898              	.LBE178:
 899              	.LBE177:
 900              	.LBB179:
 901              	.LBB180:
1162:Board.c       **** 
 902              		.loc 1 1162 0
 903 00ae 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 904              		.loc 1 1165 0
 905 00b0 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 906              		.loc 1 1167 0
 907 00b2 C768     		ldr	r7, [r0, #12]
 908 00b4 07F47F47 		and	r7, r7, #65280
 909 00b8 47F06707 		orr	r7, r7, #103
 910 00bc C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 911              		.loc 1 1168 0
 912 00be 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 913              		.loc 1 1169 0
 914 00c0 1961     		str	r1, [r3, #16]
 915              		.loc 1 1172 0
 916 00c2 1A61     		str	r2, [r3, #16]
 917              	.LVL26:
 918              	.LBE180:
 919              	.LBE179:
 920              	.LBB181:
 921              	.LBB182:
1162:Board.c       **** 
 922              		.loc 1 1162 0
 923 00c4 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 924              		.loc 1 1165 0
 925 00c6 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 926              		.loc 1 1167 0
 927 00c8 C768     		ldr	r7, [r0, #12]
 928 00ca 07F47F47 		and	r7, r7, #65280
 929 00ce 47F00307 		orr	r7, r7, #3
 930 00d2 C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 931              		.loc 1 1168 0
 932 00d4 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 933              		.loc 1 1169 0
 934 00d6 1961     		str	r1, [r3, #16]
 935              		.loc 1 1172 0
 936 00d8 1A61     		str	r2, [r3, #16]
 937              	.LVL27:
 938              	.LBE182:
 939              	.LBE181:
 940              	.LBB183:
 941              	.LBB184:
1162:Board.c       **** 
 942              		.loc 1 1162 0
 943 00da 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 944              		.loc 1 1165 0
 945 00dc 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 946              		.loc 1 1167 0
 947 00de C768     		ldr	r7, [r0, #12]
 948 00e0 07F47F47 		and	r7, r7, #65280
 949 00e4 47F01207 		orr	r7, r7, #18
 950 00e8 C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 951              		.loc 1 1168 0
 952 00ea 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 953              		.loc 1 1169 0
 954 00ec 1961     		str	r1, [r3, #16]
 955              		.loc 1 1172 0
 956 00ee 1A61     		str	r2, [r3, #16]
 957              	.LVL28:
 958              	.LBE184:
 959              	.LBE183:
 960              	.LBB185:
 961              	.LBB186:
1162:Board.c       **** 
 962              		.loc 1 1162 0
 963 00f0 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 964              		.loc 1 1165 0
 965 00f2 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 966              		.loc 1 1167 0
 967 00f4 C768     		ldr	r7, [r0, #12]
 968 00f6 07F47F47 		and	r7, r7, #65280
 969 00fa 47F08107 		orr	r7, r7, #129
 970 00fe C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 971              		.loc 1 1168 0
 972 0100 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 973              		.loc 1 1169 0
 974 0102 1961     		str	r1, [r3, #16]
 975              		.loc 1 1172 0
 976 0104 1A61     		str	r2, [r3, #16]
 977              	.LVL29:
 978              	.LBE186:
 979              	.LBE185:
 980              	.LBB187:
 981              	.LBB188:
1141:Board.c       ****  // Set up to access Index Register (RS == 0)
 982              		.loc 1 1141 0
 983 0106 5A61     		str	r2, [r3, #20]
1143:Board.c       **** // Delay(2);
 984              		.loc 1 1143 0
 985 0108 5E61     		str	r6, [r3, #20]
1146:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 986              		.loc 1 1146 0
 987 010a C768     		ldr	r7, [r0, #12]
 988 010c 07F47F47 		and	r7, r7, #65280
 989 0110 47F0CB07 		orr	r7, r7, #203
 990 0114 C760     		str	r7, [r0, #12]
1147:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 991              		.loc 1 1147 0
 992 0116 5961     		str	r1, [r3, #20]
1148:Board.c       **** 
 993              		.loc 1 1148 0
 994 0118 1961     		str	r1, [r3, #16]
1151:Board.c       **** // Delay(2);
 995              		.loc 1 1151 0
 996 011a 1E61     		str	r6, [r3, #16]
1155:Board.c       ****  
 997              		.loc 1 1155 0
 998 011c 1A61     		str	r2, [r3, #16]
 999              	.LVL30:
 1000              	.LBE188:
 1001              	.LBE187:
 1002              	.LBB189:
 1003              	.LBB190:
1162:Board.c       **** 
 1004              		.loc 1 1162 0
 1005 011e 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 1006              		.loc 1 1165 0
 1007 0120 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1008              		.loc 1 1167 0
 1009 0122 C768     		ldr	r7, [r0, #12]
 1010 0124 07F47F47 		and	r7, r7, #65280
 1011 0128 47F03907 		orr	r7, r7, #57
 1012 012c C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1013              		.loc 1 1168 0
 1014 012e 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 1015              		.loc 1 1169 0
 1016 0130 1961     		str	r1, [r3, #16]
 1017              		.loc 1 1172 0
 1018 0132 1A61     		str	r2, [r3, #16]
 1019              	.LVL31:
 1020              	.LBE190:
 1021              	.LBE189:
 1022              	.LBB191:
 1023              	.LBB192:
1162:Board.c       **** 
 1024              		.loc 1 1162 0
 1025 0134 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 1026              		.loc 1 1165 0
 1027 0136 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1028              		.loc 1 1167 0
 1029 0138 C768     		ldr	r7, [r0, #12]
 1030 013a 07F47F47 		and	r7, r7, #65280
 1031 013e 47F02C07 		orr	r7, r7, #44
 1032 0142 C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1033              		.loc 1 1168 0
 1034 0144 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 1035              		.loc 1 1169 0
 1036 0146 1961     		str	r1, [r3, #16]
 1037              		.loc 1 1172 0
 1038 0148 1A61     		str	r2, [r3, #16]
 1039              	.LVL32:
 1040              	.LBE192:
 1041              	.LBE191:
 1042              	.LBB193:
 1043              	.LBB194:
1162:Board.c       **** 
 1044              		.loc 1 1162 0
 1045 014a 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 1046              		.loc 1 1165 0
 1047 014c 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1048              		.loc 1 1167 0
 1049 014e C768     		ldr	r7, [r0, #12]
 1050 0150 07F47F47 		and	r7, r7, #65280
 1051 0154 C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1052              		.loc 1 1168 0
 1053 0156 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 1054              		.loc 1 1169 0
 1055 0158 1961     		str	r1, [r3, #16]
 1056              		.loc 1 1172 0
 1057 015a 1A61     		str	r2, [r3, #16]
 1058              	.LVL33:
 1059              	.LBE194:
 1060              	.LBE193:
 1061              	.LBB195:
 1062              	.LBB196:
1162:Board.c       **** 
 1063              		.loc 1 1162 0
 1064 015c 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 1065              		.loc 1 1165 0
 1066 015e 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1067              		.loc 1 1167 0
 1068 0160 C768     		ldr	r7, [r0, #12]
 1069 0162 07F47F47 		and	r7, r7, #65280
 1070 0166 47F03407 		orr	r7, r7, #52
 1071 016a C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1072              		.loc 1 1168 0
 1073 016c 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 1074              		.loc 1 1169 0
 1075 016e 1961     		str	r1, [r3, #16]
 1076              		.loc 1 1172 0
 1077 0170 1A61     		str	r2, [r3, #16]
 1078              	.LVL34:
 1079              	.LBE196:
 1080              	.LBE195:
 1081              	.LBB197:
 1082              	.LBB198:
1162:Board.c       **** 
 1083              		.loc 1 1162 0
 1084 0172 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 1085              		.loc 1 1165 0
 1086 0174 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1087              		.loc 1 1167 0
 1088 0176 C768     		ldr	r7, [r0, #12]
 1089 0178 07F47F47 		and	r7, r7, #65280
 1090 017c 47F00207 		orr	r7, r7, #2
 1091 0180 C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1092              		.loc 1 1168 0
 1093 0182 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 1094              		.loc 1 1169 0
 1095 0184 1961     		str	r1, [r3, #16]
 1096              		.loc 1 1172 0
 1097 0186 1A61     		str	r2, [r3, #16]
 1098              	.LVL35:
 1099              	.LBE198:
 1100              	.LBE197:
 1101              	.LBB199:
 1102              	.LBB200:
1141:Board.c       ****  // Set up to access Index Register (RS == 0)
 1103              		.loc 1 1141 0
 1104 0188 5A61     		str	r2, [r3, #20]
1143:Board.c       **** // Delay(2);
 1105              		.loc 1 1143 0
 1106 018a 5E61     		str	r6, [r3, #20]
1146:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1107              		.loc 1 1146 0
 1108 018c C768     		ldr	r7, [r0, #12]
 1109 018e 07F47F47 		and	r7, r7, #65280
 1110 0192 47F0EA07 		orr	r7, r7, #234
 1111 0196 C760     		str	r7, [r0, #12]
1147:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1112              		.loc 1 1147 0
 1113 0198 5961     		str	r1, [r3, #20]
1148:Board.c       **** 
 1114              		.loc 1 1148 0
 1115 019a 1961     		str	r1, [r3, #16]
1151:Board.c       **** // Delay(2);
 1116              		.loc 1 1151 0
 1117 019c 1E61     		str	r6, [r3, #16]
1155:Board.c       ****  
 1118              		.loc 1 1155 0
 1119 019e 1A61     		str	r2, [r3, #16]
 1120              	.LVL36:
 1121              	.LBE200:
 1122              	.LBE199:
 1123              	.LBB201:
 1124              	.LBB202:
1162:Board.c       **** 
 1125              		.loc 1 1162 0
 1126 01a0 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 1127              		.loc 1 1165 0
 1128 01a2 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1129              		.loc 1 1167 0
 1130 01a4 C768     		ldr	r7, [r0, #12]
 1131 01a6 07F47F47 		and	r7, r7, #65280
 1132 01aa C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1133              		.loc 1 1168 0
 1134 01ac 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 1135              		.loc 1 1169 0
 1136 01ae 1961     		str	r1, [r3, #16]
 1137              		.loc 1 1172 0
 1138 01b0 1A61     		str	r2, [r3, #16]
 1139              	.LVL37:
 1140              	.LBE202:
 1141              	.LBE201:
 1142              	.LBB203:
 1143              	.LBB204:
1162:Board.c       **** 
 1144              		.loc 1 1162 0
 1145 01b2 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 1146              		.loc 1 1165 0
 1147 01b4 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1148              		.loc 1 1167 0
 1149 01b6 C768     		ldr	r7, [r0, #12]
 1150 01b8 07F47F47 		and	r7, r7, #65280
 1151 01bc C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1152              		.loc 1 1168 0
 1153 01be 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 1154              		.loc 1 1169 0
 1155 01c0 1961     		str	r1, [r3, #16]
 1156              		.loc 1 1172 0
 1157 01c2 1A61     		str	r2, [r3, #16]
 1158              	.LVL38:
 1159              	.LBE204:
 1160              	.LBE203:
 1161              	.LBB205:
 1162              	.LBB206:
1141:Board.c       ****  // Set up to access Index Register (RS == 0)
 1163              		.loc 1 1141 0
 1164 01c4 5A61     		str	r2, [r3, #20]
1143:Board.c       **** // Delay(2);
 1165              		.loc 1 1143 0
 1166 01c6 5E61     		str	r6, [r3, #20]
1146:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1167              		.loc 1 1146 0
 1168 01c8 C768     		ldr	r7, [r0, #12]
 1169 01ca 07F47F47 		and	r7, r7, #65280
 1170 01ce 47F0E807 		orr	r7, r7, #232
 1171 01d2 C760     		str	r7, [r0, #12]
1147:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1172              		.loc 1 1147 0
 1173 01d4 5961     		str	r1, [r3, #20]
1148:Board.c       **** 
 1174              		.loc 1 1148 0
 1175 01d6 1961     		str	r1, [r3, #16]
1151:Board.c       **** // Delay(2);
 1176              		.loc 1 1151 0
 1177 01d8 1E61     		str	r6, [r3, #16]
1155:Board.c       ****  
 1178              		.loc 1 1155 0
 1179 01da 1A61     		str	r2, [r3, #16]
 1180              	.LVL39:
 1181              	.LBE206:
 1182              	.LBE205:
 1183              	.LBB207:
 1184              	.LBB208:
1162:Board.c       **** 
 1185              		.loc 1 1162 0
 1186 01dc 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 1187              		.loc 1 1165 0
 1188 01de 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1189              		.loc 1 1167 0
 1190 01e0 C768     		ldr	r7, [r0, #12]
 1191 01e2 07F47F47 		and	r7, r7, #65280
 1192 01e6 47F08507 		orr	r7, r7, #133
 1193 01ea C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1194              		.loc 1 1168 0
 1195 01ec 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 1196              		.loc 1 1169 0
 1197 01ee 1961     		str	r1, [r3, #16]
 1198              		.loc 1 1172 0
 1199 01f0 1A61     		str	r2, [r3, #16]
 1200              	.LVL40:
 1201              	.LBE208:
 1202              	.LBE207:
 1203              	.LBB209:
 1204              	.LBB210:
1162:Board.c       **** 
 1205              		.loc 1 1162 0
 1206 01f2 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 1207              		.loc 1 1165 0
 1208 01f4 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1209              		.loc 1 1167 0
 1210 01f6 C768     		ldr	r7, [r0, #12]
 1211 01f8 07F47F47 		and	r7, r7, #65280
 1212 01fc 47F00A07 		orr	r7, r7, #10
 1213 0200 C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1214              		.loc 1 1168 0
 1215 0202 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 1216              		.loc 1 1169 0
 1217 0204 1961     		str	r1, [r3, #16]
 1218              		.loc 1 1172 0
 1219 0206 1A61     		str	r2, [r3, #16]
 1220              	.LVL41:
 1221              	.LBE210:
 1222              	.LBE209:
 1223              	.LBB211:
 1224              	.LBB212:
1162:Board.c       **** 
 1225              		.loc 1 1162 0
 1226 0208 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 1227              		.loc 1 1165 0
 1228 020a 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1229              		.loc 1 1167 0
 1230 020c C768     		ldr	r7, [r0, #12]
 1231 020e 07F47F47 		and	r7, r7, #65280
 1232 0212 47F07807 		orr	r7, r7, #120
 1233 0216 C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1234              		.loc 1 1168 0
 1235 0218 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 1236              		.loc 1 1169 0
 1237 021a 1961     		str	r1, [r3, #16]
 1238              		.loc 1 1172 0
 1239 021c 1A61     		str	r2, [r3, #16]
 1240              	.LVL42:
 1241              	.LBE212:
 1242              	.LBE211:
 1243              	.LBB213:
 1244              	.LBB214:
1141:Board.c       ****  // Set up to access Index Register (RS == 0)
 1245              		.loc 1 1141 0
 1246 021e 5A61     		str	r2, [r3, #20]
1143:Board.c       **** // Delay(2);
 1247              		.loc 1 1143 0
 1248 0220 5E61     		str	r6, [r3, #20]
1146:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1249              		.loc 1 1146 0
 1250 0222 C768     		ldr	r7, [r0, #12]
 1251 0224 07F47F47 		and	r7, r7, #65280
 1252 0228 47F0F707 		orr	r7, r7, #247
 1253 022c C760     		str	r7, [r0, #12]
1147:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1254              		.loc 1 1147 0
 1255 022e 5961     		str	r1, [r3, #20]
1148:Board.c       **** 
 1256              		.loc 1 1148 0
 1257 0230 1961     		str	r1, [r3, #16]
1151:Board.c       **** // Delay(2);
 1258              		.loc 1 1151 0
 1259 0232 1E61     		str	r6, [r3, #16]
1155:Board.c       ****  
 1260              		.loc 1 1155 0
 1261 0234 1A61     		str	r2, [r3, #16]
 1262              	.LVL43:
 1263              	.LBE214:
 1264              	.LBE213:
 1265              	.LBB215:
 1266              	.LBB216:
1162:Board.c       **** 
 1267              		.loc 1 1162 0
 1268 0236 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 1269              		.loc 1 1165 0
 1270 0238 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1271              		.loc 1 1167 0
 1272 023a C768     		ldr	r7, [r0, #12]
 1273 023c 07F47F47 		and	r7, r7, #65280
 1274 0240 47F02007 		orr	r7, r7, #32
 1275 0244 C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1276              		.loc 1 1168 0
 1277 0246 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 1278              		.loc 1 1169 0
 1279 0248 1961     		str	r1, [r3, #16]
 1280              		.loc 1 1172 0
 1281 024a 1A61     		str	r2, [r3, #16]
 1282              	.LVL44:
 1283              	.LBE216:
 1284              	.LBE215:
 1285              	.LBB217:
 1286              	.LBB218:
1141:Board.c       ****  // Set up to access Index Register (RS == 0)
 1287              		.loc 1 1141 0
 1288 024c 5A61     		str	r2, [r3, #20]
1143:Board.c       **** // Delay(2);
 1289              		.loc 1 1143 0
 1290 024e 5E61     		str	r6, [r3, #20]
1146:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1291              		.loc 1 1146 0
 1292 0250 C768     		ldr	r7, [r0, #12]
 1293 0252 07F47F47 		and	r7, r7, #65280
 1294 0256 47F0C007 		orr	r7, r7, #192
 1295 025a C760     		str	r7, [r0, #12]
1147:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1296              		.loc 1 1147 0
 1297 025c 5961     		str	r1, [r3, #20]
1148:Board.c       **** 
 1298              		.loc 1 1148 0
 1299 025e 1961     		str	r1, [r3, #16]
1151:Board.c       **** // Delay(2);
 1300              		.loc 1 1151 0
 1301 0260 1E61     		str	r6, [r3, #16]
1155:Board.c       ****  
 1302              		.loc 1 1155 0
 1303 0262 1A61     		str	r2, [r3, #16]
 1304              	.LVL45:
 1305              	.LBE218:
 1306              	.LBE217:
 1307              	.LBB219:
 1308              	.LBB220:
1162:Board.c       **** 
 1309              		.loc 1 1162 0
 1310 0264 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 1311              		.loc 1 1165 0
 1312 0266 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1313              		.loc 1 1167 0
 1314 0268 C768     		ldr	r7, [r0, #12]
 1315 026a 07F47F47 		and	r7, r7, #65280
 1316 026e 47F02607 		orr	r7, r7, #38
 1317 0272 C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1318              		.loc 1 1168 0
 1319 0274 5961     		str	r1, [r3, #20]
 1320 0276 05E0     		b	.L67
 1321              	.L68:
 1322              		.align	2
 1323              	.L66:
 1324 0278 000C0140 		.word	1073810432
 1325 027c 00000000 		.word	Delay
 1326 0280 00100140 		.word	1073811456
 1327              	.L67:
1169:Board.c       **** 
 1328              		.loc 1 1169 0
 1329 0284 1961     		str	r1, [r3, #16]
 1330              		.loc 1 1172 0
 1331 0286 1A61     		str	r2, [r3, #16]
 1332              	.LVL46:
 1333              	.LBE220:
 1334              	.LBE219:
 1335              	.LBB221:
 1336              	.LBB222:
1141:Board.c       ****  // Set up to access Index Register (RS == 0)
 1337              		.loc 1 1141 0
 1338 0288 5A61     		str	r2, [r3, #20]
1143:Board.c       **** // Delay(2);
 1339              		.loc 1 1143 0
 1340 028a 5E61     		str	r6, [r3, #20]
1146:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1341              		.loc 1 1146 0
 1342 028c C768     		ldr	r7, [r0, #12]
 1343 028e 07F47F47 		and	r7, r7, #65280
 1344 0292 47F0C107 		orr	r7, r7, #193
 1345 0296 C760     		str	r7, [r0, #12]
1147:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1346              		.loc 1 1147 0
 1347 0298 5961     		str	r1, [r3, #20]
1148:Board.c       **** 
 1348              		.loc 1 1148 0
 1349 029a 1961     		str	r1, [r3, #16]
1151:Board.c       **** // Delay(2);
 1350              		.loc 1 1151 0
 1351 029c 1E61     		str	r6, [r3, #16]
1155:Board.c       ****  
 1352              		.loc 1 1155 0
 1353 029e 1A61     		str	r2, [r3, #16]
 1354              	.LVL47:
 1355              	.LBE222:
 1356              	.LBE221:
 1357              	.LBB223:
 1358              	.LBB224:
1162:Board.c       **** 
 1359              		.loc 1 1162 0
 1360 02a0 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 1361              		.loc 1 1165 0
 1362 02a2 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1363              		.loc 1 1167 0
 1364 02a4 C768     		ldr	r7, [r0, #12]
 1365 02a6 07F47F47 		and	r7, r7, #65280
 1366 02aa 47F00107 		orr	r7, r7, #1
 1367 02ae C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1368              		.loc 1 1168 0
 1369 02b0 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 1370              		.loc 1 1169 0
 1371 02b2 1961     		str	r1, [r3, #16]
 1372              		.loc 1 1172 0
 1373 02b4 1A61     		str	r2, [r3, #16]
 1374              	.LVL48:
 1375              	.LBE224:
 1376              	.LBE223:
 1377              	.LBB225:
 1378              	.LBB226:
1141:Board.c       ****  // Set up to access Index Register (RS == 0)
 1379              		.loc 1 1141 0
 1380 02b6 5A61     		str	r2, [r3, #20]
1143:Board.c       **** // Delay(2);
 1381              		.loc 1 1143 0
 1382 02b8 5E61     		str	r6, [r3, #20]
1146:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1383              		.loc 1 1146 0
 1384 02ba C768     		ldr	r7, [r0, #12]
 1385 02bc 07F47F47 		and	r7, r7, #65280
 1386 02c0 47F0C507 		orr	r7, r7, #197
 1387 02c4 C760     		str	r7, [r0, #12]
1147:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1388              		.loc 1 1147 0
 1389 02c6 5961     		str	r1, [r3, #20]
1148:Board.c       **** 
 1390              		.loc 1 1148 0
 1391 02c8 1961     		str	r1, [r3, #16]
1151:Board.c       **** // Delay(2);
 1392              		.loc 1 1151 0
 1393 02ca 1E61     		str	r6, [r3, #16]
1155:Board.c       ****  
 1394              		.loc 1 1155 0
 1395 02cc 1A61     		str	r2, [r3, #16]
 1396              	.LVL49:
 1397              	.LBE226:
 1398              	.LBE225:
 1399              	.LBB227:
 1400              	.LBB228:
1162:Board.c       **** 
 1401              		.loc 1 1162 0
 1402 02ce 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 1403              		.loc 1 1165 0
 1404 02d0 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1405              		.loc 1 1167 0
 1406 02d2 C768     		ldr	r7, [r0, #12]
 1407 02d4 07F47F47 		and	r7, r7, #65280
 1408 02d8 47F02B07 		orr	r7, r7, #43
 1409 02dc C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1410              		.loc 1 1168 0
 1411 02de 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 1412              		.loc 1 1169 0
 1413 02e0 1961     		str	r1, [r3, #16]
 1414              		.loc 1 1172 0
 1415 02e2 1A61     		str	r2, [r3, #16]
 1416              	.LVL50:
 1417              	.LBE228:
 1418              	.LBE227:
 1419              	.LBB229:
 1420              	.LBB230:
1162:Board.c       **** 
 1421              		.loc 1 1162 0
 1422 02e4 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 1423              		.loc 1 1165 0
 1424 02e6 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1425              		.loc 1 1167 0
 1426 02e8 C768     		ldr	r7, [r0, #12]
 1427 02ea 07F47F47 		and	r7, r7, #65280
 1428 02ee 47F02F07 		orr	r7, r7, #47
 1429 02f2 C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1430              		.loc 1 1168 0
 1431 02f4 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 1432              		.loc 1 1169 0
 1433 02f6 1961     		str	r1, [r3, #16]
 1434              		.loc 1 1172 0
 1435 02f8 1A61     		str	r2, [r3, #16]
 1436              	.LVL51:
 1437              	.LBE230:
 1438              	.LBE229:
 1439              	.LBB231:
 1440              	.LBB232:
1141:Board.c       ****  // Set up to access Index Register (RS == 0)
 1441              		.loc 1 1141 0
 1442 02fa 5A61     		str	r2, [r3, #20]
1143:Board.c       **** // Delay(2);
 1443              		.loc 1 1143 0
 1444 02fc 5E61     		str	r6, [r3, #20]
1146:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1445              		.loc 1 1146 0
 1446 02fe C768     		ldr	r7, [r0, #12]
 1447 0300 07F47F47 		and	r7, r7, #65280
 1448 0304 47F0C707 		orr	r7, r7, #199
 1449 0308 C760     		str	r7, [r0, #12]
1147:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1450              		.loc 1 1147 0
 1451 030a 5961     		str	r1, [r3, #20]
1148:Board.c       **** 
 1452              		.loc 1 1148 0
 1453 030c 1961     		str	r1, [r3, #16]
1151:Board.c       **** // Delay(2);
 1454              		.loc 1 1151 0
 1455 030e 1E61     		str	r6, [r3, #16]
1155:Board.c       ****  
 1456              		.loc 1 1155 0
 1457 0310 1A61     		str	r2, [r3, #16]
 1458              	.LVL52:
 1459              	.LBE232:
 1460              	.LBE231:
 1461              	.LBB233:
 1462              	.LBB234:
1162:Board.c       **** 
 1463              		.loc 1 1162 0
 1464 0312 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 1465              		.loc 1 1165 0
 1466 0314 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1467              		.loc 1 1167 0
 1468 0316 C768     		ldr	r7, [r0, #12]
 1469 0318 07F47F47 		and	r7, r7, #65280
 1470 031c 47F0C707 		orr	r7, r7, #199
 1471 0320 C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1472              		.loc 1 1168 0
 1473 0322 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 1474              		.loc 1 1169 0
 1475 0324 1961     		str	r1, [r3, #16]
 1476              		.loc 1 1172 0
 1477 0326 1A61     		str	r2, [r3, #16]
 1478              	.LVL53:
 1479              	.LBE234:
 1480              	.LBE233:
 1481              	.LBB235:
 1482              	.LBB236:
1141:Board.c       ****  // Set up to access Index Register (RS == 0)
 1483              		.loc 1 1141 0
 1484 0328 5A61     		str	r2, [r3, #20]
1143:Board.c       **** // Delay(2);
 1485              		.loc 1 1143 0
 1486 032a 5E61     		str	r6, [r3, #20]
1146:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1487              		.loc 1 1146 0
 1488 032c C768     		ldr	r7, [r0, #12]
 1489 032e 07F47F47 		and	r7, r7, #65280
 1490 0332 47F03A07 		orr	r7, r7, #58
 1491 0336 C760     		str	r7, [r0, #12]
1147:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1492              		.loc 1 1147 0
 1493 0338 5961     		str	r1, [r3, #20]
1148:Board.c       **** 
 1494              		.loc 1 1148 0
 1495 033a 1961     		str	r1, [r3, #16]
1151:Board.c       **** // Delay(2);
 1496              		.loc 1 1151 0
 1497 033c 1E61     		str	r6, [r3, #16]
1155:Board.c       ****  
 1498              		.loc 1 1155 0
 1499 033e 1A61     		str	r2, [r3, #16]
 1500              	.LVL54:
 1501              	.LBE236:
 1502              	.LBE235:
 1503              	.LBB237:
 1504              	.LBB238:
1162:Board.c       **** 
 1505              		.loc 1 1162 0
 1506 0340 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 1507              		.loc 1 1165 0
 1508 0342 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1509              		.loc 1 1167 0
 1510 0344 C768     		ldr	r7, [r0, #12]
 1511 0346 07F47F47 		and	r7, r7, #65280
 1512 034a 47F05507 		orr	r7, r7, #85
 1513 034e C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1514              		.loc 1 1168 0
 1515 0350 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 1516              		.loc 1 1169 0
 1517 0352 1961     		str	r1, [r3, #16]
 1518              		.loc 1 1172 0
 1519 0354 1A61     		str	r2, [r3, #16]
 1520              	.LVL55:
 1521              	.LBE238:
 1522              	.LBE237:
 1523              	.LBB239:
 1524              	.LBB240:
1141:Board.c       ****  // Set up to access Index Register (RS == 0)
 1525              		.loc 1 1141 0
 1526 0356 5A61     		str	r2, [r3, #20]
1143:Board.c       **** // Delay(2);
 1527              		.loc 1 1143 0
 1528 0358 5E61     		str	r6, [r3, #20]
1146:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1529              		.loc 1 1146 0
 1530 035a C768     		ldr	r7, [r0, #12]
 1531 035c 07F47F47 		and	r7, r7, #65280
 1532 0360 47F03607 		orr	r7, r7, #54
 1533 0364 C760     		str	r7, [r0, #12]
1147:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1534              		.loc 1 1147 0
 1535 0366 5961     		str	r1, [r3, #20]
1148:Board.c       **** 
 1536              		.loc 1 1148 0
 1537 0368 1961     		str	r1, [r3, #16]
1151:Board.c       **** // Delay(2);
 1538              		.loc 1 1151 0
 1539 036a 1E61     		str	r6, [r3, #16]
1155:Board.c       ****  
 1540              		.loc 1 1155 0
 1541 036c 1A61     		str	r2, [r3, #16]
 1542              	.LVL56:
 1543              	.LBE240:
 1544              	.LBE239:
 1545              	.LBB241:
 1546              	.LBB242:
1162:Board.c       **** 
 1547              		.loc 1 1162 0
 1548 036e 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 1549              		.loc 1 1165 0
 1550 0370 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1551              		.loc 1 1167 0
 1552 0372 C768     		ldr	r7, [r0, #12]
 1553 0374 07F47F47 		and	r7, r7, #65280
 1554 0378 47F02007 		orr	r7, r7, #32
 1555 037c C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1556              		.loc 1 1168 0
 1557 037e 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 1558              		.loc 1 1169 0
 1559 0380 1961     		str	r1, [r3, #16]
 1560              		.loc 1 1172 0
 1561 0382 1A61     		str	r2, [r3, #16]
 1562              	.LVL57:
 1563              	.LBE242:
 1564              	.LBE241:
 1565              	.LBB243:
 1566              	.LBB244:
1141:Board.c       ****  // Set up to access Index Register (RS == 0)
 1567              		.loc 1 1141 0
 1568 0384 5A61     		str	r2, [r3, #20]
1143:Board.c       **** // Delay(2);
 1569              		.loc 1 1143 0
 1570 0386 5E61     		str	r6, [r3, #20]
1146:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1571              		.loc 1 1146 0
 1572 0388 C768     		ldr	r7, [r0, #12]
 1573 038a 07F47F47 		and	r7, r7, #65280
 1574 038e 47F0B107 		orr	r7, r7, #177
 1575 0392 C760     		str	r7, [r0, #12]
1147:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1576              		.loc 1 1147 0
 1577 0394 5961     		str	r1, [r3, #20]
1148:Board.c       **** 
 1578              		.loc 1 1148 0
 1579 0396 1961     		str	r1, [r3, #16]
1151:Board.c       **** // Delay(2);
 1580              		.loc 1 1151 0
 1581 0398 1E61     		str	r6, [r3, #16]
1155:Board.c       ****  
 1582              		.loc 1 1155 0
 1583 039a 1A61     		str	r2, [r3, #16]
 1584              	.LVL58:
 1585              	.LBE244:
 1586              	.LBE243:
 1587              	.LBB245:
 1588              	.LBB246:
1162:Board.c       **** 
 1589              		.loc 1 1162 0
 1590 039c 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 1591              		.loc 1 1165 0
 1592 039e 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1593              		.loc 1 1167 0
 1594 03a0 C768     		ldr	r7, [r0, #12]
 1595 03a2 07F47F47 		and	r7, r7, #65280
 1596 03a6 C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1597              		.loc 1 1168 0
 1598 03a8 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 1599              		.loc 1 1169 0
 1600 03aa 1961     		str	r1, [r3, #16]
 1601              		.loc 1 1172 0
 1602 03ac 1A61     		str	r2, [r3, #16]
 1603              	.LVL59:
 1604              	.LBE246:
 1605              	.LBE245:
 1606              	.LBB247:
 1607              	.LBB248:
1162:Board.c       **** 
 1608              		.loc 1 1162 0
 1609 03ae 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 1610              		.loc 1 1165 0
 1611 03b0 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1612              		.loc 1 1167 0
 1613 03b2 C768     		ldr	r7, [r0, #12]
 1614 03b4 07F47F47 		and	r7, r7, #65280
 1615 03b8 47F01807 		orr	r7, r7, #24
 1616 03bc C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1617              		.loc 1 1168 0
 1618 03be 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 1619              		.loc 1 1169 0
 1620 03c0 1961     		str	r1, [r3, #16]
 1621              		.loc 1 1172 0
 1622 03c2 1A61     		str	r2, [r3, #16]
 1623              	.LVL60:
 1624              	.LBE248:
 1625              	.LBE247:
 1626              	.LBB249:
 1627              	.LBB250:
1141:Board.c       ****  // Set up to access Index Register (RS == 0)
 1628              		.loc 1 1141 0
 1629 03c4 5A61     		str	r2, [r3, #20]
1143:Board.c       **** // Delay(2);
 1630              		.loc 1 1143 0
 1631 03c6 5E61     		str	r6, [r3, #20]
1146:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1632              		.loc 1 1146 0
 1633 03c8 C768     		ldr	r7, [r0, #12]
 1634 03ca 07F47F47 		and	r7, r7, #65280
 1635 03ce 47F0B607 		orr	r7, r7, #182
 1636 03d2 C760     		str	r7, [r0, #12]
1147:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1637              		.loc 1 1147 0
 1638 03d4 5961     		str	r1, [r3, #20]
1148:Board.c       **** 
 1639              		.loc 1 1148 0
 1640 03d6 1961     		str	r1, [r3, #16]
1151:Board.c       **** // Delay(2);
 1641              		.loc 1 1151 0
 1642 03d8 1E61     		str	r6, [r3, #16]
1155:Board.c       ****  
 1643              		.loc 1 1155 0
 1644 03da 1A61     		str	r2, [r3, #16]
 1645              	.LVL61:
 1646              	.LBE250:
 1647              	.LBE249:
 1648              	.LBB251:
 1649              	.LBB252:
1162:Board.c       **** 
 1650              		.loc 1 1162 0
 1651 03dc 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 1652              		.loc 1 1165 0
 1653 03de 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1654              		.loc 1 1167 0
 1655 03e0 C768     		ldr	r7, [r0, #12]
 1656 03e2 07F47F47 		and	r7, r7, #65280
 1657 03e6 47F00A07 		orr	r7, r7, #10
 1658 03ea C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1659              		.loc 1 1168 0
 1660 03ec 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 1661              		.loc 1 1169 0
 1662 03ee 1961     		str	r1, [r3, #16]
 1663              		.loc 1 1172 0
 1664 03f0 1A61     		str	r2, [r3, #16]
 1665              	.LVL62:
 1666              	.LBE252:
 1667              	.LBE251:
 1668              	.LBB253:
 1669              	.LBB254:
1162:Board.c       **** 
 1670              		.loc 1 1162 0
 1671 03f2 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 1672              		.loc 1 1165 0
 1673 03f4 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1674              		.loc 1 1167 0
 1675 03f6 C768     		ldr	r7, [r0, #12]
 1676 03f8 07F47F47 		and	r7, r7, #65280
 1677 03fc 47F0E207 		orr	r7, r7, #226
 1678 0400 C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1679              		.loc 1 1168 0
 1680 0402 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 1681              		.loc 1 1169 0
 1682 0404 1961     		str	r1, [r3, #16]
 1683              		.loc 1 1172 0
 1684 0406 1A61     		str	r2, [r3, #16]
 1685              	.LVL63:
 1686              	.LBE254:
 1687              	.LBE253:
 1688              	.LBB255:
 1689              	.LBB256:
1141:Board.c       ****  // Set up to access Index Register (RS == 0)
 1690              		.loc 1 1141 0
 1691 0408 5A61     		str	r2, [r3, #20]
1143:Board.c       **** // Delay(2);
 1692              		.loc 1 1143 0
 1693 040a 5E61     		str	r6, [r3, #20]
1146:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1694              		.loc 1 1146 0
 1695 040c C768     		ldr	r7, [r0, #12]
 1696 040e 07F47F47 		and	r7, r7, #65280
 1697 0412 47F0F207 		orr	r7, r7, #242
 1698 0416 C760     		str	r7, [r0, #12]
1147:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1699              		.loc 1 1147 0
 1700 0418 5961     		str	r1, [r3, #20]
1148:Board.c       **** 
 1701              		.loc 1 1148 0
 1702 041a 1961     		str	r1, [r3, #16]
1151:Board.c       **** // Delay(2);
 1703              		.loc 1 1151 0
 1704 041c 1E61     		str	r6, [r3, #16]
1155:Board.c       ****  
 1705              		.loc 1 1155 0
 1706 041e 1A61     		str	r2, [r3, #16]
 1707              	.LVL64:
 1708              	.LBE256:
 1709              	.LBE255:
 1710              	.LBB257:
 1711              	.LBB258:
1162:Board.c       **** 
 1712              		.loc 1 1162 0
 1713 0420 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 1714              		.loc 1 1165 0
 1715 0422 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1716              		.loc 1 1167 0
 1717 0424 C768     		ldr	r7, [r0, #12]
 1718 0426 07F47F47 		and	r7, r7, #65280
 1719 042a C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1720              		.loc 1 1168 0
 1721 042c 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 1722              		.loc 1 1169 0
 1723 042e 1961     		str	r1, [r3, #16]
 1724              		.loc 1 1172 0
 1725 0430 1A61     		str	r2, [r3, #16]
 1726              	.LVL65:
 1727              	.LBE258:
 1728              	.LBE257:
 1729              	.LBB259:
 1730              	.LBB260:
1141:Board.c       ****  // Set up to access Index Register (RS == 0)
 1731              		.loc 1 1141 0
 1732 0432 5A61     		str	r2, [r3, #20]
1143:Board.c       **** // Delay(2);
 1733              		.loc 1 1143 0
 1734 0434 5E61     		str	r6, [r3, #20]
1146:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1735              		.loc 1 1146 0
 1736 0436 C768     		ldr	r7, [r0, #12]
 1737 0438 07F47F47 		and	r7, r7, #65280
 1738 043c 47F02607 		orr	r7, r7, #38
 1739 0440 C760     		str	r7, [r0, #12]
1147:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1740              		.loc 1 1147 0
 1741 0442 5961     		str	r1, [r3, #20]
1148:Board.c       **** 
 1742              		.loc 1 1148 0
 1743 0444 1961     		str	r1, [r3, #16]
1151:Board.c       **** // Delay(2);
 1744              		.loc 1 1151 0
 1745 0446 1E61     		str	r6, [r3, #16]
1155:Board.c       ****  
 1746              		.loc 1 1155 0
 1747 0448 1A61     		str	r2, [r3, #16]
 1748              	.LVL66:
 1749              	.LBE260:
 1750              	.LBE259:
 1751              	.LBB261:
 1752              	.LBB262:
1162:Board.c       **** 
 1753              		.loc 1 1162 0
 1754 044a 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 1755              		.loc 1 1165 0
 1756 044c 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1757              		.loc 1 1167 0
 1758 044e C768     		ldr	r7, [r0, #12]
 1759 0450 07F47F47 		and	r7, r7, #65280
 1760 0454 47F00107 		orr	r7, r7, #1
 1761 0458 C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1762              		.loc 1 1168 0
 1763 045a 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 1764              		.loc 1 1169 0
 1765 045c 1961     		str	r1, [r3, #16]
 1766              		.loc 1 1172 0
 1767 045e 1A61     		str	r2, [r3, #16]
 1768              	.LVL67:
 1769              	.LBE262:
 1770              	.LBE261:
 1771              	.LBB263:
 1772              	.LBB264:
1141:Board.c       ****  // Set up to access Index Register (RS == 0)
 1773              		.loc 1 1141 0
 1774 0460 5A61     		str	r2, [r3, #20]
1143:Board.c       **** // Delay(2);
 1775              		.loc 1 1143 0
 1776 0462 5E61     		str	r6, [r3, #20]
1146:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1777              		.loc 1 1146 0
 1778 0464 C768     		ldr	r7, [r0, #12]
 1779 0466 07F47F47 		and	r7, r7, #65280
 1780 046a 47F0E007 		orr	r7, r7, #224
 1781 046e C760     		str	r7, [r0, #12]
1147:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1782              		.loc 1 1147 0
 1783 0470 5961     		str	r1, [r3, #20]
1148:Board.c       **** 
 1784              		.loc 1 1148 0
 1785 0472 1961     		str	r1, [r3, #16]
1151:Board.c       **** // Delay(2);
 1786              		.loc 1 1151 0
 1787 0474 1E61     		str	r6, [r3, #16]
1155:Board.c       ****  
 1788              		.loc 1 1155 0
 1789 0476 1A61     		str	r2, [r3, #16]
 1790              	.LVL68:
 1791              	.LBE264:
 1792              	.LBE263:
 1793              	.LBB265:
 1794              	.LBB266:
1162:Board.c       **** 
 1795              		.loc 1 1162 0
 1796 0478 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 1797              		.loc 1 1165 0
 1798 047a 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1799              		.loc 1 1167 0
 1800 047c C768     		ldr	r7, [r0, #12]
 1801 047e 07F47F47 		and	r7, r7, #65280
 1802 0482 47F00F07 		orr	r7, r7, #15
 1803 0486 C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1804              		.loc 1 1168 0
 1805 0488 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 1806              		.loc 1 1169 0
 1807 048a 1961     		str	r1, [r3, #16]
 1808              		.loc 1 1172 0
 1809 048c 1A61     		str	r2, [r3, #16]
 1810              	.LVL69:
 1811              	.LBE266:
 1812              	.LBE265:
 1813              	.LBB267:
 1814              	.LBB268:
1162:Board.c       **** 
 1815              		.loc 1 1162 0
 1816 048e 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 1817              		.loc 1 1165 0
 1818 0490 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1819              		.loc 1 1167 0
 1820 0492 C768     		ldr	r7, [r0, #12]
 1821 0494 07F47F47 		and	r7, r7, #65280
 1822 0498 47F01D07 		orr	r7, r7, #29
 1823 049c C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1824              		.loc 1 1168 0
 1825 049e 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 1826              		.loc 1 1169 0
 1827 04a0 1961     		str	r1, [r3, #16]
 1828              		.loc 1 1172 0
 1829 04a2 1A61     		str	r2, [r3, #16]
 1830              	.LVL70:
 1831              	.LBE268:
 1832              	.LBE267:
 1833              	.LBB269:
 1834              	.LBB270:
1162:Board.c       **** 
 1835              		.loc 1 1162 0
 1836 04a4 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 1837              		.loc 1 1165 0
 1838 04a6 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1839              		.loc 1 1167 0
 1840 04a8 C768     		ldr	r7, [r0, #12]
 1841 04aa 07F47F47 		and	r7, r7, #65280
 1842 04ae 47F01A07 		orr	r7, r7, #26
 1843 04b2 C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1844              		.loc 1 1168 0
 1845 04b4 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 1846              		.loc 1 1169 0
 1847 04b6 1961     		str	r1, [r3, #16]
 1848              		.loc 1 1172 0
 1849 04b8 1A61     		str	r2, [r3, #16]
 1850              	.LVL71:
 1851              	.LBE270:
 1852              	.LBE269:
 1853              	.LBB271:
 1854              	.LBB272:
1162:Board.c       **** 
 1855              		.loc 1 1162 0
 1856 04ba 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 1857              		.loc 1 1165 0
 1858 04bc 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1859              		.loc 1 1167 0
 1860 04be C768     		ldr	r7, [r0, #12]
 1861 04c0 07F47F47 		and	r7, r7, #65280
 1862 04c4 47F00907 		orr	r7, r7, #9
 1863 04c8 C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1864              		.loc 1 1168 0
 1865 04ca 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 1866              		.loc 1 1169 0
 1867 04cc 1961     		str	r1, [r3, #16]
 1868              		.loc 1 1172 0
 1869 04ce 1A61     		str	r2, [r3, #16]
 1870              	.LVL72:
 1871              	.LBE272:
 1872              	.LBE271:
 1873              	.LBB273:
 1874              	.LBB274:
1162:Board.c       **** 
 1875              		.loc 1 1162 0
 1876 04d0 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 1877              		.loc 1 1165 0
 1878 04d2 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1879              		.loc 1 1167 0
 1880 04d4 C768     		ldr	r7, [r0, #12]
 1881 04d6 07F47F47 		and	r7, r7, #65280
 1882 04da 47F00F07 		orr	r7, r7, #15
 1883 04de C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1884              		.loc 1 1168 0
 1885 04e0 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 1886              		.loc 1 1169 0
 1887 04e2 1961     		str	r1, [r3, #16]
 1888              		.loc 1 1172 0
 1889 04e4 1A61     		str	r2, [r3, #16]
 1890              	.LVL73:
 1891              	.LBE274:
 1892              	.LBE273:
 1893              	.LBB275:
 1894              	.LBB276:
1162:Board.c       **** 
 1895              		.loc 1 1162 0
 1896 04e6 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 1897              		.loc 1 1165 0
 1898 04e8 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1899              		.loc 1 1167 0
 1900 04ea C768     		ldr	r7, [r0, #12]
 1901 04ec 07F47F47 		and	r7, r7, #65280
 1902 04f0 47F00907 		orr	r7, r7, #9
 1903 04f4 C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1904              		.loc 1 1168 0
 1905 04f6 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 1906              		.loc 1 1169 0
 1907 04f8 1961     		str	r1, [r3, #16]
 1908              		.loc 1 1172 0
 1909 04fa 1A61     		str	r2, [r3, #16]
 1910              	.LVL74:
 1911              	.LBE276:
 1912              	.LBE275:
 1913              	.LBB277:
 1914              	.LBB278:
1162:Board.c       **** 
 1915              		.loc 1 1162 0
 1916 04fc 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 1917              		.loc 1 1165 0
 1918 04fe 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1919              		.loc 1 1167 0
 1920 0500 C768     		ldr	r7, [r0, #12]
 1921 0502 07F47F47 		and	r7, r7, #65280
 1922 0506 47F04607 		orr	r7, r7, #70
 1923 050a C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1924              		.loc 1 1168 0
 1925 050c 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 1926              		.loc 1 1169 0
 1927 050e 1961     		str	r1, [r3, #16]
 1928              		.loc 1 1172 0
 1929 0510 1A61     		str	r2, [r3, #16]
 1930              	.LVL75:
 1931              	.LBE278:
 1932              	.LBE277:
 1933              	.LBB279:
 1934              	.LBB280:
1162:Board.c       **** 
 1935              		.loc 1 1162 0
 1936 0512 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 1937              		.loc 1 1165 0
 1938 0514 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1939              		.loc 1 1167 0
 1940 0516 C768     		ldr	r7, [r0, #12]
 1941 0518 07F47F47 		and	r7, r7, #65280
 1942 051c 47F08807 		orr	r7, r7, #136
 1943 0520 C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1944              		.loc 1 1168 0
 1945 0522 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 1946              		.loc 1 1169 0
 1947 0524 1961     		str	r1, [r3, #16]
 1948              		.loc 1 1172 0
 1949 0526 1A61     		str	r2, [r3, #16]
 1950              	.LVL76:
 1951              	.LBE280:
 1952              	.LBE279:
 1953              	.LBB281:
 1954              	.LBB282:
1162:Board.c       **** 
 1955              		.loc 1 1162 0
 1956 0528 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 1957              		.loc 1 1165 0
 1958 052a 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1959              		.loc 1 1167 0
 1960 052c C768     		ldr	r7, [r0, #12]
 1961 052e 07F47F47 		and	r7, r7, #65280
 1962 0532 47F03907 		orr	r7, r7, #57
 1963 0536 C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1964              		.loc 1 1168 0
 1965 0538 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 1966              		.loc 1 1169 0
 1967 053a 1961     		str	r1, [r3, #16]
 1968              		.loc 1 1172 0
 1969 053c 1A61     		str	r2, [r3, #16]
 1970              	.LVL77:
 1971              	.LBE282:
 1972              	.LBE281:
 1973              	.LBB283:
 1974              	.LBB284:
1162:Board.c       **** 
 1975              		.loc 1 1162 0
 1976 053e 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 1977              		.loc 1 1165 0
 1978 0540 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1979              		.loc 1 1167 0
 1980 0542 C768     		ldr	r7, [r0, #12]
 1981 0544 07F47F47 		and	r7, r7, #65280
 1982 0548 47F00507 		orr	r7, r7, #5
 1983 054c C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1984              		.loc 1 1168 0
 1985 054e 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 1986              		.loc 1 1169 0
 1987 0550 1961     		str	r1, [r3, #16]
 1988              		.loc 1 1172 0
 1989 0552 1A61     		str	r2, [r3, #16]
 1990              	.LVL78:
 1991              	.LBE284:
 1992              	.LBE283:
 1993              	.LBB285:
 1994              	.LBB286:
1162:Board.c       **** 
 1995              		.loc 1 1162 0
 1996 0554 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 1997              		.loc 1 1165 0
 1998 0556 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 1999              		.loc 1 1167 0
 2000 0558 C768     		ldr	r7, [r0, #12]
 2001 055a 07F47F47 		and	r7, r7, #65280
 2002 055e 47F00F07 		orr	r7, r7, #15
 2003 0562 C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2004              		.loc 1 1168 0
 2005 0564 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 2006              		.loc 1 1169 0
 2007 0566 1961     		str	r1, [r3, #16]
 2008              		.loc 1 1172 0
 2009 0568 1A61     		str	r2, [r3, #16]
 2010              	.LVL79:
 2011              	.LBE286:
 2012              	.LBE285:
 2013              	.LBB287:
 2014              	.LBB288:
1162:Board.c       **** 
 2015              		.loc 1 1162 0
 2016 056a 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 2017              		.loc 1 1165 0
 2018 056c 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2019              		.loc 1 1167 0
 2020 056e C768     		ldr	r7, [r0, #12]
 2021 0570 07F47F47 		and	r7, r7, #65280
 2022 0574 47F00307 		orr	r7, r7, #3
 2023 0578 C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2024              		.loc 1 1168 0
 2025 057a 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 2026              		.loc 1 1169 0
 2027 057c 1961     		str	r1, [r3, #16]
 2028              		.loc 1 1172 0
 2029 057e 1A61     		str	r2, [r3, #16]
 2030              	.LVL80:
 2031              	.LBE288:
 2032              	.LBE287:
 2033              	.LBB289:
 2034              	.LBB290:
1162:Board.c       **** 
 2035              		.loc 1 1162 0
 2036 0580 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 2037              		.loc 1 1165 0
 2038 0582 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2039              		.loc 1 1167 0
 2040 0584 C768     		ldr	r7, [r0, #12]
 2041 0586 07F47F47 		and	r7, r7, #65280
 2042 058a 47F00707 		orr	r7, r7, #7
 2043 058e C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2044              		.loc 1 1168 0
 2045 0590 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 2046              		.loc 1 1169 0
 2047 0592 1961     		str	r1, [r3, #16]
 2048              		.loc 1 1172 0
 2049 0594 1A61     		str	r2, [r3, #16]
 2050              	.LVL81:
 2051              	.LBE290:
 2052              	.LBE289:
 2053              	.LBB291:
 2054              	.LBB292:
1162:Board.c       **** 
 2055              		.loc 1 1162 0
 2056 0596 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 2057              		.loc 1 1165 0
 2058 0598 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2059              		.loc 1 1167 0
 2060 059a C768     		ldr	r7, [r0, #12]
 2061 059c 07F47F47 		and	r7, r7, #65280
 2062 05a0 47F00507 		orr	r7, r7, #5
 2063 05a4 C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2064              		.loc 1 1168 0
 2065 05a6 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 2066              		.loc 1 1169 0
 2067 05a8 1961     		str	r1, [r3, #16]
 2068              		.loc 1 1172 0
 2069 05aa 1A61     		str	r2, [r3, #16]
 2070              	.LVL82:
 2071              	.LBE292:
 2072              	.LBE291:
 2073              	.LBB293:
 2074              	.LBB294:
1162:Board.c       **** 
 2075              		.loc 1 1162 0
 2076 05ac 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 2077              		.loc 1 1165 0
 2078 05ae 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2079              		.loc 1 1167 0
 2080 05b0 C768     		ldr	r7, [r0, #12]
 2081 05b2 07F47F47 		and	r7, r7, #65280
 2082 05b6 C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2083              		.loc 1 1168 0
 2084 05b8 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 2085              		.loc 1 1169 0
 2086 05ba 1961     		str	r1, [r3, #16]
 2087              		.loc 1 1172 0
 2088 05bc 1A61     		str	r2, [r3, #16]
 2089              	.LVL83:
 2090              	.LBE294:
 2091              	.LBE293:
 2092              	.LBB295:
 2093              	.LBB296:
1141:Board.c       ****  // Set up to access Index Register (RS == 0)
 2094              		.loc 1 1141 0
 2095 05be 5A61     		str	r2, [r3, #20]
1143:Board.c       **** // Delay(2);
 2096              		.loc 1 1143 0
 2097 05c0 5E61     		str	r6, [r3, #20]
1146:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2098              		.loc 1 1146 0
 2099 05c2 C768     		ldr	r7, [r0, #12]
 2100 05c4 07F47F47 		and	r7, r7, #65280
 2101 05c8 47F0E107 		orr	r7, r7, #225
 2102 05cc C760     		str	r7, [r0, #12]
1147:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2103              		.loc 1 1147 0
 2104 05ce 5961     		str	r1, [r3, #20]
1148:Board.c       **** 
 2105              		.loc 1 1148 0
 2106 05d0 1961     		str	r1, [r3, #16]
1151:Board.c       **** // Delay(2);
 2107              		.loc 1 1151 0
 2108 05d2 1E61     		str	r6, [r3, #16]
1155:Board.c       ****  
 2109              		.loc 1 1155 0
 2110 05d4 1A61     		str	r2, [r3, #16]
 2111              	.LVL84:
 2112              	.LBE296:
 2113              	.LBE295:
 2114              	.LBB297:
 2115              	.LBB298:
1162:Board.c       **** 
 2116              		.loc 1 1162 0
 2117 05d6 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 2118              		.loc 1 1165 0
 2119 05d8 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2120              		.loc 1 1167 0
 2121 05da C768     		ldr	r7, [r0, #12]
 2122 05dc 07F47F47 		and	r7, r7, #65280
 2123 05e0 C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2124              		.loc 1 1168 0
 2125 05e2 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 2126              		.loc 1 1169 0
 2127 05e4 1961     		str	r1, [r3, #16]
 2128              		.loc 1 1172 0
 2129 05e6 1A61     		str	r2, [r3, #16]
 2130              	.LVL85:
 2131              	.LBE298:
 2132              	.LBE297:
 2133              	.LBB299:
 2134              	.LBB300:
1162:Board.c       **** 
 2135              		.loc 1 1162 0
 2136 05e8 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 2137              		.loc 1 1165 0
 2138 05ea 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2139              		.loc 1 1167 0
 2140 05ec C768     		ldr	r7, [r0, #12]
 2141 05ee 07F47F47 		and	r7, r7, #65280
 2142 05f2 47F02207 		orr	r7, r7, #34
 2143 05f6 C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2144              		.loc 1 1168 0
 2145 05f8 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 2146              		.loc 1 1169 0
 2147 05fa 1961     		str	r1, [r3, #16]
 2148              		.loc 1 1172 0
 2149 05fc 1A61     		str	r2, [r3, #16]
 2150              	.LVL86:
 2151              	.LBE300:
 2152              	.LBE299:
 2153              	.LBB301:
 2154              	.LBB302:
1162:Board.c       **** 
 2155              		.loc 1 1162 0
 2156 05fe 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 2157              		.loc 1 1165 0
 2158 0600 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2159              		.loc 1 1167 0
 2160 0602 C768     		ldr	r7, [r0, #12]
 2161 0604 07F47F47 		and	r7, r7, #65280
 2162 0608 47F02507 		orr	r7, r7, #37
 2163 060c C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2164              		.loc 1 1168 0
 2165 060e 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 2166              		.loc 1 1169 0
 2167 0610 1961     		str	r1, [r3, #16]
 2168              		.loc 1 1172 0
 2169 0612 1A61     		str	r2, [r3, #16]
 2170              	.LVL87:
 2171              	.LBE302:
 2172              	.LBE301:
 2173              	.LBB303:
 2174              	.LBB304:
1162:Board.c       **** 
 2175              		.loc 1 1162 0
 2176 0614 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 2177              		.loc 1 1165 0
 2178 0616 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2179              		.loc 1 1167 0
 2180 0618 C768     		ldr	r7, [r0, #12]
 2181 061a 07F47F47 		and	r7, r7, #65280
 2182 061e 47F00607 		orr	r7, r7, #6
 2183 0622 C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2184              		.loc 1 1168 0
 2185 0624 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 2186              		.loc 1 1169 0
 2187 0626 1961     		str	r1, [r3, #16]
 2188              		.loc 1 1172 0
 2189 0628 1A61     		str	r2, [r3, #16]
 2190              	.LVL88:
 2191              	.LBE304:
 2192              	.LBE303:
 2193              	.LBB305:
 2194              	.LBB306:
1162:Board.c       **** 
 2195              		.loc 1 1162 0
 2196 062a 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 2197              		.loc 1 1165 0
 2198 062c 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2199              		.loc 1 1167 0
 2200 062e C768     		ldr	r7, [r0, #12]
 2201 0630 07F47F47 		and	r7, r7, #65280
 2202 0634 47F01007 		orr	r7, r7, #16
 2203 0638 C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2204              		.loc 1 1168 0
 2205 063a 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 2206              		.loc 1 1169 0
 2207 063c 1961     		str	r1, [r3, #16]
 2208              		.loc 1 1172 0
 2209 063e 1A61     		str	r2, [r3, #16]
 2210              	.LVL89:
 2211              	.LBE306:
 2212              	.LBE305:
 2213              	.LBB307:
 2214              	.LBB308:
1162:Board.c       **** 
 2215              		.loc 1 1162 0
 2216 0640 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 2217              		.loc 1 1165 0
 2218 0642 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2219              		.loc 1 1167 0
 2220 0644 C768     		ldr	r7, [r0, #12]
 2221 0646 07F47F47 		and	r7, r7, #65280
 2222 064a 47F00607 		orr	r7, r7, #6
 2223 064e C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2224              		.loc 1 1168 0
 2225 0650 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 2226              		.loc 1 1169 0
 2227 0652 1961     		str	r1, [r3, #16]
 2228              		.loc 1 1172 0
 2229 0654 1A61     		str	r2, [r3, #16]
 2230              	.LVL90:
 2231              	.LBE308:
 2232              	.LBE307:
 2233              	.LBB309:
 2234              	.LBB310:
1162:Board.c       **** 
 2235              		.loc 1 1162 0
 2236 0656 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 2237              		.loc 1 1165 0
 2238 0658 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2239              		.loc 1 1167 0
 2240 065a C768     		ldr	r7, [r0, #12]
 2241 065c 07F47F47 		and	r7, r7, #65280
 2242 0660 47F03907 		orr	r7, r7, #57
 2243 0664 C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2244              		.loc 1 1168 0
 2245 0666 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 2246              		.loc 1 1169 0
 2247 0668 1961     		str	r1, [r3, #16]
 2248              		.loc 1 1172 0
 2249 066a 1A61     		str	r2, [r3, #16]
 2250              	.LVL91:
 2251              	.LBE310:
 2252              	.LBE309:
 2253              	.LBB311:
 2254              	.LBB312:
1162:Board.c       **** 
 2255              		.loc 1 1162 0
 2256 066c 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 2257              		.loc 1 1165 0
 2258 066e 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2259              		.loc 1 1167 0
 2260 0670 C768     		ldr	r7, [r0, #12]
 2261 0672 07F47F47 		and	r7, r7, #65280
 2262 0676 47F02207 		orr	r7, r7, #34
 2263 067a C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2264              		.loc 1 1168 0
 2265 067c 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 2266              		.loc 1 1169 0
 2267 067e 1961     		str	r1, [r3, #16]
 2268              		.loc 1 1172 0
 2269 0680 1A61     		str	r2, [r3, #16]
 2270              	.LVL92:
 2271              	.LBE312:
 2272              	.LBE311:
 2273              	.LBB313:
 2274              	.LBB314:
1162:Board.c       **** 
 2275              		.loc 1 1162 0
 2276 0682 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 2277              		.loc 1 1165 0
 2278 0684 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2279              		.loc 1 1167 0
 2280 0686 C768     		ldr	r7, [r0, #12]
 2281 0688 07F47F47 		and	r7, r7, #65280
 2282 068c 47F04A07 		orr	r7, r7, #74
 2283 0690 C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2284              		.loc 1 1168 0
 2285 0692 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 2286              		.loc 1 1169 0
 2287 0694 1961     		str	r1, [r3, #16]
 2288              		.loc 1 1172 0
 2289 0696 1A61     		str	r2, [r3, #16]
 2290              	.LVL93:
 2291              	.LBE314:
 2292              	.LBE313:
 2293              	.LBB315:
 2294              	.LBB316:
1162:Board.c       **** 
 2295              		.loc 1 1162 0
 2296 0698 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 2297              		.loc 1 1165 0
 2298 069a 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2299              		.loc 1 1167 0
 2300 069c C768     		ldr	r7, [r0, #12]
 2301 069e 07F47F47 		and	r7, r7, #65280
 2302 06a2 47F00A07 		orr	r7, r7, #10
 2303 06a6 C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2304              		.loc 1 1168 0
 2305 06a8 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 2306              		.loc 1 1169 0
 2307 06aa 1961     		str	r1, [r3, #16]
 2308              		.loc 1 1172 0
 2309 06ac 1A61     		str	r2, [r3, #16]
 2310              	.LVL94:
 2311              	.LBE316:
 2312              	.LBE315:
 2313              	.LBB317:
 2314              	.LBB318:
1162:Board.c       **** 
 2315              		.loc 1 1162 0
 2316 06ae 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 2317              		.loc 1 1165 0
 2318 06b0 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2319              		.loc 1 1167 0
 2320 06b2 C768     		ldr	r7, [r0, #12]
 2321 06b4 07F47F47 		and	r7, r7, #65280
 2322 06b8 47F01007 		orr	r7, r7, #16
 2323 06bc C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2324              		.loc 1 1168 0
 2325 06be 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 2326              		.loc 1 1169 0
 2327 06c0 1961     		str	r1, [r3, #16]
 2328              		.loc 1 1172 0
 2329 06c2 1A61     		str	r2, [r3, #16]
 2330              	.LVL95:
 2331              	.LBE318:
 2332              	.LBE317:
 2333              	.LBB319:
 2334              	.LBB320:
1162:Board.c       **** 
 2335              		.loc 1 1162 0
 2336 06c4 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 2337              		.loc 1 1165 0
 2338 06c6 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2339              		.loc 1 1167 0
 2340 06c8 C768     		ldr	r7, [r0, #12]
 2341 06ca 07F47F47 		and	r7, r7, #65280
 2342 06ce 47F00C07 		orr	r7, r7, #12
 2343 06d2 C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2344              		.loc 1 1168 0
 2345 06d4 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 2346              		.loc 1 1169 0
 2347 06d6 1961     		str	r1, [r3, #16]
 2348              		.loc 1 1172 0
 2349 06d8 1A61     		str	r2, [r3, #16]
 2350              	.LVL96:
 2351              	.LBE320:
 2352              	.LBE319:
 2353              	.LBB321:
 2354              	.LBB322:
1162:Board.c       **** 
 2355              		.loc 1 1162 0
 2356 06da 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 2357              		.loc 1 1165 0
 2358 06dc 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2359              		.loc 1 1167 0
 2360 06de C768     		ldr	r7, [r0, #12]
 2361 06e0 07F47F47 		and	r7, r7, #65280
 2362 06e4 47F03807 		orr	r7, r7, #56
 2363 06e8 C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2364              		.loc 1 1168 0
 2365 06ea 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 2366              		.loc 1 1169 0
 2367 06ec 1961     		str	r1, [r3, #16]
 2368              		.loc 1 1172 0
 2369 06ee 1A61     		str	r2, [r3, #16]
 2370              	.LVL97:
 2371              	.LBE322:
 2372              	.LBE321:
 2373              	.LBB323:
 2374              	.LBB324:
1162:Board.c       **** 
 2375              		.loc 1 1162 0
 2376 06f0 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 2377              		.loc 1 1165 0
 2378 06f2 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2379              		.loc 1 1167 0
 2380 06f4 C768     		ldr	r7, [r0, #12]
 2381 06f6 07F47F47 		and	r7, r7, #65280
 2382 06fa 47F03A07 		orr	r7, r7, #58
 2383 06fe C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2384              		.loc 1 1168 0
 2385 0700 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 2386              		.loc 1 1169 0
 2387 0702 1961     		str	r1, [r3, #16]
 2388              		.loc 1 1172 0
 2389 0704 1A61     		str	r2, [r3, #16]
 2390              	.LVL98:
 2391              	.LBE324:
 2392              	.LBE323:
 2393              	.LBB325:
 2394              	.LBB326:
1162:Board.c       **** 
 2395              		.loc 1 1162 0
 2396 0706 5A61     		str	r2, [r3, #20]
1165:Board.c       **** 
 2397              		.loc 1 1165 0
 2398 0708 1E61     		str	r6, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2399              		.loc 1 1167 0
 2400 070a C768     		ldr	r7, [r0, #12]
 2401 070c 07F47F47 		and	r7, r7, #65280
 2402 0710 47F00F07 		orr	r7, r7, #15
 2403 0714 C760     		str	r7, [r0, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2404              		.loc 1 1168 0
 2405 0716 5961     		str	r1, [r3, #20]
1169:Board.c       **** 
 2406              		.loc 1 1169 0
 2407 0718 1961     		str	r1, [r3, #16]
 2408              		.loc 1 1172 0
 2409 071a 1A61     		str	r2, [r3, #16]
 2410              	.LVL99:
 2411              	.LBE326:
 2412              	.LBE325:
 2413              	.LBB327:
 2414              	.LBB169:
1141:Board.c       ****  // Set up to access Index Register (RS == 0)
 2415              		.loc 1 1141 0
 2416 071c 5A61     		str	r2, [r3, #20]
1143:Board.c       **** // Delay(2);
 2417              		.loc 1 1143 0
 2418 071e 5E61     		str	r6, [r3, #20]
1146:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2419              		.loc 1 1146 0
 2420 0720 C768     		ldr	r7, [r0, #12]
 2421 0722 07F47F47 		and	r7, r7, #65280
 2422 0726 47F01107 		orr	r7, r7, #17
 2423 072a C760     		str	r7, [r0, #12]
1147:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2424              		.loc 1 1147 0
 2425 072c 5961     		str	r1, [r3, #20]
1148:Board.c       **** 
 2426              		.loc 1 1148 0
 2427 072e 1961     		str	r1, [r3, #16]
1151:Board.c       **** // Delay(2);
 2428              		.loc 1 1151 0
 2429 0730 1E61     		str	r6, [r3, #16]
1155:Board.c       ****  
 2430              		.loc 1 1155 0
 2431 0732 1A61     		str	r2, [r3, #16]
 2432              	.LVL100:
 2433              	.L62:
 2434              	.LBE169:
 2435              	.LBE327:
1126:Board.c       **** 		tmp--;
 2436              		.loc 1 1126 0
 2437 0734 4CF25030 		movw	r0, #50000
 2438 0738 A847     		blx	r5
 2439              	.LVL101:
 2440 073a 631E     		subs	r3, r4, #1
1125:Board.c       **** 	 	Delay(50000);
 2441              		.loc 1 1125 0
 2442 073c 13F0FF04 		ands	r4, r3, #255
 2443              	.LVL102:
 2444 0740 F8D1     		bne	.L62
 2445              	.LVL103:
 2446              	.LBB328:
 2447              	.LBB329:
1141:Board.c       ****  // Set up to access Index Register (RS == 0)
 2448              		.loc 1 1141 0
 2449 0742 4FF40051 		mov	r1, #8192
1143:Board.c       **** // Delay(2);
 2450              		.loc 1 1143 0
 2451 0746 4FF48044 		mov	r4, #16384
1147:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2452              		.loc 1 1147 0
 2453 074a 4FF40046 		mov	r6, #32768
1141:Board.c       ****  // Set up to access Index Register (RS == 0)
 2454              		.loc 1 1141 0
 2455 074e 0B4B     		ldr	r3, .L69
1146:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2456              		.loc 1 1146 0
 2457 0750 0B48     		ldr	r0, .L69+4
1141:Board.c       ****  // Set up to access Index Register (RS == 0)
 2458              		.loc 1 1141 0
 2459 0752 5961     		str	r1, [r3, #20]
1143:Board.c       **** // Delay(2);
 2460              		.loc 1 1143 0
 2461 0754 5C61     		str	r4, [r3, #20]
1146:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2462              		.loc 1 1146 0
 2463 0756 C268     		ldr	r2, [r0, #12]
 2464 0758 02F47F42 		and	r2, r2, #65280
 2465 075c 42F02902 		orr	r2, r2, #41
 2466 0760 C260     		str	r2, [r0, #12]
1147:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2467              		.loc 1 1147 0
 2468 0762 5E61     		str	r6, [r3, #20]
 2469              	.LBE329:
 2470              	.LBE328:
1132:Board.c       ****  Delay(50000);
 2471              		.loc 1 1132 0
 2472 0764 4CF25030 		movw	r0, #50000
 2473              	.LBB331:
 2474              	.LBB330:
1148:Board.c       **** 
 2475              		.loc 1 1148 0
 2476 0768 1E61     		str	r6, [r3, #16]
1151:Board.c       **** // Delay(2);
 2477              		.loc 1 1151 0
 2478 076a 1C61     		str	r4, [r3, #16]
1155:Board.c       ****  
 2479              		.loc 1 1155 0
 2480 076c 1961     		str	r1, [r3, #16]
 2481              	.LVL104:
 2482              	.LBE330:
 2483              	.LBE331:
1132:Board.c       ****  Delay(50000);
 2484              		.loc 1 1132 0
 2485 076e A847     		blx	r5
 2486              	.LVL105:
1133:Board.c       ****  
 2487              		.loc 1 1133 0
 2488 0770 2B46     		mov	r3, r5
1135:Board.c       **** 
 2489              		.loc 1 1135 0
 2490 0772 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 2491              		.cfi_restore 14
 2492              		.cfi_restore 8
 2493              		.cfi_restore 7
 2494              		.cfi_restore 6
 2495              		.cfi_restore 5
 2496              		.cfi_restore 4
 2497              		.cfi_def_cfa_offset 0
1133:Board.c       ****  
 2498              		.loc 1 1133 0
 2499 0776 4CF25030 		movw	r0, #50000
 2500 077a 1847     		bx	r3	@ indirect register sibling call
 2501              	.LVL106:
 2502              	.L70:
 2503              		.align	2
 2504              	.L69:
 2505 077c 00100140 		.word	1073811456
 2506 0780 000C0140 		.word	1073810432
 2507              		.cfi_endproc
 2508              	.LFE39:
 2510              		.section	.text.write_comm,"ax",%progbits
 2511              		.align	1
 2512              		.p2align 2,,3
 2513              		.global	write_comm
 2514              		.syntax unified
 2515              		.thumb
 2516              		.thumb_func
 2517              		.fpu softvfp
 2519              	write_comm:
 2520              	.LFB40:
1139:Board.c       ****  // Set TFT_nCS low
 2521              		.loc 1 1139 0
 2522              		.cfi_startproc
 2523              		@ args = 0, pretend = 0, frame = 0
 2524              		@ frame_needed = 0, uses_anonymous_args = 0
 2525              		@ link register save eliminated.
 2526              	.LVL107:
 2527 0000 70B4     		push	{r4, r5, r6}
 2528              		.cfi_def_cfa_offset 12
 2529              		.cfi_offset 4, -12
 2530              		.cfi_offset 5, -8
 2531              		.cfi_offset 6, -4
1141:Board.c       ****  // Set up to access Index Register (RS == 0)
 2532              		.loc 1 1141 0
 2533 0002 4FF40051 		mov	r1, #8192
1143:Board.c       **** // Delay(2);
 2534              		.loc 1 1143 0
 2535 0006 4FF48044 		mov	r4, #16384
1147:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2536              		.loc 1 1147 0
 2537 000a 4FF40045 		mov	r5, #32768
1141:Board.c       ****  // Set up to access Index Register (RS == 0)
 2538              		.loc 1 1141 0
 2539 000e 074B     		ldr	r3, .L73
1146:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2540              		.loc 1 1146 0
 2541 0010 074E     		ldr	r6, .L73+4
1141:Board.c       ****  // Set up to access Index Register (RS == 0)
 2542              		.loc 1 1141 0
 2543 0012 5961     		str	r1, [r3, #20]
1143:Board.c       **** // Delay(2);
 2544              		.loc 1 1143 0
 2545 0014 5C61     		str	r4, [r3, #20]
1146:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2546              		.loc 1 1146 0
 2547 0016 F268     		ldr	r2, [r6, #12]
 2548 0018 02F47F42 		and	r2, r2, #65280
 2549 001c 1043     		orrs	r0, r0, r2
 2550              	.LVL108:
 2551 001e F060     		str	r0, [r6, #12]
1147:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2552              		.loc 1 1147 0
 2553 0020 5D61     		str	r5, [r3, #20]
1148:Board.c       **** 
 2554              		.loc 1 1148 0
 2555 0022 1D61     		str	r5, [r3, #16]
1151:Board.c       **** // Delay(2);
 2556              		.loc 1 1151 0
 2557 0024 1C61     		str	r4, [r3, #16]
1155:Board.c       ****  
 2558              		.loc 1 1155 0
 2559 0026 1961     		str	r1, [r3, #16]
1157:Board.c       **** 
 2560              		.loc 1 1157 0
 2561 0028 70BC     		pop	{r4, r5, r6}
 2562              		.cfi_restore 6
 2563              		.cfi_restore 5
 2564              		.cfi_restore 4
 2565              		.cfi_def_cfa_offset 0
 2566 002a 7047     		bx	lr
 2567              	.L74:
 2568              		.align	2
 2569              	.L73:
 2570 002c 00100140 		.word	1073811456
 2571 0030 000C0140 		.word	1073810432
 2572              		.cfi_endproc
 2573              	.LFE40:
 2575              		.section	.text.write_data,"ax",%progbits
 2576              		.align	1
 2577              		.p2align 2,,3
 2578              		.global	write_data
 2579              		.syntax unified
 2580              		.thumb
 2581              		.thumb_func
 2582              		.fpu softvfp
 2584              	write_data:
 2585              	.LFB41:
1160:Board.c       ****  // Set TFT_nCS low
 2586              		.loc 1 1160 0
 2587              		.cfi_startproc
 2588              		@ args = 0, pretend = 0, frame = 0
 2589              		@ frame_needed = 0, uses_anonymous_args = 0
 2590              		@ link register save eliminated.
 2591              	.LVL109:
1162:Board.c       **** 
 2592              		.loc 1 1162 0
 2593 0000 4FF40051 		mov	r1, #8192
1165:Board.c       **** 
 2594              		.loc 1 1165 0
 2595 0004 4FF48042 		mov	r2, #16384
1160:Board.c       ****  // Set TFT_nCS low
 2596              		.loc 1 1160 0
 2597 0008 30B4     		push	{r4, r5}
 2598              		.cfi_def_cfa_offset 8
 2599              		.cfi_offset 4, -8
 2600              		.cfi_offset 5, -4
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2601              		.loc 1 1168 0
 2602 000a 4FF40044 		mov	r4, #32768
1162:Board.c       **** 
 2603              		.loc 1 1162 0
 2604 000e 074B     		ldr	r3, .L77
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2605              		.loc 1 1167 0
 2606 0010 074D     		ldr	r5, .L77+4
1162:Board.c       **** 
 2607              		.loc 1 1162 0
 2608 0012 5961     		str	r1, [r3, #20]
1165:Board.c       **** 
 2609              		.loc 1 1165 0
 2610 0014 1A61     		str	r2, [r3, #16]
1167:Board.c       ****  SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2611              		.loc 1 1167 0
 2612 0016 EA68     		ldr	r2, [r5, #12]
 2613 0018 02F47F42 		and	r2, r2, #65280
 2614 001c 1043     		orrs	r0, r0, r2
 2615              	.LVL110:
 2616 001e E860     		str	r0, [r5, #12]
1168:Board.c       ****  SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 2617              		.loc 1 1168 0
 2618 0020 5C61     		str	r4, [r3, #20]
1169:Board.c       **** 
 2619              		.loc 1 1169 0
 2620 0022 1C61     		str	r4, [r3, #16]
 2621              		.loc 1 1172 0
 2622 0024 1961     		str	r1, [r3, #16]
1173:Board.c       ****  
1174:Board.c       **** }
 2623              		.loc 1 1174 0
 2624 0026 30BC     		pop	{r4, r5}
 2625              		.cfi_restore 5
 2626              		.cfi_restore 4
 2627              		.cfi_def_cfa_offset 0
 2628 0028 7047     		bx	lr
 2629              	.L78:
 2630 002a 00BF     		.align	2
 2631              	.L77:
 2632 002c 00100140 		.word	1073811456
 2633 0030 000C0140 		.word	1073810432
 2634              		.cfi_endproc
 2635              	.LFE41:
 2637              		.section	.text.assert_failed,"ax",%progbits
 2638              		.align	1
 2639              		.p2align 2,,3
 2640              		.global	assert_failed
 2641              		.syntax unified
 2642              		.thumb
 2643              		.thumb_func
 2644              		.fpu softvfp
 2646              	assert_failed:
 2647              	.LFB42:
1175:Board.c       **** 
1176:Board.c       **** 
1177:Board.c       **** void assert_failed(U8 * file, U32 line)
1178:Board.c       **** //void assert_failed((U8 *) file, U32 line)
1179:Board.c       **** {
 2648              		.loc 1 1179 0
 2649              		.cfi_startproc
 2650              		@ args = 0, pretend = 0, frame = 0
 2651              		@ frame_needed = 0, uses_anonymous_args = 0
 2652              		@ link register save eliminated.
 2653              	.LVL111:
1180:Board.c       **** }
 2654              		.loc 1 1180 0
 2655 0000 7047     		bx	lr
 2656              		.cfi_endproc
 2657              	.LFE42:
 2659 0002 00BF     		.section	.text.NVIC_Configuration,"ax",%progbits
 2660              		.align	1
 2661              		.p2align 2,,3
 2662              		.global	NVIC_Configuration
 2663              		.syntax unified
 2664              		.thumb
 2665              		.thumb_func
 2666              		.fpu softvfp
 2668              	NVIC_Configuration:
 2669              	.LFB43:
1181:Board.c       **** 
1182:Board.c       **** 
1183:Board.c       **** /**
1184:Board.c       ****   * @brief  Configures the nested vectored interrupt controller.
1185:Board.c       ****   * @param  None
1186:Board.c       ****   * @retval None
1187:Board.c       ****   */
1188:Board.c       **** void NVIC_Configuration(void)
1189:Board.c       **** {
 2670              		.loc 1 1189 0
 2671              		.cfi_startproc
 2672              		@ args = 0, pretend = 0, frame = 8
 2673              		@ frame_needed = 0, uses_anonymous_args = 0
 2674 0000 70B5     		push	{r4, r5, r6, lr}
 2675              		.cfi_def_cfa_offset 16
 2676              		.cfi_offset 4, -16
 2677              		.cfi_offset 5, -12
 2678              		.cfi_offset 6, -8
 2679              		.cfi_offset 14, -4
1190:Board.c       ****   NVIC_InitTypeDef NVIC_InitStructure;
1191:Board.c       **** 
1192:Board.c       **** // NVIC_SetVectorTable(NVIC_VectTab_RAM, 0);
1193:Board.c       ****  NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0);
 2680              		.loc 1 1193 0
 2681 0002 0021     		movs	r1, #0
1189:Board.c       ****   NVIC_InitTypeDef NVIC_InitStructure;
 2682              		.loc 1 1189 0
 2683 0004 82B0     		sub	sp, sp, #8
 2684              		.cfi_def_cfa_offset 24
 2685              		.loc 1 1193 0
 2686 0006 4FF00060 		mov	r0, #134217728
 2687 000a 114B     		ldr	r3, .L82
 2688 000c 9847     		blx	r3
 2689              	.LVL112:
1194:Board.c       **** 
1195:Board.c       **** 
1196:Board.c       ****   // Enable the TIM1 Interrupt 
1197:Board.c       ****   NVIC_InitStructure.NVIC_IRQChannel = TIM1_CC_IRQn;
1198:Board.c       ****   NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 2690              		.loc 1 1198 0
 2691 000e 0026     		movs	r6, #0
1199:Board.c       ****   NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
1200:Board.c       ****   NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 2692              		.loc 1 1200 0
 2693 0010 0125     		movs	r5, #1
1197:Board.c       ****   NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 2694              		.loc 1 1197 0
 2695 0012 1B23     		movs	r3, #27
1201:Board.c       ****   NVIC_Init(&NVIC_InitStructure); 
 2696              		.loc 1 1201 0
 2697 0014 0F4C     		ldr	r4, .L82+4
 2698 0016 01A8     		add	r0, sp, #4
1197:Board.c       ****   NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 2699              		.loc 1 1197 0
 2700 0018 ADF80430 		strh	r3, [sp, #4]	@ movhi
1198:Board.c       ****   NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 2701              		.loc 1 1198 0
 2702 001c 8DF80660 		strb	r6, [sp, #6]
1200:Board.c       ****   NVIC_Init(&NVIC_InitStructure); 
 2703              		.loc 1 1200 0
 2704 0020 8DF80750 		strb	r5, [sp, #7]
 2705              		.loc 1 1201 0
 2706 0024 A047     		blx	r4
 2707              	.LVL113:
1202:Board.c       **** 
1203:Board.c       **** 
1204:Board.c       ****   // Enable the ADC1 Interrupt 
1205:Board.c       ****   NVIC_InitStructure.NVIC_IRQChannel = ADC1_2_IRQn;
 2708              		.loc 1 1205 0
 2709 0026 1223     		movs	r3, #18
1206:Board.c       ****   NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
1207:Board.c       ****   NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
1208:Board.c       ****   NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
1209:Board.c       ****   NVIC_Init(&NVIC_InitStructure); 
 2710              		.loc 1 1209 0
 2711 0028 01A8     		add	r0, sp, #4
1205:Board.c       ****   NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 2712              		.loc 1 1205 0
 2713 002a ADF80430 		strh	r3, [sp, #4]	@ movhi
1206:Board.c       ****   NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 2714              		.loc 1 1206 0
 2715 002e 8DF80660 		strb	r6, [sp, #6]
1208:Board.c       ****   NVIC_Init(&NVIC_InitStructure); 
 2716              		.loc 1 1208 0
 2717 0032 8DF80750 		strb	r5, [sp, #7]
 2718              		.loc 1 1209 0
 2719 0036 A047     		blx	r4
 2720              	.LVL114:
1210:Board.c       ****  
1211:Board.c       ****   // Enable the DMA1 channel1 Interrupt 
1212:Board.c       ****   NVIC_InitStructure.NVIC_IRQChannel = DMA1_Channel1_IRQn;
 2721              		.loc 1 1212 0
 2722 0038 0B23     		movs	r3, #11
1213:Board.c       ****   NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
1214:Board.c       ****   NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
1215:Board.c       ****   NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
1216:Board.c       ****   NVIC_Init(&NVIC_InitStructure);
 2723              		.loc 1 1216 0
 2724 003a 01A8     		add	r0, sp, #4
1213:Board.c       ****   NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 2725              		.loc 1 1213 0
 2726 003c 8DF80660 		strb	r6, [sp, #6]
1215:Board.c       ****   NVIC_Init(&NVIC_InitStructure);
 2727              		.loc 1 1215 0
 2728 0040 8DF80750 		strb	r5, [sp, #7]
1212:Board.c       ****   NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 2729              		.loc 1 1212 0
 2730 0044 ADF80430 		strh	r3, [sp, #4]	@ movhi
 2731              		.loc 1 1216 0
 2732 0048 A047     		blx	r4
 2733              	.LVL115:
1217:Board.c       **** 
1218:Board.c       **** }
 2734              		.loc 1 1218 0
 2735 004a 02B0     		add	sp, sp, #8
 2736              		.cfi_def_cfa_offset 16
 2737              		@ sp needed
 2738 004c 70BD     		pop	{r4, r5, r6, pc}
 2739              	.L83:
 2740 004e 00BF     		.align	2
 2741              	.L82:
 2742 0050 00000000 		.word	NVIC_SetVectorTable
 2743 0054 00000000 		.word	NVIC_Init
 2744              		.cfi_endproc
 2745              	.LFE43:
 2747              		.section	.text.OutputTLvl,"ax",%progbits
 2748              		.align	1
 2749              		.p2align 2,,3
 2750              		.global	OutputTLvl
 2751              		.syntax unified
 2752              		.thumb
 2753              		.thumb_func
 2754              		.fpu softvfp
 2756              	OutputTLvl:
 2757              	.LFB44:
1219:Board.c       **** 
1220:Board.c       **** 
1221:Board.c       **** void	OutputTLvl(void)
1222:Board.c       **** {
 2758              		.loc 1 1222 0
 2759              		.cfi_startproc
 2760              		@ args = 0, pretend = 0, frame = 0
 2761              		@ frame_needed = 0, uses_anonymous_args = 0
 2762 0000 10B5     		push	{r4, lr}
 2763              		.cfi_def_cfa_offset 8
 2764              		.cfi_offset 4, -8
 2765              		.cfi_offset 14, -4
1223:Board.c       ****  TIM4->CCR3 = GetTrigLvl() + GetVPosOfs() + 0x800;
 2766              		.loc 1 1223 0
 2767 0002 064B     		ldr	r3, .L86
 2768 0004 9847     		blx	r3
 2769              	.LVL116:
 2770 0006 064B     		ldr	r3, .L86+4
 2771 0008 0446     		mov	r4, r0
 2772 000a 9847     		blx	r3
 2773              	.LVL117:
 2774 000c 2044     		add	r0, r0, r4
 2775 000e 00F50060 		add	r0, r0, #2048
 2776 0012 044B     		ldr	r3, .L86+8
 2777 0014 80B2     		uxth	r0, r0
 2778 0016 9887     		strh	r0, [r3, #60]	@ movhi
1224:Board.c       **** }
 2779              		.loc 1 1224 0
 2780 0018 10BD     		pop	{r4, pc}
 2781              	.L87:
 2782 001a 00BF     		.align	2
 2783              	.L86:
 2784 001c 00000000 		.word	GetTrigLvl
 2785 0020 00000000 		.word	GetVPosOfs
 2786 0024 00080040 		.word	1073743872
 2787              		.cfi_endproc
 2788              	.LFE44:
 2790              		.comm	TimerKeyScan,2,2
 2791              		.comm	GTimeout,1,1
 2792              		.comm	GTimer,2,2
 2793              		.text
 2794              	.Letext0:
 2795              		.file 2 "/home/bot-10/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/machine/_default
 2796              		.file 3 "/home/bot-10/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_stdint.h"
 2797              		.file 4 "./Libraries/CMSIS/CM3/CoreSupport/core_cm3.h"
 2798              		.file 5 "./Libraries/CMSIS/CM3/CoreSupport/system_stm32f10x.h"
 2799              		.file 6 "./Libraries/CMSIS/CM3/CoreSupport/stm32f10x.h"
 2800              		.file 7 "./Libraries/STM32F10x_StdPeriph_Driver/inc/stm32f10x_usart.h"
 2801              		.file 8 "./Libraries/STM32F10x_StdPeriph_Driver/inc/misc.h"
 2802              		.file 9 "Common.h"
 2803              		.file 10 "Board.h"
 2804              		.file 11 "libdso138.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 Board.c
     /tmp/ccElRNUY.s:16     .text.Clock_Init:0000000000000000 $t
     /tmp/ccElRNUY.s:24     .text.Clock_Init:0000000000000000 Clock_Init
     /tmp/ccElRNUY.s:110    .text.Clock_Init:000000000000005c $d
     /tmp/ccElRNUY.s:118    .text.Port_Init:0000000000000000 $t
     /tmp/ccElRNUY.s:126    .text.Port_Init:0000000000000000 Port_Init
     /tmp/ccElRNUY.s:195    .text.Port_Init:0000000000000048 $d
     /tmp/ccElRNUY.s:206    .text.USART1_Init:0000000000000000 $t
     /tmp/ccElRNUY.s:214    .text.USART1_Init:0000000000000000 USART1_Init
     /tmp/ccElRNUY.s:264    .text.USART1_Init:0000000000000030 $d
     /tmp/ccElRNUY.s:271    .text.UartPutc:0000000000000000 $t
     /tmp/ccElRNUY.s:279    .text.UartPutc:0000000000000000 UartPutc
     /tmp/ccElRNUY.s:323    .text.UartPutc:0000000000000020 $d
     /tmp/ccElRNUY.s:329    .text.uputs:0000000000000000 $t
     /tmp/ccElRNUY.s:337    .text.uputs:0000000000000000 uputs
     /tmp/ccElRNUY.s:376    .text.uputs:000000000000001c $d
     /tmp/ccElRNUY.s:381    .text.TIM3_Init:0000000000000000 $t
     /tmp/ccElRNUY.s:389    .text.TIM3_Init:0000000000000000 TIM3_Init
     /tmp/ccElRNUY.s:469    .text.TIM3_Init:000000000000004c $d
     /tmp/ccElRNUY.s:474    .text.TIM4_Init:0000000000000000 $t
     /tmp/ccElRNUY.s:482    .text.TIM4_Init:0000000000000000 TIM4_Init
     /tmp/ccElRNUY.s:562    .text.TIM4_Init:0000000000000054 $d
     /tmp/ccElRNUY.s:567    .text.SysTick_Init:0000000000000000 $t
     /tmp/ccElRNUY.s:575    .text.SysTick_Init:0000000000000000 SysTick_Init
     /tmp/ccElRNUY.s:601    .text.SysTick_Init:0000000000000010 $d
     /tmp/ccElRNUY.s:607    .text.ADC2_Init:0000000000000000 $t
     /tmp/ccElRNUY.s:615    .text.ADC2_Init:0000000000000000 ADC2_Init
     /tmp/ccElRNUY.s:678    .text.ADC2_Init:0000000000000040 $d
     /tmp/ccElRNUY.s:683    .text.ADC_Poll:0000000000000000 $t
     /tmp/ccElRNUY.s:691    .text.ADC_Poll:0000000000000000 ADC_Poll
     /tmp/ccElRNUY.s:720    .text.TFT_Init_Ili9341:0000000000000000 $t
     /tmp/ccElRNUY.s:728    .text.TFT_Init_Ili9341:0000000000000000 TFT_Init_Ili9341
     /tmp/ccElRNUY.s:1324   .text.TFT_Init_Ili9341:0000000000000278 $d
     /tmp/ccElRNUY.s:1329   .text.TFT_Init_Ili9341:0000000000000284 $t
     /tmp/ccElRNUY.s:2505   .text.TFT_Init_Ili9341:000000000000077c $d
     /tmp/ccElRNUY.s:2511   .text.write_comm:0000000000000000 $t
     /tmp/ccElRNUY.s:2519   .text.write_comm:0000000000000000 write_comm
     /tmp/ccElRNUY.s:2570   .text.write_comm:000000000000002c $d
     /tmp/ccElRNUY.s:2576   .text.write_data:0000000000000000 $t
     /tmp/ccElRNUY.s:2584   .text.write_data:0000000000000000 write_data
     /tmp/ccElRNUY.s:2632   .text.write_data:000000000000002c $d
     /tmp/ccElRNUY.s:2638   .text.assert_failed:0000000000000000 $t
     /tmp/ccElRNUY.s:2646   .text.assert_failed:0000000000000000 assert_failed
     /tmp/ccElRNUY.s:2660   .text.NVIC_Configuration:0000000000000000 $t
     /tmp/ccElRNUY.s:2668   .text.NVIC_Configuration:0000000000000000 NVIC_Configuration
     /tmp/ccElRNUY.s:2742   .text.NVIC_Configuration:0000000000000050 $d
     /tmp/ccElRNUY.s:2748   .text.OutputTLvl:0000000000000000 $t
     /tmp/ccElRNUY.s:2756   .text.OutputTLvl:0000000000000000 OutputTLvl
     /tmp/ccElRNUY.s:2784   .text.OutputTLvl:000000000000001c $d
                            *COM*:0000000000000002 TimerKeyScan
                            *COM*:0000000000000001 GTimeout
                            *COM*:0000000000000002 GTimer

UNDEFINED SYMBOLS
USART_Init
USART_Cmd
USART_GetFlagStatus
USART_SendData
Delay
NVIC_SetVectorTable
NVIC_Init
GetTrigLvl
GetVPosOfs
