
FLASH_RUN/113-13801-037.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .flashtext    00000000  0800010c  0800010c  00020180  2**0
                  CONTENTS
  2 .text         00007fbc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .data         00000180  20000000  080080cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00002570  20000180  0800824c  00020180  2**2
                  ALLOC
  5 .bss.DataVar  00000002  200026f0  0800a7bc  00020180  2**1
                  ALLOC
  6 ._usrstack    00000102  200026f2  0800a7be  00020180  2**0
                  ALLOC
  7 .comment      000000a8  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
  8 .ARM.attributes 00000031  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000680  00000000  00000000  00020260  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000902f  00000000  00000000  000208e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001d08  00000000  00000000  0002990f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00003b56  00000000  00000000  0002b617  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000017ec  00000000  00000000  0002f170  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002393  00000000  00000000  0003095c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000445c  00000000  00000000  00032cef  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000006d8  00000000  00000000  00037150  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <SetWindow1>:
 8000110:	b590      	push	{r4, r7, lr}
 8000112:	b083      	sub	sp, #12
 8000114:	af00      	add	r7, sp, #0
 8000116:	1c04      	adds	r4, r0, #0
 8000118:	1c08      	adds	r0, r1, #0
 800011a:	1c11      	adds	r1, r2, #0
 800011c:	1c1a      	adds	r2, r3, #0
 800011e:	1dbb      	adds	r3, r7, #6
 8000120:	801c      	strh	r4, [r3, #0]
 8000122:	1d3b      	adds	r3, r7, #4
 8000124:	8018      	strh	r0, [r3, #0]
 8000126:	1cbb      	adds	r3, r7, #2
 8000128:	8019      	strh	r1, [r3, #0]
 800012a:	1c3b      	adds	r3, r7, #0
 800012c:	801a      	strh	r2, [r3, #0]
 800012e:	202a      	movs	r0, #42	; 0x2a
 8000130:	f004 fd1a 	bl	8004b68 <write_comm>
 8000134:	1dbb      	adds	r3, r7, #6
 8000136:	881b      	ldrh	r3, [r3, #0]
 8000138:	0a1b      	lsrs	r3, r3, #8
 800013a:	041b      	lsls	r3, r3, #16
 800013c:	0c1b      	lsrs	r3, r3, #16
 800013e:	1c18      	adds	r0, r3, #0
 8000140:	f004 fd2c 	bl	8004b9c <write_data>
 8000144:	1dbb      	adds	r3, r7, #6
 8000146:	881b      	ldrh	r3, [r3, #0]
 8000148:	1c18      	adds	r0, r3, #0
 800014a:	f004 fd27 	bl	8004b9c <write_data>
 800014e:	1dba      	adds	r2, r7, #6
 8000150:	1d3b      	adds	r3, r7, #4
 8000152:	8812      	ldrh	r2, [r2, #0]
 8000154:	881b      	ldrh	r3, [r3, #0]
 8000156:	18d3      	adds	r3, r2, r3
 8000158:	041b      	lsls	r3, r3, #16
 800015a:	0c1a      	lsrs	r2, r3, #16
 800015c:	1dbb      	adds	r3, r7, #6
 800015e:	3a01      	subs	r2, #1
 8000160:	801a      	strh	r2, [r3, #0]
 8000162:	1dbb      	adds	r3, r7, #6
 8000164:	881b      	ldrh	r3, [r3, #0]
 8000166:	0a1b      	lsrs	r3, r3, #8
 8000168:	041b      	lsls	r3, r3, #16
 800016a:	0c1b      	lsrs	r3, r3, #16
 800016c:	1c18      	adds	r0, r3, #0
 800016e:	f004 fd15 	bl	8004b9c <write_data>
 8000172:	1dbb      	adds	r3, r7, #6
 8000174:	881b      	ldrh	r3, [r3, #0]
 8000176:	1c18      	adds	r0, r3, #0
 8000178:	f004 fd10 	bl	8004b9c <write_data>
 800017c:	202b      	movs	r0, #43	; 0x2b
 800017e:	f004 fcf3 	bl	8004b68 <write_comm>
 8000182:	1cbb      	adds	r3, r7, #2
 8000184:	881b      	ldrh	r3, [r3, #0]
 8000186:	0a1b      	lsrs	r3, r3, #8
 8000188:	041b      	lsls	r3, r3, #16
 800018a:	0c1b      	lsrs	r3, r3, #16
 800018c:	1c18      	adds	r0, r3, #0
 800018e:	f004 fd05 	bl	8004b9c <write_data>
 8000192:	1cbb      	adds	r3, r7, #2
 8000194:	881b      	ldrh	r3, [r3, #0]
 8000196:	1c18      	adds	r0, r3, #0
 8000198:	f004 fd00 	bl	8004b9c <write_data>
 800019c:	1cba      	adds	r2, r7, #2
 800019e:	1c3b      	adds	r3, r7, #0
 80001a0:	8812      	ldrh	r2, [r2, #0]
 80001a2:	881b      	ldrh	r3, [r3, #0]
 80001a4:	18d3      	adds	r3, r2, r3
 80001a6:	041b      	lsls	r3, r3, #16
 80001a8:	0c1a      	lsrs	r2, r3, #16
 80001aa:	1cbb      	adds	r3, r7, #2
 80001ac:	3a01      	subs	r2, #1
 80001ae:	801a      	strh	r2, [r3, #0]
 80001b0:	1cbb      	adds	r3, r7, #2
 80001b2:	881b      	ldrh	r3, [r3, #0]
 80001b4:	0a1b      	lsrs	r3, r3, #8
 80001b6:	041b      	lsls	r3, r3, #16
 80001b8:	0c1b      	lsrs	r3, r3, #16
 80001ba:	1c18      	adds	r0, r3, #0
 80001bc:	f004 fcee 	bl	8004b9c <write_data>
 80001c0:	1cbb      	adds	r3, r7, #2
 80001c2:	881b      	ldrh	r3, [r3, #0]
 80001c4:	1c18      	adds	r0, r3, #0
 80001c6:	f004 fce9 	bl	8004b9c <write_data>
 80001ca:	46bd      	mov	sp, r7
 80001cc:	b003      	add	sp, #12
 80001ce:	bc90      	pop	{r4, r7}
 80001d0:	bc01      	pop	{r0}
 80001d2:	4700      	bx	r0

080001d4 <PutcGenic1>:
 80001d4:	b590      	push	{r4, r7, lr}
 80001d6:	b087      	sub	sp, #28
 80001d8:	af00      	add	r7, sp, #0
 80001da:	1c04      	adds	r4, r0, #0
 80001dc:	1c08      	adds	r0, r1, #0
 80001de:	1c11      	adds	r1, r2, #0
 80001e0:	1c1a      	adds	r2, r3, #0
 80001e2:	1dbb      	adds	r3, r7, #6
 80001e4:	801c      	strh	r4, [r3, #0]
 80001e6:	1d3b      	adds	r3, r7, #4
 80001e8:	8018      	strh	r0, [r3, #0]
 80001ea:	1cfb      	adds	r3, r7, #3
 80001ec:	7019      	strb	r1, [r3, #0]
 80001ee:	1c3b      	adds	r3, r7, #0
 80001f0:	801a      	strh	r2, [r3, #0]
 80001f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80001f4:	681a      	ldr	r2, [r3, #0]
 80001f6:	1cfb      	adds	r3, r7, #3
 80001f8:	7819      	ldrb	r1, [r3, #0]
 80001fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80001fc:	7a1b      	ldrb	r3, [r3, #8]
 80001fe:	1ac9      	subs	r1, r1, r3
 8000200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000202:	791b      	ldrb	r3, [r3, #4]
 8000204:	3307      	adds	r3, #7
 8000206:	2b00      	cmp	r3, #0
 8000208:	da00      	bge.n	800020c <PutcGenic1+0x38>
 800020a:	3307      	adds	r3, #7
 800020c:	10db      	asrs	r3, r3, #3
 800020e:	434b      	muls	r3, r1
 8000210:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000212:	7949      	ldrb	r1, [r1, #5]
 8000214:	434b      	muls	r3, r1
 8000216:	18d3      	adds	r3, r2, r3
 8000218:	613b      	str	r3, [r7, #16]
 800021a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800021c:	791b      	ldrb	r3, [r3, #4]
 800021e:	1c19      	adds	r1, r3, #0
 8000220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000222:	795b      	ldrb	r3, [r3, #5]
 8000224:	1dba      	adds	r2, r7, #6
 8000226:	8810      	ldrh	r0, [r2, #0]
 8000228:	1d3a      	adds	r2, r7, #4
 800022a:	8812      	ldrh	r2, [r2, #0]
 800022c:	f7ff ff70 	bl	8000110 <SetWindow1>
 8000230:	4b4d      	ldr	r3, [pc, #308]	; (8000368 <PutcGenic1+0x194>)
 8000232:	2280      	movs	r2, #128	; 0x80
 8000234:	0192      	lsls	r2, r2, #6
 8000236:	615a      	str	r2, [r3, #20]
 8000238:	4b4b      	ldr	r3, [pc, #300]	; (8000368 <PutcGenic1+0x194>)
 800023a:	2280      	movs	r2, #128	; 0x80
 800023c:	01d2      	lsls	r2, r2, #7
 800023e:	615a      	str	r2, [r3, #20]
 8000240:	4b4a      	ldr	r3, [pc, #296]	; (800036c <PutcGenic1+0x198>)
 8000242:	4a4a      	ldr	r2, [pc, #296]	; (800036c <PutcGenic1+0x198>)
 8000244:	68d1      	ldr	r1, [r2, #12]
 8000246:	22ff      	movs	r2, #255	; 0xff
 8000248:	0212      	lsls	r2, r2, #8
 800024a:	400a      	ands	r2, r1
 800024c:	212c      	movs	r1, #44	; 0x2c
 800024e:	430a      	orrs	r2, r1
 8000250:	60da      	str	r2, [r3, #12]
 8000252:	4b45      	ldr	r3, [pc, #276]	; (8000368 <PutcGenic1+0x194>)
 8000254:	2280      	movs	r2, #128	; 0x80
 8000256:	0212      	lsls	r2, r2, #8
 8000258:	615a      	str	r2, [r3, #20]
 800025a:	4b43      	ldr	r3, [pc, #268]	; (8000368 <PutcGenic1+0x194>)
 800025c:	2280      	movs	r2, #128	; 0x80
 800025e:	0212      	lsls	r2, r2, #8
 8000260:	611a      	str	r2, [r3, #16]
 8000262:	4b41      	ldr	r3, [pc, #260]	; (8000368 <PutcGenic1+0x194>)
 8000264:	2280      	movs	r2, #128	; 0x80
 8000266:	01d2      	lsls	r2, r2, #7
 8000268:	611a      	str	r2, [r3, #16]
 800026a:	4b41      	ldr	r3, [pc, #260]	; (8000370 <PutcGenic1+0x19c>)
 800026c:	4a41      	ldr	r2, [pc, #260]	; (8000374 <PutcGenic1+0x1a0>)
 800026e:	801a      	strh	r2, [r3, #0]
 8000270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000272:	791b      	ldrb	r3, [r3, #4]
 8000274:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000276:	7952      	ldrb	r2, [r2, #5]
 8000278:	4353      	muls	r3, r2
 800027a:	2b00      	cmp	r3, #0
 800027c:	da00      	bge.n	8000280 <PutcGenic1+0xac>
 800027e:	3307      	adds	r3, #7
 8000280:	10db      	asrs	r3, r3, #3
 8000282:	1c1a      	adds	r2, r3, #0
 8000284:	1c3b      	adds	r3, r7, #0
 8000286:	3314      	adds	r3, #20
 8000288:	801a      	strh	r2, [r3, #0]
 800028a:	e05f      	b.n	800034c <PutcGenic1+0x178>
 800028c:	1c3b      	adds	r3, r7, #0
 800028e:	3317      	adds	r3, #23
 8000290:	693a      	ldr	r2, [r7, #16]
 8000292:	7812      	ldrb	r2, [r2, #0]
 8000294:	701a      	strb	r2, [r3, #0]
 8000296:	1c3b      	adds	r3, r7, #0
 8000298:	3316      	adds	r3, #22
 800029a:	2208      	movs	r2, #8
 800029c:	701a      	strb	r2, [r3, #0]
 800029e:	e046      	b.n	800032e <PutcGenic1+0x15a>
 80002a0:	1c3b      	adds	r3, r7, #0
 80002a2:	3317      	adds	r3, #23
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	061b      	lsls	r3, r3, #24
 80002a8:	161b      	asrs	r3, r3, #24
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	da02      	bge.n	80002b4 <PutcGenic1+0xe0>
 80002ae:	1c3b      	adds	r3, r7, #0
 80002b0:	881b      	ldrh	r3, [r3, #0]
 80002b2:	e002      	b.n	80002ba <PutcGenic1+0xe6>
 80002b4:	1c3b      	adds	r3, r7, #0
 80002b6:	3328      	adds	r3, #40	; 0x28
 80002b8:	881b      	ldrh	r3, [r3, #0]
 80002ba:	1c3a      	adds	r2, r7, #0
 80002bc:	320e      	adds	r2, #14
 80002be:	8013      	strh	r3, [r2, #0]
 80002c0:	4b2a      	ldr	r3, [pc, #168]	; (800036c <PutcGenic1+0x198>)
 80002c2:	4a2a      	ldr	r2, [pc, #168]	; (800036c <PutcGenic1+0x198>)
 80002c4:	68d1      	ldr	r1, [r2, #12]
 80002c6:	22ff      	movs	r2, #255	; 0xff
 80002c8:	0212      	lsls	r2, r2, #8
 80002ca:	4011      	ands	r1, r2
 80002cc:	1c3a      	adds	r2, r7, #0
 80002ce:	320e      	adds	r2, #14
 80002d0:	8812      	ldrh	r2, [r2, #0]
 80002d2:	0a12      	lsrs	r2, r2, #8
 80002d4:	0412      	lsls	r2, r2, #16
 80002d6:	0c12      	lsrs	r2, r2, #16
 80002d8:	430a      	orrs	r2, r1
 80002da:	60da      	str	r2, [r3, #12]
 80002dc:	4b22      	ldr	r3, [pc, #136]	; (8000368 <PutcGenic1+0x194>)
 80002de:	2280      	movs	r2, #128	; 0x80
 80002e0:	0212      	lsls	r2, r2, #8
 80002e2:	615a      	str	r2, [r3, #20]
 80002e4:	4b20      	ldr	r3, [pc, #128]	; (8000368 <PutcGenic1+0x194>)
 80002e6:	2280      	movs	r2, #128	; 0x80
 80002e8:	0212      	lsls	r2, r2, #8
 80002ea:	611a      	str	r2, [r3, #16]
 80002ec:	4b1f      	ldr	r3, [pc, #124]	; (800036c <PutcGenic1+0x198>)
 80002ee:	4a1f      	ldr	r2, [pc, #124]	; (800036c <PutcGenic1+0x198>)
 80002f0:	68d1      	ldr	r1, [r2, #12]
 80002f2:	22ff      	movs	r2, #255	; 0xff
 80002f4:	0212      	lsls	r2, r2, #8
 80002f6:	4011      	ands	r1, r2
 80002f8:	1c3a      	adds	r2, r7, #0
 80002fa:	320e      	adds	r2, #14
 80002fc:	8812      	ldrh	r2, [r2, #0]
 80002fe:	430a      	orrs	r2, r1
 8000300:	60da      	str	r2, [r3, #12]
 8000302:	4b19      	ldr	r3, [pc, #100]	; (8000368 <PutcGenic1+0x194>)
 8000304:	2280      	movs	r2, #128	; 0x80
 8000306:	0212      	lsls	r2, r2, #8
 8000308:	615a      	str	r2, [r3, #20]
 800030a:	4b17      	ldr	r3, [pc, #92]	; (8000368 <PutcGenic1+0x194>)
 800030c:	2280      	movs	r2, #128	; 0x80
 800030e:	0212      	lsls	r2, r2, #8
 8000310:	611a      	str	r2, [r3, #16]
 8000312:	1c3b      	adds	r3, r7, #0
 8000314:	3317      	adds	r3, #23
 8000316:	1c3a      	adds	r2, r7, #0
 8000318:	3217      	adds	r2, #23
 800031a:	7812      	ldrb	r2, [r2, #0]
 800031c:	0052      	lsls	r2, r2, #1
 800031e:	701a      	strb	r2, [r3, #0]
 8000320:	1c3b      	adds	r3, r7, #0
 8000322:	3316      	adds	r3, #22
 8000324:	1c3a      	adds	r2, r7, #0
 8000326:	3216      	adds	r2, #22
 8000328:	7812      	ldrb	r2, [r2, #0]
 800032a:	3a01      	subs	r2, #1
 800032c:	701a      	strb	r2, [r3, #0]
 800032e:	1c3b      	adds	r3, r7, #0
 8000330:	3316      	adds	r3, #22
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	2b00      	cmp	r3, #0
 8000336:	d1b3      	bne.n	80002a0 <PutcGenic1+0xcc>
 8000338:	693b      	ldr	r3, [r7, #16]
 800033a:	3301      	adds	r3, #1
 800033c:	613b      	str	r3, [r7, #16]
 800033e:	1c3b      	adds	r3, r7, #0
 8000340:	3314      	adds	r3, #20
 8000342:	1c3a      	adds	r2, r7, #0
 8000344:	3214      	adds	r2, #20
 8000346:	8812      	ldrh	r2, [r2, #0]
 8000348:	3a01      	subs	r2, #1
 800034a:	801a      	strh	r2, [r3, #0]
 800034c:	1c3b      	adds	r3, r7, #0
 800034e:	3314      	adds	r3, #20
 8000350:	881b      	ldrh	r3, [r3, #0]
 8000352:	2b00      	cmp	r3, #0
 8000354:	d19a      	bne.n	800028c <PutcGenic1+0xb8>
 8000356:	4b04      	ldr	r3, [pc, #16]	; (8000368 <PutcGenic1+0x194>)
 8000358:	2280      	movs	r2, #128	; 0x80
 800035a:	0192      	lsls	r2, r2, #6
 800035c:	611a      	str	r2, [r3, #16]
 800035e:	46bd      	mov	sp, r7
 8000360:	b007      	add	sp, #28
 8000362:	bc90      	pop	{r4, r7}
 8000364:	bc01      	pop	{r0}
 8000366:	4700      	bx	r0
 8000368:	40011000 	.word	0x40011000
 800036c:	40010c00 	.word	0x40010c00
 8000370:	20000182 	.word	0x20000182
 8000374:	ffffec4a 	.word	0xffffec4a

08000378 <DrawRect>:
 8000378:	b590      	push	{r4, r7, lr}
 800037a:	b085      	sub	sp, #20
 800037c:	af02      	add	r7, sp, #8
 800037e:	1c04      	adds	r4, r0, #0
 8000380:	1c08      	adds	r0, r1, #0
 8000382:	1c11      	adds	r1, r2, #0
 8000384:	1c1a      	adds	r2, r3, #0
 8000386:	1dbb      	adds	r3, r7, #6
 8000388:	801c      	strh	r4, [r3, #0]
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	8018      	strh	r0, [r3, #0]
 800038e:	1cbb      	adds	r3, r7, #2
 8000390:	8019      	strh	r1, [r3, #0]
 8000392:	1c3b      	adds	r3, r7, #0
 8000394:	801a      	strh	r2, [r3, #0]
 8000396:	1cbb      	adds	r3, r7, #2
 8000398:	881b      	ldrh	r3, [r3, #0]
 800039a:	3b01      	subs	r3, #1
 800039c:	041b      	lsls	r3, r3, #16
 800039e:	0c1b      	lsrs	r3, r3, #16
 80003a0:	041b      	lsls	r3, r3, #16
 80003a2:	0c1b      	lsrs	r3, r3, #16
 80003a4:	1dba      	adds	r2, r7, #6
 80003a6:	2000      	movs	r0, #0
 80003a8:	5e11      	ldrsh	r1, [r2, r0]
 80003aa:	1d3a      	adds	r2, r7, #4
 80003ac:	2000      	movs	r0, #0
 80003ae:	5e12      	ldrsh	r2, [r2, r0]
 80003b0:	041b      	lsls	r3, r3, #16
 80003b2:	141b      	asrs	r3, r3, #16
 80003b4:	1c38      	adds	r0, r7, #0
 80003b6:	3018      	adds	r0, #24
 80003b8:	8800      	ldrh	r0, [r0, #0]
 80003ba:	9000      	str	r0, [sp, #0]
 80003bc:	1c08      	adds	r0, r1, #0
 80003be:	1c11      	adds	r1, r2, #0
 80003c0:	1c1a      	adds	r2, r3, #0
 80003c2:	2301      	movs	r3, #1
 80003c4:	f004 fc86 	bl	8004cd4 <FillRect>
 80003c8:	1d3b      	adds	r3, r7, #4
 80003ca:	881a      	ldrh	r2, [r3, #0]
 80003cc:	1c3b      	adds	r3, r7, #0
 80003ce:	881b      	ldrh	r3, [r3, #0]
 80003d0:	18d3      	adds	r3, r2, r3
 80003d2:	041b      	lsls	r3, r3, #16
 80003d4:	0c1b      	lsrs	r3, r3, #16
 80003d6:	3b01      	subs	r3, #1
 80003d8:	041b      	lsls	r3, r3, #16
 80003da:	0c1b      	lsrs	r3, r3, #16
 80003dc:	041b      	lsls	r3, r3, #16
 80003de:	0c1b      	lsrs	r3, r3, #16
 80003e0:	1dba      	adds	r2, r7, #6
 80003e2:	2000      	movs	r0, #0
 80003e4:	5e11      	ldrsh	r1, [r2, r0]
 80003e6:	041b      	lsls	r3, r3, #16
 80003e8:	141b      	asrs	r3, r3, #16
 80003ea:	1cba      	adds	r2, r7, #2
 80003ec:	2000      	movs	r0, #0
 80003ee:	5e12      	ldrsh	r2, [r2, r0]
 80003f0:	1c38      	adds	r0, r7, #0
 80003f2:	3018      	adds	r0, #24
 80003f4:	8800      	ldrh	r0, [r0, #0]
 80003f6:	9000      	str	r0, [sp, #0]
 80003f8:	1c08      	adds	r0, r1, #0
 80003fa:	1c19      	adds	r1, r3, #0
 80003fc:	2301      	movs	r3, #1
 80003fe:	f004 fc69 	bl	8004cd4 <FillRect>
 8000402:	1c3b      	adds	r3, r7, #0
 8000404:	881b      	ldrh	r3, [r3, #0]
 8000406:	3b01      	subs	r3, #1
 8000408:	041b      	lsls	r3, r3, #16
 800040a:	0c1b      	lsrs	r3, r3, #16
 800040c:	041b      	lsls	r3, r3, #16
 800040e:	0c1b      	lsrs	r3, r3, #16
 8000410:	1dba      	adds	r2, r7, #6
 8000412:	2000      	movs	r0, #0
 8000414:	5e11      	ldrsh	r1, [r2, r0]
 8000416:	1d3a      	adds	r2, r7, #4
 8000418:	2000      	movs	r0, #0
 800041a:	5e12      	ldrsh	r2, [r2, r0]
 800041c:	041b      	lsls	r3, r3, #16
 800041e:	141b      	asrs	r3, r3, #16
 8000420:	1c38      	adds	r0, r7, #0
 8000422:	3018      	adds	r0, #24
 8000424:	8800      	ldrh	r0, [r0, #0]
 8000426:	9000      	str	r0, [sp, #0]
 8000428:	1c08      	adds	r0, r1, #0
 800042a:	1c11      	adds	r1, r2, #0
 800042c:	2201      	movs	r2, #1
 800042e:	f004 fc51 	bl	8004cd4 <FillRect>
 8000432:	1dbb      	adds	r3, r7, #6
 8000434:	881a      	ldrh	r2, [r3, #0]
 8000436:	1cbb      	adds	r3, r7, #2
 8000438:	881b      	ldrh	r3, [r3, #0]
 800043a:	18d3      	adds	r3, r2, r3
 800043c:	041b      	lsls	r3, r3, #16
 800043e:	0c1b      	lsrs	r3, r3, #16
 8000440:	3b01      	subs	r3, #1
 8000442:	041b      	lsls	r3, r3, #16
 8000444:	0c1b      	lsrs	r3, r3, #16
 8000446:	041b      	lsls	r3, r3, #16
 8000448:	0c1a      	lsrs	r2, r3, #16
 800044a:	1c3b      	adds	r3, r7, #0
 800044c:	881b      	ldrh	r3, [r3, #0]
 800044e:	3b01      	subs	r3, #1
 8000450:	041b      	lsls	r3, r3, #16
 8000452:	0c1b      	lsrs	r3, r3, #16
 8000454:	041b      	lsls	r3, r3, #16
 8000456:	0c1b      	lsrs	r3, r3, #16
 8000458:	0412      	lsls	r2, r2, #16
 800045a:	1412      	asrs	r2, r2, #16
 800045c:	1d39      	adds	r1, r7, #4
 800045e:	2000      	movs	r0, #0
 8000460:	5e09      	ldrsh	r1, [r1, r0]
 8000462:	041b      	lsls	r3, r3, #16
 8000464:	141b      	asrs	r3, r3, #16
 8000466:	1c38      	adds	r0, r7, #0
 8000468:	3018      	adds	r0, #24
 800046a:	8800      	ldrh	r0, [r0, #0]
 800046c:	9000      	str	r0, [sp, #0]
 800046e:	1c10      	adds	r0, r2, #0
 8000470:	2201      	movs	r2, #1
 8000472:	f004 fc2f 	bl	8004cd4 <FillRect>
 8000476:	46bd      	mov	sp, r7
 8000478:	b003      	add	sp, #12
 800047a:	bc90      	pop	{r4, r7}
 800047c:	bc01      	pop	{r0}
 800047e:	4700      	bx	r0

08000480 <TIM1_Init>:
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
 8000484:	4b20      	ldr	r3, [pc, #128]	; (8000508 <TIM1_Init+0x88>)
 8000486:	2280      	movs	r2, #128	; 0x80
 8000488:	801a      	strh	r2, [r3, #0]
 800048a:	4b1f      	ldr	r3, [pc, #124]	; (8000508 <TIM1_Init+0x88>)
 800048c:	2200      	movs	r2, #0
 800048e:	809a      	strh	r2, [r3, #4]
 8000490:	4b1d      	ldr	r3, [pc, #116]	; (8000508 <TIM1_Init+0x88>)
 8000492:	2217      	movs	r2, #23
 8000494:	811a      	strh	r2, [r3, #8]
 8000496:	4b1c      	ldr	r3, [pc, #112]	; (8000508 <TIM1_Init+0x88>)
 8000498:	2200      	movs	r2, #0
 800049a:	819a      	strh	r2, [r3, #12]
 800049c:	4b1a      	ldr	r3, [pc, #104]	; (8000508 <TIM1_Init+0x88>)
 800049e:	2200      	movs	r2, #0
 80004a0:	821a      	strh	r2, [r3, #16]
 80004a2:	4b19      	ldr	r3, [pc, #100]	; (8000508 <TIM1_Init+0x88>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	829a      	strh	r2, [r3, #20]
 80004a8:	4b17      	ldr	r3, [pc, #92]	; (8000508 <TIM1_Init+0x88>)
 80004aa:	4a18      	ldr	r2, [pc, #96]	; (800050c <TIM1_Init+0x8c>)
 80004ac:	831a      	strh	r2, [r3, #24]
 80004ae:	4b16      	ldr	r3, [pc, #88]	; (8000508 <TIM1_Init+0x88>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	839a      	strh	r2, [r3, #28]
 80004b4:	4b14      	ldr	r3, [pc, #80]	; (8000508 <TIM1_Init+0x88>)
 80004b6:	2211      	movs	r2, #17
 80004b8:	841a      	strh	r2, [r3, #32]
 80004ba:	4b13      	ldr	r3, [pc, #76]	; (8000508 <TIM1_Init+0x88>)
 80004bc:	2200      	movs	r2, #0
 80004be:	849a      	strh	r2, [r3, #36]	; 0x24
 80004c0:	4b11      	ldr	r3, [pc, #68]	; (8000508 <TIM1_Init+0x88>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	851a      	strh	r2, [r3, #40]	; 0x28
 80004c6:	4b10      	ldr	r3, [pc, #64]	; (8000508 <TIM1_Init+0x88>)
 80004c8:	2201      	movs	r2, #1
 80004ca:	4252      	negs	r2, r2
 80004cc:	859a      	strh	r2, [r3, #44]	; 0x2c
 80004ce:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <TIM1_Init+0x88>)
 80004d0:	4a0f      	ldr	r2, [pc, #60]	; (8000510 <TIM1_Init+0x90>)
 80004d2:	869a      	strh	r2, [r3, #52]	; 0x34
 80004d4:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <TIM1_Init+0x88>)
 80004d6:	2202      	movs	r2, #2
 80004d8:	871a      	strh	r2, [r3, #56]	; 0x38
 80004da:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <TIM1_Init+0x88>)
 80004dc:	2200      	movs	r2, #0
 80004de:	879a      	strh	r2, [r3, #60]	; 0x3c
 80004e0:	4a09      	ldr	r2, [pc, #36]	; (8000508 <TIM1_Init+0x88>)
 80004e2:	2340      	movs	r3, #64	; 0x40
 80004e4:	2100      	movs	r1, #0
 80004e6:	52d1      	strh	r1, [r2, r3]
 80004e8:	4a07      	ldr	r2, [pc, #28]	; (8000508 <TIM1_Init+0x88>)
 80004ea:	2348      	movs	r3, #72	; 0x48
 80004ec:	2100      	movs	r1, #0
 80004ee:	52d1      	strh	r1, [r2, r3]
 80004f0:	4a05      	ldr	r2, [pc, #20]	; (8000508 <TIM1_Init+0x88>)
 80004f2:	234c      	movs	r3, #76	; 0x4c
 80004f4:	2100      	movs	r1, #0
 80004f6:	52d1      	strh	r1, [r2, r3]
 80004f8:	4b03      	ldr	r3, [pc, #12]	; (8000508 <TIM1_Init+0x88>)
 80004fa:	2281      	movs	r2, #129	; 0x81
 80004fc:	801a      	strh	r2, [r3, #0]
 80004fe:	46bd      	mov	sp, r7
 8000500:	bc80      	pop	{r7}
 8000502:	bc01      	pop	{r0}
 8000504:	4700      	bx	r0
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	40012c00 	.word	0x40012c00
 800050c:	00003001 	.word	0x00003001
 8000510:	00001388 	.word	0x00001388

08000514 <TIM2_Init>:
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	05db      	lsls	r3, r3, #23
 800051c:	2280      	movs	r2, #128	; 0x80
 800051e:	801a      	strh	r2, [r3, #0]
 8000520:	2380      	movs	r3, #128	; 0x80
 8000522:	05db      	lsls	r3, r3, #23
 8000524:	2250      	movs	r2, #80	; 0x50
 8000526:	809a      	strh	r2, [r3, #4]
 8000528:	2380      	movs	r3, #128	; 0x80
 800052a:	05db      	lsls	r3, r3, #23
 800052c:	2200      	movs	r2, #0
 800052e:	811a      	strh	r2, [r3, #8]
 8000530:	2380      	movs	r3, #128	; 0x80
 8000532:	05db      	lsls	r3, r3, #23
 8000534:	2200      	movs	r2, #0
 8000536:	819a      	strh	r2, [r3, #12]
 8000538:	2380      	movs	r3, #128	; 0x80
 800053a:	05db      	lsls	r3, r3, #23
 800053c:	2200      	movs	r2, #0
 800053e:	821a      	strh	r2, [r3, #16]
 8000540:	2380      	movs	r3, #128	; 0x80
 8000542:	05db      	lsls	r3, r3, #23
 8000544:	2200      	movs	r2, #0
 8000546:	829a      	strh	r2, [r3, #20]
 8000548:	2380      	movs	r3, #128	; 0x80
 800054a:	05db      	lsls	r3, r3, #23
 800054c:	22c0      	movs	r2, #192	; 0xc0
 800054e:	01d2      	lsls	r2, r2, #7
 8000550:	831a      	strh	r2, [r3, #24]
 8000552:	2380      	movs	r3, #128	; 0x80
 8000554:	05db      	lsls	r3, r3, #23
 8000556:	2200      	movs	r2, #0
 8000558:	839a      	strh	r2, [r3, #28]
 800055a:	2380      	movs	r3, #128	; 0x80
 800055c:	05db      	lsls	r3, r3, #23
 800055e:	2210      	movs	r2, #16
 8000560:	841a      	strh	r2, [r3, #32]
 8000562:	2380      	movs	r3, #128	; 0x80
 8000564:	05db      	lsls	r3, r3, #23
 8000566:	2200      	movs	r2, #0
 8000568:	849a      	strh	r2, [r3, #36]	; 0x24
 800056a:	2380      	movs	r3, #128	; 0x80
 800056c:	05db      	lsls	r3, r3, #23
 800056e:	2208      	movs	r2, #8
 8000570:	851a      	strh	r2, [r3, #40]	; 0x28
 8000572:	2380      	movs	r3, #128	; 0x80
 8000574:	05db      	lsls	r3, r3, #23
 8000576:	2209      	movs	r2, #9
 8000578:	859a      	strh	r2, [r3, #44]	; 0x2c
 800057a:	2380      	movs	r3, #128	; 0x80
 800057c:	05db      	lsls	r3, r3, #23
 800057e:	4a10      	ldr	r2, [pc, #64]	; (80005c0 <TIM2_Init+0xac>)
 8000580:	869a      	strh	r2, [r3, #52]	; 0x34
 8000582:	2380      	movs	r3, #128	; 0x80
 8000584:	05db      	lsls	r3, r3, #23
 8000586:	2205      	movs	r2, #5
 8000588:	871a      	strh	r2, [r3, #56]	; 0x38
 800058a:	2380      	movs	r3, #128	; 0x80
 800058c:	05db      	lsls	r3, r3, #23
 800058e:	2200      	movs	r2, #0
 8000590:	879a      	strh	r2, [r3, #60]	; 0x3c
 8000592:	2380      	movs	r3, #128	; 0x80
 8000594:	05da      	lsls	r2, r3, #23
 8000596:	2340      	movs	r3, #64	; 0x40
 8000598:	2100      	movs	r1, #0
 800059a:	52d1      	strh	r1, [r2, r3]
 800059c:	2380      	movs	r3, #128	; 0x80
 800059e:	05da      	lsls	r2, r3, #23
 80005a0:	2348      	movs	r3, #72	; 0x48
 80005a2:	2100      	movs	r1, #0
 80005a4:	52d1      	strh	r1, [r2, r3]
 80005a6:	2380      	movs	r3, #128	; 0x80
 80005a8:	05da      	lsls	r2, r3, #23
 80005aa:	234c      	movs	r3, #76	; 0x4c
 80005ac:	2100      	movs	r1, #0
 80005ae:	52d1      	strh	r1, [r2, r3]
 80005b0:	2380      	movs	r3, #128	; 0x80
 80005b2:	05db      	lsls	r3, r3, #23
 80005b4:	2280      	movs	r2, #128	; 0x80
 80005b6:	801a      	strh	r2, [r3, #0]
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bc80      	pop	{r7}
 80005bc:	bc01      	pop	{r0}
 80005be:	4700      	bx	r0
 80005c0:	00001388 	.word	0x00001388

080005c4 <ADC1_Init>:
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	4b21      	ldr	r3, [pc, #132]	; (8000650 <ADC1_Init+0x8c>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	4b20      	ldr	r3, [pc, #128]	; (8000650 <ADC1_Init+0x8c>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	4b1e      	ldr	r3, [pc, #120]	; (8000650 <ADC1_Init+0x8c>)
 80005d6:	4a1f      	ldr	r2, [pc, #124]	; (8000654 <ADC1_Init+0x90>)
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	4b1d      	ldr	r3, [pc, #116]	; (8000650 <ADC1_Init+0x8c>)
 80005dc:	2200      	movs	r2, #0
 80005de:	60da      	str	r2, [r3, #12]
 80005e0:	4b1b      	ldr	r3, [pc, #108]	; (8000650 <ADC1_Init+0x8c>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	611a      	str	r2, [r3, #16]
 80005e6:	4b1a      	ldr	r3, [pc, #104]	; (8000650 <ADC1_Init+0x8c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	615a      	str	r2, [r3, #20]
 80005ec:	4b18      	ldr	r3, [pc, #96]	; (8000650 <ADC1_Init+0x8c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	619a      	str	r2, [r3, #24]
 80005f2:	4b17      	ldr	r3, [pc, #92]	; (8000650 <ADC1_Init+0x8c>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	61da      	str	r2, [r3, #28]
 80005f8:	4b15      	ldr	r3, [pc, #84]	; (8000650 <ADC1_Init+0x8c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	621a      	str	r2, [r3, #32]
 80005fe:	4b14      	ldr	r3, [pc, #80]	; (8000650 <ADC1_Init+0x8c>)
 8000600:	4a15      	ldr	r2, [pc, #84]	; (8000658 <ADC1_Init+0x94>)
 8000602:	625a      	str	r2, [r3, #36]	; 0x24
 8000604:	4b12      	ldr	r3, [pc, #72]	; (8000650 <ADC1_Init+0x8c>)
 8000606:	2200      	movs	r2, #0
 8000608:	629a      	str	r2, [r3, #40]	; 0x28
 800060a:	4b11      	ldr	r3, [pc, #68]	; (8000650 <ADC1_Init+0x8c>)
 800060c:	2200      	movs	r2, #0
 800060e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000610:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <ADC1_Init+0x8c>)
 8000612:	2200      	movs	r2, #0
 8000614:	631a      	str	r2, [r3, #48]	; 0x30
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <ADC1_Init+0x8c>)
 8000618:	2200      	movs	r2, #0
 800061a:	635a      	str	r2, [r3, #52]	; 0x34
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <ADC1_Init+0x8c>)
 800061e:	2200      	movs	r2, #0
 8000620:	639a      	str	r2, [r3, #56]	; 0x38
 8000622:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <ADC1_Init+0x8c>)
 8000624:	4a0a      	ldr	r2, [pc, #40]	; (8000650 <ADC1_Init+0x8c>)
 8000626:	6892      	ldr	r2, [r2, #8]
 8000628:	2104      	movs	r1, #4
 800062a:	430a      	orrs	r2, r1
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	4b07      	ldr	r3, [pc, #28]	; (8000650 <ADC1_Init+0x8c>)
 8000632:	689a      	ldr	r2, [r3, #8]
 8000634:	2304      	movs	r3, #4
 8000636:	4013      	ands	r3, r2
 8000638:	2b00      	cmp	r3, #0
 800063a:	d0f9      	beq.n	8000630 <ADC1_Init+0x6c>
 800063c:	4b04      	ldr	r3, [pc, #16]	; (8000650 <ADC1_Init+0x8c>)
 800063e:	4a04      	ldr	r2, [pc, #16]	; (8000650 <ADC1_Init+0x8c>)
 8000640:	6892      	ldr	r2, [r2, #8]
 8000642:	2101      	movs	r1, #1
 8000644:	430a      	orrs	r2, r1
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	bc01      	pop	{r0}
 800064e:	4700      	bx	r0
 8000650:	40012400 	.word	0x40012400
 8000654:	00160100 	.word	0x00160100
 8000658:	00000fff 	.word	0x00000fff

0800065c <DMA1_CH1_Init>:
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
 8000660:	4b0a      	ldr	r3, [pc, #40]	; (800068c <DMA1_CH1_Init+0x30>)
 8000662:	1c18      	adds	r0, r3, #0
 8000664:	f005 fe6e 	bl	8006344 <DMA_DeInit>
 8000668:	4b08      	ldr	r3, [pc, #32]	; (800068c <DMA1_CH1_Init+0x30>)
 800066a:	4a09      	ldr	r2, [pc, #36]	; (8000690 <DMA1_CH1_Init+0x34>)
 800066c:	8a12      	ldrh	r2, [r2, #16]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <DMA1_CH1_Init+0x30>)
 8000672:	4a08      	ldr	r2, [pc, #32]	; (8000694 <DMA1_CH1_Init+0x38>)
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	4b05      	ldr	r3, [pc, #20]	; (800068c <DMA1_CH1_Init+0x30>)
 8000678:	4a07      	ldr	r2, [pc, #28]	; (8000698 <DMA1_CH1_Init+0x3c>)
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	4b03      	ldr	r3, [pc, #12]	; (800068c <DMA1_CH1_Init+0x30>)
 800067e:	4a07      	ldr	r2, [pc, #28]	; (800069c <DMA1_CH1_Init+0x40>)
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	46bd      	mov	sp, r7
 8000684:	bc80      	pop	{r7}
 8000686:	bc01      	pop	{r0}
 8000688:	4700      	bx	r0
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	40020008 	.word	0x40020008
 8000690:	200009c8 	.word	0x200009c8
 8000694:	4001244c 	.word	0x4001244c
 8000698:	200009dc 	.word	0x200009dc
 800069c:	000025a5 	.word	0x000025a5

080006a0 <NVIC_Configuration_lib>:
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	221b      	movs	r2, #27
 80006aa:	701a      	strb	r2, [r3, #0]
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	2200      	movs	r2, #0
 80006b0:	705a      	strb	r2, [r3, #1]
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	2200      	movs	r2, #0
 80006b6:	709a      	strb	r2, [r3, #2]
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	2200      	movs	r2, #0
 80006bc:	70da      	strb	r2, [r3, #3]
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	1c18      	adds	r0, r3, #0
 80006c2:	f005 fb63 	bl	8005d8c <NVIC_Init>
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2212      	movs	r2, #18
 80006ca:	701a      	strb	r2, [r3, #0]
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2200      	movs	r2, #0
 80006d0:	705a      	strb	r2, [r3, #1]
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	2200      	movs	r2, #0
 80006d6:	709a      	strb	r2, [r3, #2]
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2200      	movs	r2, #0
 80006dc:	70da      	strb	r2, [r3, #3]
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	1c18      	adds	r0, r3, #0
 80006e2:	f005 fb53 	bl	8005d8c <NVIC_Init>
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	220b      	movs	r2, #11
 80006ea:	701a      	strb	r2, [r3, #0]
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	2200      	movs	r2, #0
 80006f0:	705a      	strb	r2, [r3, #1]
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2200      	movs	r2, #0
 80006f6:	709a      	strb	r2, [r3, #2]
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	2200      	movs	r2, #0
 80006fc:	70da      	strb	r2, [r3, #3]
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	1c18      	adds	r0, r3, #0
 8000702:	f005 fb43 	bl	8005d8c <NVIC_Init>
 8000706:	46bd      	mov	sp, r7
 8000708:	b002      	add	sp, #8
 800070a:	bc80      	pop	{r7}
 800070c:	bc01      	pop	{r0}
 800070e:	4700      	bx	r0

08000710 <DSO_Init>:
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af02      	add	r7, sp, #8
 8000716:	1dbb      	adds	r3, r7, #6
 8000718:	2200      	movs	r2, #0
 800071a:	801a      	strh	r2, [r3, #0]
 800071c:	23a0      	movs	r3, #160	; 0xa0
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	1dba      	adds	r2, r7, #6
 8000722:	8812      	ldrh	r2, [r2, #0]
 8000724:	9200      	str	r2, [sp, #0]
 8000726:	2000      	movs	r0, #0
 8000728:	2100      	movs	r1, #0
 800072a:	1c1a      	adds	r2, r3, #0
 800072c:	23f0      	movs	r3, #240	; 0xf0
 800072e:	f004 fad1 	bl	8004cd4 <FillRect>
 8000732:	4b41      	ldr	r3, [pc, #260]	; (8000838 <DSO_Init+0x128>)
 8000734:	1dba      	adds	r2, r7, #6
 8000736:	8812      	ldrh	r2, [r2, #0]
 8000738:	9200      	str	r2, [sp, #0]
 800073a:	4a40      	ldr	r2, [pc, #256]	; (800083c <DSO_Init+0x12c>)
 800073c:	9201      	str	r2, [sp, #4]
 800073e:	2018      	movs	r0, #24
 8000740:	2132      	movs	r1, #50	; 0x32
 8000742:	2200      	movs	r2, #0
 8000744:	f004 fb16 	bl	8004d74 <PutcGenic>
 8000748:	4b3b      	ldr	r3, [pc, #236]	; (8000838 <DSO_Init+0x128>)
 800074a:	1dba      	adds	r2, r7, #6
 800074c:	8812      	ldrh	r2, [r2, #0]
 800074e:	9200      	str	r2, [sp, #0]
 8000750:	4a3b      	ldr	r2, [pc, #236]	; (8000840 <DSO_Init+0x130>)
 8000752:	9201      	str	r2, [sp, #4]
 8000754:	206e      	movs	r0, #110	; 0x6e
 8000756:	2134      	movs	r1, #52	; 0x34
 8000758:	2200      	movs	r2, #0
 800075a:	f004 fb0b 	bl	8004d74 <PutcGenic>
 800075e:	4b36      	ldr	r3, [pc, #216]	; (8000838 <DSO_Init+0x128>)
 8000760:	1dba      	adds	r2, r7, #6
 8000762:	8812      	ldrh	r2, [r2, #0]
 8000764:	9200      	str	r2, [sp, #0]
 8000766:	4a37      	ldr	r2, [pc, #220]	; (8000844 <DSO_Init+0x134>)
 8000768:	9201      	str	r2, [sp, #4]
 800076a:	2018      	movs	r0, #24
 800076c:	214b      	movs	r1, #75	; 0x4b
 800076e:	2200      	movs	r2, #0
 8000770:	f7ff fd30 	bl	80001d4 <PutcGenic1>
 8000774:	4b34      	ldr	r3, [pc, #208]	; (8000848 <DSO_Init+0x138>)
 8000776:	2200      	movs	r2, #0
 8000778:	80da      	strh	r2, [r3, #6]
 800077a:	4b33      	ldr	r3, [pc, #204]	; (8000848 <DSO_Init+0x138>)
 800077c:	2207      	movs	r2, #7
 800077e:	711a      	strb	r2, [r3, #4]
 8000780:	4b31      	ldr	r3, [pc, #196]	; (8000848 <DSO_Init+0x138>)
 8000782:	2200      	movs	r2, #0
 8000784:	715a      	strb	r2, [r3, #5]
 8000786:	4b30      	ldr	r3, [pc, #192]	; (8000848 <DSO_Init+0x138>)
 8000788:	2212      	movs	r2, #18
 800078a:	701a      	strb	r2, [r3, #0]
 800078c:	4b2e      	ldr	r3, [pc, #184]	; (8000848 <DSO_Init+0x138>)
 800078e:	2200      	movs	r2, #0
 8000790:	729a      	strb	r2, [r3, #10]
 8000792:	4b2d      	ldr	r3, [pc, #180]	; (8000848 <DSO_Init+0x138>)
 8000794:	2200      	movs	r2, #0
 8000796:	72da      	strb	r2, [r3, #11]
 8000798:	4b2b      	ldr	r3, [pc, #172]	; (8000848 <DSO_Init+0x138>)
 800079a:	2200      	movs	r2, #0
 800079c:	819a      	strh	r2, [r3, #12]
 800079e:	4b2a      	ldr	r3, [pc, #168]	; (8000848 <DSO_Init+0x138>)
 80007a0:	2280      	movs	r2, #128	; 0x80
 80007a2:	00d2      	lsls	r2, r2, #3
 80007a4:	821a      	strh	r2, [r3, #16]
 80007a6:	4b28      	ldr	r3, [pc, #160]	; (8000848 <DSO_Init+0x138>)
 80007a8:	22b5      	movs	r2, #181	; 0xb5
 80007aa:	0052      	lsls	r2, r2, #1
 80007ac:	805a      	strh	r2, [r3, #2]
 80007ae:	4b26      	ldr	r3, [pc, #152]	; (8000848 <DSO_Init+0x138>)
 80007b0:	8a1b      	ldrh	r3, [r3, #16]
 80007b2:	085b      	lsrs	r3, r3, #1
 80007b4:	041b      	lsls	r3, r3, #16
 80007b6:	0c1b      	lsrs	r3, r3, #16
 80007b8:	041b      	lsls	r3, r3, #16
 80007ba:	0c1a      	lsrs	r2, r3, #16
 80007bc:	4b22      	ldr	r3, [pc, #136]	; (8000848 <DSO_Init+0x138>)
 80007be:	81da      	strh	r2, [r3, #14]
 80007c0:	4b21      	ldr	r3, [pc, #132]	; (8000848 <DSO_Init+0x138>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	811a      	strh	r2, [r3, #8]
 80007c6:	4b21      	ldr	r3, [pc, #132]	; (800084c <DSO_Init+0x13c>)
 80007c8:	4a21      	ldr	r2, [pc, #132]	; (8000850 <DSO_Init+0x140>)
 80007ca:	619a      	str	r2, [r3, #24]
 80007cc:	4b1f      	ldr	r3, [pc, #124]	; (800084c <DSO_Init+0x13c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	805a      	strh	r2, [r3, #2]
 80007d2:	4b1e      	ldr	r3, [pc, #120]	; (800084c <DSO_Init+0x13c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	711a      	strb	r2, [r3, #4]
 80007d8:	4b1c      	ldr	r3, [pc, #112]	; (800084c <DSO_Init+0x13c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	801a      	strh	r2, [r3, #0]
 80007de:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <DSO_Init+0x138>)
 80007e0:	885a      	ldrh	r2, [r3, #2]
 80007e2:	4b1a      	ldr	r3, [pc, #104]	; (800084c <DSO_Init+0x13c>)
 80007e4:	80da      	strh	r2, [r3, #6]
 80007e6:	4b18      	ldr	r3, [pc, #96]	; (8000848 <DSO_Init+0x138>)
 80007e8:	8a1b      	ldrh	r3, [r3, #16]
 80007ea:	041b      	lsls	r3, r3, #16
 80007ec:	0c1a      	lsrs	r2, r3, #16
 80007ee:	4b17      	ldr	r3, [pc, #92]	; (800084c <DSO_Init+0x13c>)
 80007f0:	819a      	strh	r2, [r3, #12]
 80007f2:	4b18      	ldr	r3, [pc, #96]	; (8000854 <DSO_Init+0x144>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	701a      	strb	r2, [r3, #0]
 80007f8:	4b17      	ldr	r3, [pc, #92]	; (8000858 <DSO_Init+0x148>)
 80007fa:	4a18      	ldr	r2, [pc, #96]	; (800085c <DSO_Init+0x14c>)
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	4b18      	ldr	r3, [pc, #96]	; (8000860 <DSO_Init+0x150>)
 8000800:	4a13      	ldr	r2, [pc, #76]	; (8000850 <DSO_Init+0x140>)
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	4b17      	ldr	r3, [pc, #92]	; (8000864 <DSO_Init+0x154>)
 8000806:	4a18      	ldr	r2, [pc, #96]	; (8000868 <DSO_Init+0x158>)
 8000808:	801a      	strh	r2, [r3, #0]
 800080a:	4b18      	ldr	r3, [pc, #96]	; (800086c <DSO_Init+0x15c>)
 800080c:	2200      	movs	r2, #0
 800080e:	801a      	strh	r2, [r3, #0]
 8000810:	4b17      	ldr	r3, [pc, #92]	; (8000870 <DSO_Init+0x160>)
 8000812:	4a18      	ldr	r2, [pc, #96]	; (8000874 <DSO_Init+0x164>)
 8000814:	801a      	strh	r2, [r3, #0]
 8000816:	4b18      	ldr	r3, [pc, #96]	; (8000878 <DSO_Init+0x168>)
 8000818:	2200      	movs	r2, #0
 800081a:	701a      	strb	r2, [r3, #0]
 800081c:	f7ff fe30 	bl	8000480 <TIM1_Init>
 8000820:	f7ff fe78 	bl	8000514 <TIM2_Init>
 8000824:	f7ff fece 	bl	80005c4 <ADC1_Init>
 8000828:	f7ff ff18 	bl	800065c <DMA1_CH1_Init>
 800082c:	46bd      	mov	sp, r7
 800082e:	b002      	add	sp, #8
 8000830:	bc80      	pop	{r7}
 8000832:	bc01      	pop	{r0}
 8000834:	4700      	bx	r0
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	0000ffe0 	.word	0x0000ffe0
 800083c:	2000004c 	.word	0x2000004c
 8000840:	20000058 	.word	0x20000058
 8000844:	20000034 	.word	0x20000034
 8000848:	200009c8 	.word	0x200009c8
 800084c:	2000233c 	.word	0x2000233c
 8000850:	20001b08 	.word	0x20001b08
 8000854:	20000186 	.word	0x20000186
 8000858:	200026e8 	.word	0x200026e8
 800085c:	0000f3a5 	.word	0x0000f3a5
 8000860:	2000235c 	.word	0x2000235c
 8000864:	200026ec 	.word	0x200026ec
 8000868:	00002710 	.word	0x00002710
 800086c:	20002358 	.word	0x20002358
 8000870:	200001ac 	.word	0x200001ac
 8000874:	00000bb8 	.word	0x00000bb8
 8000878:	200001aa 	.word	0x200001aa

0800087c <Min>:
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	1c0a      	adds	r2, r1, #0
 8000884:	1dbb      	adds	r3, r7, #6
 8000886:	1c01      	adds	r1, r0, #0
 8000888:	8019      	strh	r1, [r3, #0]
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	801a      	strh	r2, [r3, #0]
 800088e:	1dba      	adds	r2, r7, #6
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	2100      	movs	r1, #0
 8000894:	5e52      	ldrsh	r2, [r2, r1]
 8000896:	2100      	movs	r1, #0
 8000898:	5e5b      	ldrsh	r3, [r3, r1]
 800089a:	429a      	cmp	r2, r3
 800089c:	da02      	bge.n	80008a4 <Min+0x28>
 800089e:	1dbb      	adds	r3, r7, #6
 80008a0:	881b      	ldrh	r3, [r3, #0]
 80008a2:	e001      	b.n	80008a8 <Min+0x2c>
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	881b      	ldrh	r3, [r3, #0]
 80008a8:	041b      	lsls	r3, r3, #16
 80008aa:	141b      	asrs	r3, r3, #16
 80008ac:	1c18      	adds	r0, r3, #0
 80008ae:	46bd      	mov	sp, r7
 80008b0:	b002      	add	sp, #8
 80008b2:	bc80      	pop	{r7}
 80008b4:	bc02      	pop	{r1}
 80008b6:	4708      	bx	r1

080008b8 <Max>:
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	1c0a      	adds	r2, r1, #0
 80008c0:	1dbb      	adds	r3, r7, #6
 80008c2:	1c01      	adds	r1, r0, #0
 80008c4:	8019      	strh	r1, [r3, #0]
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	801a      	strh	r2, [r3, #0]
 80008ca:	1dba      	adds	r2, r7, #6
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	2100      	movs	r1, #0
 80008d0:	5e52      	ldrsh	r2, [r2, r1]
 80008d2:	2100      	movs	r1, #0
 80008d4:	5e5b      	ldrsh	r3, [r3, r1]
 80008d6:	429a      	cmp	r2, r3
 80008d8:	dd02      	ble.n	80008e0 <Max+0x28>
 80008da:	1dbb      	adds	r3, r7, #6
 80008dc:	881b      	ldrh	r3, [r3, #0]
 80008de:	e001      	b.n	80008e4 <Max+0x2c>
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	041b      	lsls	r3, r3, #16
 80008e6:	141b      	asrs	r3, r3, #16
 80008e8:	1c18      	adds	r0, r3, #0
 80008ea:	46bd      	mov	sp, r7
 80008ec:	b002      	add	sp, #8
 80008ee:	bc80      	pop	{r7}
 80008f0:	bc02      	pop	{r1}
 80008f2:	4708      	bx	r1

080008f4 <BinToDec16>:
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	1c02      	adds	r2, r0, #0
 80008fc:	6039      	str	r1, [r7, #0]
 80008fe:	1dbb      	adds	r3, r7, #6
 8000900:	801a      	strh	r2, [r3, #0]
 8000902:	1dbb      	adds	r3, r7, #6
 8000904:	881b      	ldrh	r3, [r3, #0]
 8000906:	1c18      	adds	r0, r3, #0
 8000908:	495c      	ldr	r1, [pc, #368]	; (8000a7c <BinToDec16+0x188>)
 800090a:	f002 fd39 	bl	8003380 <__udivsi3>
 800090e:	1c03      	adds	r3, r0, #0
 8000910:	041b      	lsls	r3, r3, #16
 8000912:	0c1a      	lsrs	r2, r3, #16
 8000914:	1c3b      	adds	r3, r7, #0
 8000916:	330f      	adds	r3, #15
 8000918:	701a      	strb	r2, [r3, #0]
 800091a:	1c3b      	adds	r3, r7, #0
 800091c:	330f      	adds	r3, #15
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2230      	movs	r2, #48	; 0x30
 8000922:	4313      	orrs	r3, r2
 8000924:	061b      	lsls	r3, r3, #24
 8000926:	0e1a      	lsrs	r2, r3, #24
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	701a      	strb	r2, [r3, #0]
 800092c:	1c3b      	adds	r3, r7, #0
 800092e:	330f      	adds	r3, #15
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	041b      	lsls	r3, r3, #16
 8000934:	0c1b      	lsrs	r3, r3, #16
 8000936:	1c1a      	adds	r2, r3, #0
 8000938:	00d2      	lsls	r2, r2, #3
 800093a:	1ad2      	subs	r2, r2, r3
 800093c:	1c11      	adds	r1, r2, #0
 800093e:	0149      	lsls	r1, r1, #5
 8000940:	1a8a      	subs	r2, r1, r2
 8000942:	0112      	lsls	r2, r2, #4
 8000944:	1ad3      	subs	r3, r2, r3
 8000946:	011b      	lsls	r3, r3, #4
 8000948:	041b      	lsls	r3, r3, #16
 800094a:	0c19      	lsrs	r1, r3, #16
 800094c:	1dbb      	adds	r3, r7, #6
 800094e:	1dba      	adds	r2, r7, #6
 8000950:	8812      	ldrh	r2, [r2, #0]
 8000952:	188a      	adds	r2, r1, r2
 8000954:	801a      	strh	r2, [r3, #0]
 8000956:	1dbb      	adds	r3, r7, #6
 8000958:	881b      	ldrh	r3, [r3, #0]
 800095a:	1c18      	adds	r0, r3, #0
 800095c:	23fa      	movs	r3, #250	; 0xfa
 800095e:	0099      	lsls	r1, r3, #2
 8000960:	f002 fd0e 	bl	8003380 <__udivsi3>
 8000964:	1c03      	adds	r3, r0, #0
 8000966:	041b      	lsls	r3, r3, #16
 8000968:	0c1a      	lsrs	r2, r3, #16
 800096a:	1c3b      	adds	r3, r7, #0
 800096c:	330f      	adds	r3, #15
 800096e:	701a      	strb	r2, [r3, #0]
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	3301      	adds	r3, #1
 8000974:	1c3a      	adds	r2, r7, #0
 8000976:	320f      	adds	r2, #15
 8000978:	7812      	ldrb	r2, [r2, #0]
 800097a:	2130      	movs	r1, #48	; 0x30
 800097c:	430a      	orrs	r2, r1
 800097e:	0612      	lsls	r2, r2, #24
 8000980:	0e12      	lsrs	r2, r2, #24
 8000982:	701a      	strb	r2, [r3, #0]
 8000984:	1c3b      	adds	r3, r7, #0
 8000986:	330f      	adds	r3, #15
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	041b      	lsls	r3, r3, #16
 800098c:	0c1b      	lsrs	r3, r3, #16
 800098e:	1c1a      	adds	r2, r3, #0
 8000990:	0192      	lsls	r2, r2, #6
 8000992:	1ad2      	subs	r2, r2, r3
 8000994:	0192      	lsls	r2, r2, #6
 8000996:	18d2      	adds	r2, r2, r3
 8000998:	0052      	lsls	r2, r2, #1
 800099a:	18d3      	adds	r3, r2, r3
 800099c:	00db      	lsls	r3, r3, #3
 800099e:	041b      	lsls	r3, r3, #16
 80009a0:	0c19      	lsrs	r1, r3, #16
 80009a2:	1dbb      	adds	r3, r7, #6
 80009a4:	1dba      	adds	r2, r7, #6
 80009a6:	8812      	ldrh	r2, [r2, #0]
 80009a8:	188a      	adds	r2, r1, r2
 80009aa:	801a      	strh	r2, [r3, #0]
 80009ac:	1dbb      	adds	r3, r7, #6
 80009ae:	881b      	ldrh	r3, [r3, #0]
 80009b0:	1c18      	adds	r0, r3, #0
 80009b2:	2164      	movs	r1, #100	; 0x64
 80009b4:	f002 fce4 	bl	8003380 <__udivsi3>
 80009b8:	1c03      	adds	r3, r0, #0
 80009ba:	041b      	lsls	r3, r3, #16
 80009bc:	0c1a      	lsrs	r2, r3, #16
 80009be:	1c3b      	adds	r3, r7, #0
 80009c0:	330f      	adds	r3, #15
 80009c2:	701a      	strb	r2, [r3, #0]
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	3302      	adds	r3, #2
 80009c8:	1c3a      	adds	r2, r7, #0
 80009ca:	320f      	adds	r2, #15
 80009cc:	7812      	ldrb	r2, [r2, #0]
 80009ce:	2130      	movs	r1, #48	; 0x30
 80009d0:	430a      	orrs	r2, r1
 80009d2:	0612      	lsls	r2, r2, #24
 80009d4:	0e12      	lsrs	r2, r2, #24
 80009d6:	701a      	strb	r2, [r3, #0]
 80009d8:	1c3b      	adds	r3, r7, #0
 80009da:	330f      	adds	r3, #15
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	041b      	lsls	r3, r3, #16
 80009e0:	0c1b      	lsrs	r3, r3, #16
 80009e2:	1c1a      	adds	r2, r3, #0
 80009e4:	0252      	lsls	r2, r2, #9
 80009e6:	1ad2      	subs	r2, r2, r3
 80009e8:	0092      	lsls	r2, r2, #2
 80009ea:	18d2      	adds	r2, r2, r3
 80009ec:	00d2      	lsls	r2, r2, #3
 80009ee:	1ad3      	subs	r3, r2, r3
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	041b      	lsls	r3, r3, #16
 80009f4:	0c19      	lsrs	r1, r3, #16
 80009f6:	1dbb      	adds	r3, r7, #6
 80009f8:	1dba      	adds	r2, r7, #6
 80009fa:	8812      	ldrh	r2, [r2, #0]
 80009fc:	188a      	adds	r2, r1, r2
 80009fe:	801a      	strh	r2, [r3, #0]
 8000a00:	1dbb      	adds	r3, r7, #6
 8000a02:	881b      	ldrh	r3, [r3, #0]
 8000a04:	1c18      	adds	r0, r3, #0
 8000a06:	210a      	movs	r1, #10
 8000a08:	f002 fcba 	bl	8003380 <__udivsi3>
 8000a0c:	1c03      	adds	r3, r0, #0
 8000a0e:	041b      	lsls	r3, r3, #16
 8000a10:	0c1a      	lsrs	r2, r3, #16
 8000a12:	1c3b      	adds	r3, r7, #0
 8000a14:	330f      	adds	r3, #15
 8000a16:	701a      	strb	r2, [r3, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	3303      	adds	r3, #3
 8000a1c:	1c3a      	adds	r2, r7, #0
 8000a1e:	320f      	adds	r2, #15
 8000a20:	7812      	ldrb	r2, [r2, #0]
 8000a22:	2130      	movs	r1, #48	; 0x30
 8000a24:	430a      	orrs	r2, r1
 8000a26:	0612      	lsls	r2, r2, #24
 8000a28:	0e12      	lsrs	r2, r2, #24
 8000a2a:	701a      	strb	r2, [r3, #0]
 8000a2c:	1c3b      	adds	r3, r7, #0
 8000a2e:	330f      	adds	r3, #15
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	041b      	lsls	r3, r3, #16
 8000a34:	0c1b      	lsrs	r3, r3, #16
 8000a36:	1c1a      	adds	r2, r3, #0
 8000a38:	0352      	lsls	r2, r2, #13
 8000a3a:	1ad2      	subs	r2, r2, r3
 8000a3c:	0092      	lsls	r2, r2, #2
 8000a3e:	1ad3      	subs	r3, r2, r3
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	041b      	lsls	r3, r3, #16
 8000a44:	0c19      	lsrs	r1, r3, #16
 8000a46:	1dbb      	adds	r3, r7, #6
 8000a48:	1dba      	adds	r2, r7, #6
 8000a4a:	8812      	ldrh	r2, [r2, #0]
 8000a4c:	188a      	adds	r2, r1, r2
 8000a4e:	801a      	strh	r2, [r3, #0]
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	3304      	adds	r3, #4
 8000a54:	1dba      	adds	r2, r7, #6
 8000a56:	8812      	ldrh	r2, [r2, #0]
 8000a58:	0612      	lsls	r2, r2, #24
 8000a5a:	0e12      	lsrs	r2, r2, #24
 8000a5c:	2130      	movs	r1, #48	; 0x30
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	0612      	lsls	r2, r2, #24
 8000a62:	0e12      	lsrs	r2, r2, #24
 8000a64:	701a      	strb	r2, [r3, #0]
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	3305      	adds	r3, #5
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	701a      	strb	r2, [r3, #0]
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	1c18      	adds	r0, r3, #0
 8000a72:	46bd      	mov	sp, r7
 8000a74:	b004      	add	sp, #16
 8000a76:	bc80      	pop	{r7}
 8000a78:	bc02      	pop	{r1}
 8000a7a:	4708      	bx	r1
 8000a7c:	00002710 	.word	0x00002710

08000a80 <UpdateTimebase>:
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	2380      	movs	r3, #128	; 0x80
 8000a86:	05db      	lsls	r3, r3, #23
 8000a88:	4a14      	ldr	r2, [pc, #80]	; (8000adc <UpdateTimebase+0x5c>)
 8000a8a:	7812      	ldrb	r2, [r2, #0]
 8000a8c:	0612      	lsls	r2, r2, #24
 8000a8e:	1612      	asrs	r2, r2, #24
 8000a90:	1e51      	subs	r1, r2, #1
 8000a92:	4a13      	ldr	r2, [pc, #76]	; (8000ae0 <UpdateTimebase+0x60>)
 8000a94:	0049      	lsls	r1, r1, #1
 8000a96:	5a8a      	ldrh	r2, [r1, r2]
 8000a98:	3a01      	subs	r2, #1
 8000a9a:	0412      	lsls	r2, r2, #16
 8000a9c:	0c12      	lsrs	r2, r2, #16
 8000a9e:	851a      	strh	r2, [r3, #40]	; 0x28
 8000aa0:	2380      	movs	r3, #128	; 0x80
 8000aa2:	05db      	lsls	r3, r3, #23
 8000aa4:	4a0d      	ldr	r2, [pc, #52]	; (8000adc <UpdateTimebase+0x5c>)
 8000aa6:	7812      	ldrb	r2, [r2, #0]
 8000aa8:	0612      	lsls	r2, r2, #24
 8000aaa:	1612      	asrs	r2, r2, #24
 8000aac:	1e51      	subs	r1, r2, #1
 8000aae:	4a0d      	ldr	r2, [pc, #52]	; (8000ae4 <UpdateTimebase+0x64>)
 8000ab0:	0049      	lsls	r1, r1, #1
 8000ab2:	5a8a      	ldrh	r2, [r1, r2]
 8000ab4:	3a01      	subs	r2, #1
 8000ab6:	0412      	lsls	r2, r2, #16
 8000ab8:	0c12      	lsrs	r2, r2, #16
 8000aba:	859a      	strh	r2, [r3, #44]	; 0x2c
 8000abc:	2380      	movs	r3, #128	; 0x80
 8000abe:	05db      	lsls	r3, r3, #23
 8000ac0:	2280      	movs	r2, #128	; 0x80
 8000ac2:	05d2      	lsls	r2, r2, #23
 8000ac4:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8000ac6:	0412      	lsls	r2, r2, #16
 8000ac8:	0c12      	lsrs	r2, r2, #16
 8000aca:	0852      	lsrs	r2, r2, #1
 8000acc:	0412      	lsls	r2, r2, #16
 8000ace:	0c12      	lsrs	r2, r2, #16
 8000ad0:	871a      	strh	r2, [r3, #56]	; 0x38
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	bc01      	pop	{r0}
 8000ad8:	4700      	bx	r0
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	200009c8 	.word	0x200009c8
 8000ae0:	200000d8 	.word	0x200000d8
 8000ae4:	20000108 	.word	0x20000108

08000ae8 <StartCapture>:
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af02      	add	r7, sp, #8
 8000aee:	4bb7      	ldr	r3, [pc, #732]	; (8000dcc <StartCapture+0x2e4>)
 8000af0:	881b      	ldrh	r3, [r3, #0]
 8000af2:	222b      	movs	r2, #43	; 0x2b
 8000af4:	4393      	bics	r3, r2
 8000af6:	041b      	lsls	r3, r3, #16
 8000af8:	0c1a      	lsrs	r2, r3, #16
 8000afa:	4bb4      	ldr	r3, [pc, #720]	; (8000dcc <StartCapture+0x2e4>)
 8000afc:	801a      	strh	r2, [r3, #0]
 8000afe:	4bb3      	ldr	r3, [pc, #716]	; (8000dcc <StartCapture+0x2e4>)
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	1c1a      	adds	r2, r3, #0
 8000b04:	2304      	movs	r3, #4
 8000b06:	4013      	ands	r3, r2
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d000      	beq.n	8000b0e <StartCapture+0x26>
 8000b0c:	e156      	b.n	8000dbc <StartCapture+0x2d4>
 8000b0e:	2380      	movs	r3, #128	; 0x80
 8000b10:	05db      	lsls	r3, r3, #23
 8000b12:	2280      	movs	r2, #128	; 0x80
 8000b14:	05d2      	lsls	r2, r2, #23
 8000b16:	8812      	ldrh	r2, [r2, #0]
 8000b18:	0412      	lsls	r2, r2, #16
 8000b1a:	0c12      	lsrs	r2, r2, #16
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	438a      	bics	r2, r1
 8000b20:	0412      	lsls	r2, r2, #16
 8000b22:	0c12      	lsrs	r2, r2, #16
 8000b24:	801a      	strh	r2, [r3, #0]
 8000b26:	4baa      	ldr	r3, [pc, #680]	; (8000dd0 <StartCapture+0x2e8>)
 8000b28:	4aa9      	ldr	r2, [pc, #676]	; (8000dd0 <StartCapture+0x2e8>)
 8000b2a:	8992      	ldrh	r2, [r2, #12]
 8000b2c:	0412      	lsls	r2, r2, #16
 8000b2e:	0c12      	lsrs	r2, r2, #16
 8000b30:	2106      	movs	r1, #6
 8000b32:	438a      	bics	r2, r1
 8000b34:	0412      	lsls	r2, r2, #16
 8000b36:	0c12      	lsrs	r2, r2, #16
 8000b38:	819a      	strh	r2, [r3, #12]
 8000b3a:	4ba6      	ldr	r3, [pc, #664]	; (8000dd4 <StartCapture+0x2ec>)
 8000b3c:	4aa5      	ldr	r2, [pc, #660]	; (8000dd4 <StartCapture+0x2ec>)
 8000b3e:	6812      	ldr	r2, [r2, #0]
 8000b40:	2101      	movs	r1, #1
 8000b42:	438a      	bics	r2, r1
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	4ba3      	ldr	r3, [pc, #652]	; (8000dd4 <StartCapture+0x2ec>)
 8000b48:	4aa2      	ldr	r2, [pc, #648]	; (8000dd4 <StartCapture+0x2ec>)
 8000b4a:	6812      	ldr	r2, [r2, #0]
 8000b4c:	2106      	movs	r1, #6
 8000b4e:	438a      	bics	r2, r1
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	4ba1      	ldr	r3, [pc, #644]	; (8000dd8 <StartCapture+0x2f0>)
 8000b54:	4aa0      	ldr	r2, [pc, #640]	; (8000dd8 <StartCapture+0x2f0>)
 8000b56:	6852      	ldr	r2, [r2, #4]
 8000b58:	210f      	movs	r1, #15
 8000b5a:	430a      	orrs	r2, r1
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	4b9f      	ldr	r3, [pc, #636]	; (8000ddc <StartCapture+0x2f4>)
 8000b60:	4a9e      	ldr	r2, [pc, #632]	; (8000ddc <StartCapture+0x2f4>)
 8000b62:	6852      	ldr	r2, [r2, #4]
 8000b64:	2120      	movs	r1, #32
 8000b66:	438a      	bics	r2, r1
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	4b9c      	ldr	r3, [pc, #624]	; (8000ddc <StartCapture+0x2f4>)
 8000b6c:	4a9b      	ldr	r2, [pc, #620]	; (8000ddc <StartCapture+0x2f4>)
 8000b6e:	6812      	ldr	r2, [r2, #0]
 8000b70:	2102      	movs	r1, #2
 8000b72:	438a      	bics	r2, r1
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	4b9a      	ldr	r3, [pc, #616]	; (8000de0 <StartCapture+0x2f8>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	061b      	lsls	r3, r3, #24
 8000b7c:	161b      	asrs	r3, r3, #24
 8000b7e:	2b0d      	cmp	r3, #13
 8000b80:	dc06      	bgt.n	8000b90 <StartCapture+0xa8>
 8000b82:	4b94      	ldr	r3, [pc, #592]	; (8000dd4 <StartCapture+0x2ec>)
 8000b84:	4a97      	ldr	r2, [pc, #604]	; (8000de4 <StartCapture+0x2fc>)
 8000b86:	60da      	str	r2, [r3, #12]
 8000b88:	4b90      	ldr	r3, [pc, #576]	; (8000dcc <StartCapture+0x2e4>)
 8000b8a:	4a96      	ldr	r2, [pc, #600]	; (8000de4 <StartCapture+0x2fc>)
 8000b8c:	615a      	str	r2, [r3, #20]
 8000b8e:	e005      	b.n	8000b9c <StartCapture+0xb4>
 8000b90:	4b90      	ldr	r3, [pc, #576]	; (8000dd4 <StartCapture+0x2ec>)
 8000b92:	4a95      	ldr	r2, [pc, #596]	; (8000de8 <StartCapture+0x300>)
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	4b8d      	ldr	r3, [pc, #564]	; (8000dcc <StartCapture+0x2e4>)
 8000b98:	4a93      	ldr	r2, [pc, #588]	; (8000de8 <StartCapture+0x300>)
 8000b9a:	615a      	str	r2, [r3, #20]
 8000b9c:	4b8d      	ldr	r3, [pc, #564]	; (8000dd4 <StartCapture+0x2ec>)
 8000b9e:	4a90      	ldr	r2, [pc, #576]	; (8000de0 <StartCapture+0x2f8>)
 8000ba0:	8a12      	ldrh	r2, [r2, #16]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	4b8b      	ldr	r3, [pc, #556]	; (8000dd4 <StartCapture+0x2ec>)
 8000ba6:	4a8b      	ldr	r2, [pc, #556]	; (8000dd4 <StartCapture+0x2ec>)
 8000ba8:	6812      	ldr	r2, [r2, #0]
 8000baa:	2104      	movs	r1, #4
 8000bac:	430a      	orrs	r2, r1
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	4b87      	ldr	r3, [pc, #540]	; (8000dd0 <StartCapture+0x2e8>)
 8000bb2:	4a8b      	ldr	r2, [pc, #556]	; (8000de0 <StartCapture+0x2f8>)
 8000bb4:	8a12      	ldrh	r2, [r2, #16]
 8000bb6:	871a      	strh	r2, [r3, #56]	; 0x38
 8000bb8:	4b85      	ldr	r3, [pc, #532]	; (8000dd0 <StartCapture+0x2e8>)
 8000bba:	4a85      	ldr	r2, [pc, #532]	; (8000dd0 <StartCapture+0x2e8>)
 8000bbc:	8992      	ldrh	r2, [r2, #12]
 8000bbe:	0412      	lsls	r2, r2, #16
 8000bc0:	0c12      	lsrs	r2, r2, #16
 8000bc2:	2106      	movs	r1, #6
 8000bc4:	438a      	bics	r2, r1
 8000bc6:	0412      	lsls	r2, r2, #16
 8000bc8:	0c12      	lsrs	r2, r2, #16
 8000bca:	819a      	strh	r2, [r3, #12]
 8000bcc:	4b80      	ldr	r3, [pc, #512]	; (8000dd0 <StartCapture+0x2e8>)
 8000bce:	4a80      	ldr	r2, [pc, #512]	; (8000dd0 <StartCapture+0x2e8>)
 8000bd0:	8a12      	ldrh	r2, [r2, #16]
 8000bd2:	0412      	lsls	r2, r2, #16
 8000bd4:	0c12      	lsrs	r2, r2, #16
 8000bd6:	2106      	movs	r1, #6
 8000bd8:	438a      	bics	r2, r1
 8000bda:	0412      	lsls	r2, r2, #16
 8000bdc:	0c12      	lsrs	r2, r2, #16
 8000bde:	821a      	strh	r2, [r3, #16]
 8000be0:	4b7f      	ldr	r3, [pc, #508]	; (8000de0 <StartCapture+0x2f8>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	061b      	lsls	r3, r3, #24
 8000be6:	161b      	asrs	r3, r3, #24
 8000be8:	2b0d      	cmp	r3, #13
 8000bea:	dd0d      	ble.n	8000c08 <StartCapture+0x120>
 8000bec:	4b7c      	ldr	r3, [pc, #496]	; (8000de0 <StartCapture+0x2f8>)
 8000bee:	7a9b      	ldrb	r3, [r3, #10]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d109      	bne.n	8000c08 <StartCapture+0x120>
 8000bf4:	4b76      	ldr	r3, [pc, #472]	; (8000dd0 <StartCapture+0x2e8>)
 8000bf6:	4a76      	ldr	r2, [pc, #472]	; (8000dd0 <StartCapture+0x2e8>)
 8000bf8:	8992      	ldrh	r2, [r2, #12]
 8000bfa:	0412      	lsls	r2, r2, #16
 8000bfc:	0c12      	lsrs	r2, r2, #16
 8000bfe:	2104      	movs	r1, #4
 8000c00:	430a      	orrs	r2, r1
 8000c02:	0412      	lsls	r2, r2, #16
 8000c04:	0c12      	lsrs	r2, r2, #16
 8000c06:	819a      	strh	r2, [r3, #12]
 8000c08:	4b78      	ldr	r3, [pc, #480]	; (8000dec <StartCapture+0x304>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	4b78      	ldr	r3, [pc, #480]	; (8000df0 <StartCapture+0x308>)
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d15d      	bne.n	8000cce <StartCapture+0x1e6>
 8000c12:	4b76      	ldr	r3, [pc, #472]	; (8000dec <StartCapture+0x304>)
 8000c14:	4a73      	ldr	r2, [pc, #460]	; (8000de4 <StartCapture+0x2fc>)
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	1dbb      	adds	r3, r7, #6
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	4252      	negs	r2, r2
 8000c1e:	801a      	strh	r2, [r3, #0]
 8000c20:	23a0      	movs	r3, #160	; 0xa0
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	1dba      	adds	r2, r7, #6
 8000c26:	8812      	ldrh	r2, [r2, #0]
 8000c28:	9200      	str	r2, [sp, #0]
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	1c1a      	adds	r2, r3, #0
 8000c30:	23f0      	movs	r3, #240	; 0xf0
 8000c32:	f004 f84f 	bl	8004cd4 <FillRect>
 8000c36:	1dbb      	adds	r3, r7, #6
 8000c38:	881b      	ldrh	r3, [r3, #0]
 8000c3a:	9300      	str	r3, [sp, #0]
 8000c3c:	4b6d      	ldr	r3, [pc, #436]	; (8000df4 <StartCapture+0x30c>)
 8000c3e:	9301      	str	r3, [sp, #4]
 8000c40:	2014      	movs	r0, #20
 8000c42:	2150      	movs	r1, #80	; 0x50
 8000c44:	2200      	movs	r2, #0
 8000c46:	231f      	movs	r3, #31
 8000c48:	f004 f894 	bl	8004d74 <PutcGenic>
 8000c4c:	1dbb      	adds	r3, r7, #6
 8000c4e:	881b      	ldrh	r3, [r3, #0]
 8000c50:	9300      	str	r3, [sp, #0]
 8000c52:	4b69      	ldr	r3, [pc, #420]	; (8000df8 <StartCapture+0x310>)
 8000c54:	9301      	str	r3, [sp, #4]
 8000c56:	2018      	movs	r0, #24
 8000c58:	2173      	movs	r1, #115	; 0x73
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	f004 f889 	bl	8004d74 <PutcGenic>
 8000c62:	23f8      	movs	r3, #248	; 0xf8
 8000c64:	021b      	lsls	r3, r3, #8
 8000c66:	1dba      	adds	r2, r7, #6
 8000c68:	8812      	ldrh	r2, [r2, #0]
 8000c6a:	9200      	str	r2, [sp, #0]
 8000c6c:	4a63      	ldr	r2, [pc, #396]	; (8000dfc <StartCapture+0x314>)
 8000c6e:	9201      	str	r2, [sp, #4]
 8000c70:	2014      	movs	r0, #20
 8000c72:	21b4      	movs	r1, #180	; 0xb4
 8000c74:	2200      	movs	r2, #0
 8000c76:	f004 f87d 	bl	8004d74 <PutcGenic>
 8000c7a:	23f8      	movs	r3, #248	; 0xf8
 8000c7c:	021b      	lsls	r3, r3, #8
 8000c7e:	1dba      	adds	r2, r7, #6
 8000c80:	8812      	ldrh	r2, [r2, #0]
 8000c82:	9200      	str	r2, [sp, #0]
 8000c84:	4a5e      	ldr	r2, [pc, #376]	; (8000e00 <StartCapture+0x318>)
 8000c86:	9201      	str	r2, [sp, #4]
 8000c88:	205a      	movs	r0, #90	; 0x5a
 8000c8a:	21b2      	movs	r1, #178	; 0xb2
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f004 f871 	bl	8004d74 <PutcGenic>
 8000c92:	23f8      	movs	r3, #248	; 0xf8
 8000c94:	021b      	lsls	r3, r3, #8
 8000c96:	1dba      	adds	r2, r7, #6
 8000c98:	8812      	ldrh	r2, [r2, #0]
 8000c9a:	9200      	str	r2, [sp, #0]
 8000c9c:	4a59      	ldr	r2, [pc, #356]	; (8000e04 <StartCapture+0x31c>)
 8000c9e:	9201      	str	r2, [sp, #4]
 8000ca0:	205a      	movs	r0, #90	; 0x5a
 8000ca2:	21c8      	movs	r1, #200	; 0xc8
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f004 f865 	bl	8004d74 <PutcGenic>
 8000caa:	4b57      	ldr	r3, [pc, #348]	; (8000e08 <StartCapture+0x320>)
 8000cac:	4a57      	ldr	r2, [pc, #348]	; (8000e0c <StartCapture+0x324>)
 8000cae:	801a      	strh	r2, [r3, #0]
 8000cb0:	4b4b      	ldr	r3, [pc, #300]	; (8000de0 <StartCapture+0x2f8>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	061b      	lsls	r3, r3, #24
 8000cb6:	0e1a      	lsrs	r2, r3, #24
 8000cb8:	4b55      	ldr	r3, [pc, #340]	; (8000e10 <StartCapture+0x328>)
 8000cba:	701a      	strb	r2, [r3, #0]
 8000cbc:	4b55      	ldr	r3, [pc, #340]	; (8000e14 <StartCapture+0x32c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	701a      	strb	r2, [r3, #0]
 8000cc2:	4b55      	ldr	r3, [pc, #340]	; (8000e18 <StartCapture+0x330>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	801a      	strh	r2, [r3, #0]
 8000cc8:	4b40      	ldr	r3, [pc, #256]	; (8000dcc <StartCapture+0x2e4>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	805a      	strh	r2, [r3, #2]
 8000cce:	f7ff fed7 	bl	8000a80 <UpdateTimebase>
 8000cd2:	4b43      	ldr	r3, [pc, #268]	; (8000de0 <StartCapture+0x2f8>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	061b      	lsls	r3, r3, #24
 8000cd8:	161b      	asrs	r3, r3, #24
 8000cda:	2b0d      	cmp	r3, #13
 8000cdc:	dc0c      	bgt.n	8000cf8 <StartCapture+0x210>
 8000cde:	4b3f      	ldr	r3, [pc, #252]	; (8000ddc <StartCapture+0x2f4>)
 8000ce0:	4a3e      	ldr	r2, [pc, #248]	; (8000ddc <StartCapture+0x2f4>)
 8000ce2:	6852      	ldr	r2, [r2, #4]
 8000ce4:	2120      	movs	r1, #32
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	4b3c      	ldr	r3, [pc, #240]	; (8000ddc <StartCapture+0x2f4>)
 8000cec:	4a3b      	ldr	r2, [pc, #236]	; (8000ddc <StartCapture+0x2f4>)
 8000cee:	6891      	ldr	r1, [r2, #8]
 8000cf0:	4a4a      	ldr	r2, [pc, #296]	; (8000e1c <StartCapture+0x334>)
 8000cf2:	400a      	ands	r2, r1
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	e006      	b.n	8000d06 <StartCapture+0x21e>
 8000cf8:	4b38      	ldr	r3, [pc, #224]	; (8000ddc <StartCapture+0x2f4>)
 8000cfa:	4a38      	ldr	r2, [pc, #224]	; (8000ddc <StartCapture+0x2f4>)
 8000cfc:	6892      	ldr	r2, [r2, #8]
 8000cfe:	2180      	movs	r1, #128	; 0x80
 8000d00:	0049      	lsls	r1, r1, #1
 8000d02:	430a      	orrs	r2, r1
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	4b36      	ldr	r3, [pc, #216]	; (8000de0 <StartCapture+0x2f8>)
 8000d08:	7adb      	ldrb	r3, [r3, #11]
 8000d0a:	061b      	lsls	r3, r3, #24
 8000d0c:	161b      	asrs	r3, r3, #24
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d10a      	bne.n	8000d28 <StartCapture+0x240>
 8000d12:	4b2f      	ldr	r3, [pc, #188]	; (8000dd0 <StartCapture+0x2e8>)
 8000d14:	4a2e      	ldr	r2, [pc, #184]	; (8000dd0 <StartCapture+0x2e8>)
 8000d16:	8c12      	ldrh	r2, [r2, #32]
 8000d18:	0412      	lsls	r2, r2, #16
 8000d1a:	0c12      	lsrs	r2, r2, #16
 8000d1c:	2102      	movs	r1, #2
 8000d1e:	438a      	bics	r2, r1
 8000d20:	0412      	lsls	r2, r2, #16
 8000d22:	0c12      	lsrs	r2, r2, #16
 8000d24:	841a      	strh	r2, [r3, #32]
 8000d26:	e009      	b.n	8000d3c <StartCapture+0x254>
 8000d28:	4b29      	ldr	r3, [pc, #164]	; (8000dd0 <StartCapture+0x2e8>)
 8000d2a:	4a29      	ldr	r2, [pc, #164]	; (8000dd0 <StartCapture+0x2e8>)
 8000d2c:	8c12      	ldrh	r2, [r2, #32]
 8000d2e:	0412      	lsls	r2, r2, #16
 8000d30:	0c12      	lsrs	r2, r2, #16
 8000d32:	2102      	movs	r1, #2
 8000d34:	430a      	orrs	r2, r1
 8000d36:	0412      	lsls	r2, r2, #16
 8000d38:	0c12      	lsrs	r2, r2, #16
 8000d3a:	841a      	strh	r2, [r3, #32]
 8000d3c:	4b35      	ldr	r3, [pc, #212]	; (8000e14 <StartCapture+0x32c>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d03d      	beq.n	8000dc0 <StartCapture+0x2d8>
 8000d44:	4b34      	ldr	r3, [pc, #208]	; (8000e18 <StartCapture+0x330>)
 8000d46:	881a      	ldrh	r2, [r3, #0]
 8000d48:	4b35      	ldr	r3, [pc, #212]	; (8000e20 <StartCapture+0x338>)
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	d112      	bne.n	8000d74 <StartCapture+0x28c>
 8000d4e:	4b32      	ldr	r3, [pc, #200]	; (8000e18 <StartCapture+0x330>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	801a      	strh	r2, [r3, #0]
 8000d54:	4b33      	ldr	r3, [pc, #204]	; (8000e24 <StartCapture+0x33c>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d103      	bne.n	8000d64 <StartCapture+0x27c>
 8000d5c:	4b1b      	ldr	r3, [pc, #108]	; (8000dcc <StartCapture+0x2e4>)
 8000d5e:	22ff      	movs	r2, #255	; 0xff
 8000d60:	805a      	strh	r2, [r3, #2]
 8000d62:	e007      	b.n	8000d74 <StartCapture+0x28c>
 8000d64:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <StartCapture+0x2e4>)
 8000d66:	885b      	ldrh	r3, [r3, #2]
 8000d68:	2208      	movs	r2, #8
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	041b      	lsls	r3, r3, #16
 8000d6e:	0c1a      	lsrs	r2, r3, #16
 8000d70:	4b16      	ldr	r3, [pc, #88]	; (8000dcc <StartCapture+0x2e4>)
 8000d72:	805a      	strh	r2, [r3, #2]
 8000d74:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <StartCapture+0x2e4>)
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	2280      	movs	r2, #128	; 0x80
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	041b      	lsls	r3, r3, #16
 8000d7e:	0c1a      	lsrs	r2, r3, #16
 8000d80:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <StartCapture+0x2e4>)
 8000d82:	801a      	strh	r2, [r3, #0]
 8000d84:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <StartCapture+0x2f8>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	061b      	lsls	r3, r3, #24
 8000d8a:	161b      	asrs	r3, r3, #24
 8000d8c:	2b0d      	cmp	r3, #13
 8000d8e:	dd05      	ble.n	8000d9c <StartCapture+0x2b4>
 8000d90:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <StartCapture+0x2ec>)
 8000d92:	4a10      	ldr	r2, [pc, #64]	; (8000dd4 <StartCapture+0x2ec>)
 8000d94:	6812      	ldr	r2, [r2, #0]
 8000d96:	2101      	movs	r1, #1
 8000d98:	430a      	orrs	r2, r1
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <StartCapture+0x2e8>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	849a      	strh	r2, [r3, #36]	; 0x24
 8000da2:	2380      	movs	r3, #128	; 0x80
 8000da4:	05db      	lsls	r3, r3, #23
 8000da6:	2280      	movs	r2, #128	; 0x80
 8000da8:	05d2      	lsls	r2, r2, #23
 8000daa:	8812      	ldrh	r2, [r2, #0]
 8000dac:	0412      	lsls	r2, r2, #16
 8000dae:	0c12      	lsrs	r2, r2, #16
 8000db0:	2101      	movs	r1, #1
 8000db2:	430a      	orrs	r2, r1
 8000db4:	0412      	lsls	r2, r2, #16
 8000db6:	0c12      	lsrs	r2, r2, #16
 8000db8:	801a      	strh	r2, [r3, #0]
 8000dba:	e002      	b.n	8000dc2 <StartCapture+0x2da>
 8000dbc:	46c0      	nop			; (mov r8, r8)
 8000dbe:	e000      	b.n	8000dc2 <StartCapture+0x2da>
 8000dc0:	46c0      	nop			; (mov r8, r8)
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	b002      	add	sp, #8
 8000dc6:	bc80      	pop	{r7}
 8000dc8:	bc01      	pop	{r0}
 8000dca:	4700      	bx	r0
 8000dcc:	2000233c 	.word	0x2000233c
 8000dd0:	40012c00 	.word	0x40012c00
 8000dd4:	40020008 	.word	0x40020008
 8000dd8:	40020000 	.word	0x40020000
 8000ddc:	40012400 	.word	0x40012400
 8000de0:	200009c8 	.word	0x200009c8
 8000de4:	20001b08 	.word	0x20001b08
 8000de8:	200009dc 	.word	0x200009dc
 8000dec:	200026e8 	.word	0x200026e8
 8000df0:	0000f3a5 	.word	0x0000f3a5
 8000df4:	20000040 	.word	0x20000040
 8000df8:	20000034 	.word	0x20000034
 8000dfc:	20000010 	.word	0x20000010
 8000e00:	2000001c 	.word	0x2000001c
 8000e04:	20000028 	.word	0x20000028
 8000e08:	200001ac 	.word	0x200001ac
 8000e0c:	00000bb8 	.word	0x00000bb8
 8000e10:	20000186 	.word	0x20000186
 8000e14:	20000187 	.word	0x20000187
 8000e18:	200025b8 	.word	0x200025b8
 8000e1c:	fffffeff 	.word	0xfffffeff
 8000e20:	000005dc 	.word	0x000005dc
 8000e24:	20000180 	.word	0x20000180

08000e28 <ProcCapture>:
 8000e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e2a:	4647      	mov	r7, r8
 8000e2c:	b480      	push	{r7}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4b8f      	ldr	r3, [pc, #572]	; (8001070 <ProcCapture+0x248>)
 8000e34:	2280      	movs	r2, #128	; 0x80
 8000e36:	0212      	lsls	r2, r2, #8
 8000e38:	611a      	str	r2, [r3, #16]
 8000e3a:	4b8e      	ldr	r3, [pc, #568]	; (8001074 <ProcCapture+0x24c>)
 8000e3c:	881b      	ldrh	r3, [r3, #0]
 8000e3e:	1c1a      	adds	r2, r3, #0
 8000e40:	2302      	movs	r3, #2
 8000e42:	4013      	ands	r3, r2
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d043      	beq.n	8000ed0 <ProcCapture+0xa8>
 8000e48:	e008      	b.n	8000e5c <ProcCapture+0x34>
 8000e4a:	4b8a      	ldr	r3, [pc, #552]	; (8001074 <ProcCapture+0x24c>)
 8000e4c:	8a1a      	ldrh	r2, [r3, #16]
 8000e4e:	4b8a      	ldr	r3, [pc, #552]	; (8001078 <ProcCapture+0x250>)
 8000e50:	8a1b      	ldrh	r3, [r3, #16]
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	041b      	lsls	r3, r3, #16
 8000e56:	0c1a      	lsrs	r2, r3, #16
 8000e58:	4b86      	ldr	r3, [pc, #536]	; (8001074 <ProcCapture+0x24c>)
 8000e5a:	821a      	strh	r2, [r3, #16]
 8000e5c:	4b85      	ldr	r3, [pc, #532]	; (8001074 <ProcCapture+0x24c>)
 8000e5e:	8a1a      	ldrh	r2, [r3, #16]
 8000e60:	4b85      	ldr	r3, [pc, #532]	; (8001078 <ProcCapture+0x250>)
 8000e62:	8a1b      	ldrh	r3, [r3, #16]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d2f0      	bcs.n	8000e4a <ProcCapture+0x22>
 8000e68:	4b84      	ldr	r3, [pc, #528]	; (800107c <ProcCapture+0x254>)
 8000e6a:	68da      	ldr	r2, [r3, #12]
 8000e6c:	4b82      	ldr	r3, [pc, #520]	; (8001078 <ProcCapture+0x250>)
 8000e6e:	8a1b      	ldrh	r3, [r3, #16]
 8000e70:	1c19      	adds	r1, r3, #0
 8000e72:	4b81      	ldr	r3, [pc, #516]	; (8001078 <ProcCapture+0x250>)
 8000e74:	89db      	ldrh	r3, [r3, #14]
 8000e76:	041b      	lsls	r3, r3, #16
 8000e78:	141b      	asrs	r3, r3, #16
 8000e7a:	1acb      	subs	r3, r1, r3
 8000e7c:	1c19      	adds	r1, r3, #0
 8000e7e:	4b7d      	ldr	r3, [pc, #500]	; (8001074 <ProcCapture+0x24c>)
 8000e80:	8a1b      	ldrh	r3, [r3, #16]
 8000e82:	18cb      	adds	r3, r1, r3
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	18d3      	adds	r3, r2, r3
 8000e88:	1c1a      	adds	r2, r3, #0
 8000e8a:	4b7a      	ldr	r3, [pc, #488]	; (8001074 <ProcCapture+0x24c>)
 8000e8c:	615a      	str	r2, [r3, #20]
 8000e8e:	4b79      	ldr	r3, [pc, #484]	; (8001074 <ProcCapture+0x24c>)
 8000e90:	695a      	ldr	r2, [r3, #20]
 8000e92:	4b7a      	ldr	r3, [pc, #488]	; (800107c <ProcCapture+0x254>)
 8000e94:	68d9      	ldr	r1, [r3, #12]
 8000e96:	4b78      	ldr	r3, [pc, #480]	; (8001078 <ProcCapture+0x250>)
 8000e98:	8a1b      	ldrh	r3, [r3, #16]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	18cb      	adds	r3, r1, r3
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d308      	bcc.n	8000eb4 <ProcCapture+0x8c>
 8000ea2:	4b74      	ldr	r3, [pc, #464]	; (8001074 <ProcCapture+0x24c>)
 8000ea4:	695a      	ldr	r2, [r3, #20]
 8000ea6:	4b74      	ldr	r3, [pc, #464]	; (8001078 <ProcCapture+0x250>)
 8000ea8:	8a1b      	ldrh	r3, [r3, #16]
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	425b      	negs	r3, r3
 8000eae:	18d2      	adds	r2, r2, r3
 8000eb0:	4b70      	ldr	r3, [pc, #448]	; (8001074 <ProcCapture+0x24c>)
 8000eb2:	615a      	str	r2, [r3, #20]
 8000eb4:	4b70      	ldr	r3, [pc, #448]	; (8001078 <ProcCapture+0x250>)
 8000eb6:	7a9b      	ldrb	r3, [r3, #10]
 8000eb8:	061b      	lsls	r3, r3, #24
 8000eba:	161b      	asrs	r3, r3, #24
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d107      	bne.n	8000ed0 <ProcCapture+0xa8>
 8000ec0:	4b6c      	ldr	r3, [pc, #432]	; (8001074 <ProcCapture+0x24c>)
 8000ec2:	881b      	ldrh	r3, [r3, #0]
 8000ec4:	2220      	movs	r2, #32
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	041b      	lsls	r3, r3, #16
 8000eca:	0c1a      	lsrs	r2, r3, #16
 8000ecc:	4b69      	ldr	r3, [pc, #420]	; (8001074 <ProcCapture+0x24c>)
 8000ece:	801a      	strh	r2, [r3, #0]
 8000ed0:	4b68      	ldr	r3, [pc, #416]	; (8001074 <ProcCapture+0x24c>)
 8000ed2:	881b      	ldrh	r3, [r3, #0]
 8000ed4:	1c1a      	adds	r2, r3, #0
 8000ed6:	2304      	movs	r3, #4
 8000ed8:	4013      	ands	r3, r2
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <ProcCapture+0xba>
 8000ede:	f000 fed1 	bl	8001c84 <ProcCapture+0xe5c>
 8000ee2:	4b65      	ldr	r3, [pc, #404]	; (8001078 <ProcCapture+0x250>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	061b      	lsls	r3, r3, #24
 8000ee8:	161b      	asrs	r3, r3, #24
 8000eea:	2b16      	cmp	r3, #22
 8000eec:	dc3c      	bgt.n	8000f68 <ProcCapture+0x140>
 8000eee:	4b61      	ldr	r3, [pc, #388]	; (8001074 <ProcCapture+0x24c>)
 8000ef0:	695b      	ldr	r3, [r3, #20]
 8000ef2:	617b      	str	r3, [r7, #20]
 8000ef4:	4b62      	ldr	r3, [pc, #392]	; (8001080 <ProcCapture+0x258>)
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60bb      	str	r3, [r7, #8]
 8000efc:	1c3b      	adds	r3, r7, #0
 8000efe:	330e      	adds	r3, #14
 8000f00:	4a5d      	ldr	r2, [pc, #372]	; (8001078 <ProcCapture+0x250>)
 8000f02:	8a12      	ldrh	r2, [r2, #16]
 8000f04:	801a      	strh	r2, [r3, #0]
 8000f06:	e01f      	b.n	8000f48 <ProcCapture+0x120>
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	881a      	ldrh	r2, [r3, #0]
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	801a      	strh	r2, [r3, #0]
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	881b      	ldrh	r3, [r3, #0]
 8000f14:	68ba      	ldr	r2, [r7, #8]
 8000f16:	18d3      	adds	r3, r2, r3
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	3302      	adds	r3, #2
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	3302      	adds	r3, #2
 8000f24:	617b      	str	r3, [r7, #20]
 8000f26:	4b54      	ldr	r3, [pc, #336]	; (8001078 <ProcCapture+0x250>)
 8000f28:	8a1b      	ldrh	r3, [r3, #16]
 8000f2a:	005a      	lsls	r2, r3, #1
 8000f2c:	4b55      	ldr	r3, [pc, #340]	; (8001084 <ProcCapture+0x25c>)
 8000f2e:	18d2      	adds	r2, r2, r3
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d801      	bhi.n	8000f3a <ProcCapture+0x112>
 8000f36:	4b53      	ldr	r3, [pc, #332]	; (8001084 <ProcCapture+0x25c>)
 8000f38:	617b      	str	r3, [r7, #20]
 8000f3a:	1c3b      	adds	r3, r7, #0
 8000f3c:	330e      	adds	r3, #14
 8000f3e:	1c3a      	adds	r2, r7, #0
 8000f40:	320e      	adds	r2, #14
 8000f42:	8812      	ldrh	r2, [r2, #0]
 8000f44:	3a01      	subs	r2, #1
 8000f46:	801a      	strh	r2, [r3, #0]
 8000f48:	1c3b      	adds	r3, r7, #0
 8000f4a:	330e      	adds	r3, #14
 8000f4c:	881b      	ldrh	r3, [r3, #0]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d1da      	bne.n	8000f08 <ProcCapture+0xe0>
 8000f52:	4b49      	ldr	r3, [pc, #292]	; (8001078 <ProcCapture+0x250>)
 8000f54:	8a1b      	ldrh	r3, [r3, #16]
 8000f56:	68b8      	ldr	r0, [r7, #8]
 8000f58:	1c19      	adds	r1, r3, #0
 8000f5a:	f002 fa11 	bl	8003380 <__udivsi3>
 8000f5e:	1c03      	adds	r3, r0, #0
 8000f60:	041b      	lsls	r3, r3, #16
 8000f62:	0c1a      	lsrs	r2, r3, #16
 8000f64:	4b43      	ldr	r3, [pc, #268]	; (8001074 <ProcCapture+0x24c>)
 8000f66:	81da      	strh	r2, [r3, #14]
 8000f68:	4b43      	ldr	r3, [pc, #268]	; (8001078 <ProcCapture+0x250>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	061b      	lsls	r3, r3, #24
 8000f6e:	161b      	asrs	r3, r3, #24
 8000f70:	2b17      	cmp	r3, #23
 8000f72:	d007      	beq.n	8000f84 <ProcCapture+0x15c>
 8000f74:	4b40      	ldr	r3, [pc, #256]	; (8001078 <ProcCapture+0x250>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	061b      	lsls	r3, r3, #24
 8000f7a:	161b      	asrs	r3, r3, #24
 8000f7c:	2b18      	cmp	r3, #24
 8000f7e:	d001      	beq.n	8000f84 <ProcCapture+0x15c>
 8000f80:	f000 fe7d 	bl	8001c7e <ProcCapture+0xe56>
 8000f84:	4b3f      	ldr	r3, [pc, #252]	; (8001084 <ProcCapture+0x25c>)
 8000f86:	617b      	str	r3, [r7, #20]
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	1c3b      	adds	r3, r7, #0
 8000f8e:	330e      	adds	r3, #14
 8000f90:	2200      	movs	r2, #0
 8000f92:	801a      	strh	r2, [r3, #0]
 8000f94:	e00e      	b.n	8000fb4 <ProcCapture+0x18c>
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	881b      	ldrh	r3, [r3, #0]
 8000f9a:	68ba      	ldr	r2, [r7, #8]
 8000f9c:	18d3      	adds	r3, r2, r3
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	3302      	adds	r3, #2
 8000fa4:	617b      	str	r3, [r7, #20]
 8000fa6:	1c3b      	adds	r3, r7, #0
 8000fa8:	330e      	adds	r3, #14
 8000faa:	1c3a      	adds	r2, r7, #0
 8000fac:	320e      	adds	r2, #14
 8000fae:	8812      	ldrh	r2, [r2, #0]
 8000fb0:	3201      	adds	r2, #1
 8000fb2:	801a      	strh	r2, [r3, #0]
 8000fb4:	4b30      	ldr	r3, [pc, #192]	; (8001078 <ProcCapture+0x250>)
 8000fb6:	8a1b      	ldrh	r3, [r3, #16]
 8000fb8:	1c3a      	adds	r2, r7, #0
 8000fba:	320e      	adds	r2, #14
 8000fbc:	8812      	ldrh	r2, [r2, #0]
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d3e9      	bcc.n	8000f96 <ProcCapture+0x16e>
 8000fc2:	4b2d      	ldr	r3, [pc, #180]	; (8001078 <ProcCapture+0x250>)
 8000fc4:	8a1b      	ldrh	r3, [r3, #16]
 8000fc6:	68b8      	ldr	r0, [r7, #8]
 8000fc8:	1c19      	adds	r1, r3, #0
 8000fca:	f002 f9d9 	bl	8003380 <__udivsi3>
 8000fce:	1c03      	adds	r3, r0, #0
 8000fd0:	1c1a      	adds	r2, r3, #0
 8000fd2:	1cbb      	adds	r3, r7, #2
 8000fd4:	801a      	strh	r2, [r3, #0]
 8000fd6:	1cbb      	adds	r3, r7, #2
 8000fd8:	881a      	ldrh	r2, [r3, #0]
 8000fda:	4b26      	ldr	r3, [pc, #152]	; (8001074 <ProcCapture+0x24c>)
 8000fdc:	81da      	strh	r2, [r3, #14]
 8000fde:	4b25      	ldr	r3, [pc, #148]	; (8001074 <ProcCapture+0x24c>)
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	4b28      	ldr	r3, [pc, #160]	; (8001088 <ProcCapture+0x260>)
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	1c3b      	adds	r3, r7, #0
 8000fea:	330e      	adds	r3, #14
 8000fec:	2200      	movs	r2, #0
 8000fee:	801a      	strh	r2, [r3, #0]
 8000ff0:	e023      	b.n	800103a <ProcCapture+0x212>
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	881a      	ldrh	r2, [r3, #0]
 8000ff6:	1cbb      	adds	r3, r7, #2
 8000ff8:	881b      	ldrh	r3, [r3, #0]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	041b      	lsls	r3, r3, #16
 8000ffe:	0c1b      	lsrs	r3, r3, #16
 8001000:	041b      	lsls	r3, r3, #16
 8001002:	0c1a      	lsrs	r2, r3, #16
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	801a      	strh	r2, [r3, #0]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3302      	adds	r3, #2
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	3302      	adds	r3, #2
 8001012:	617b      	str	r3, [r7, #20]
 8001014:	4b18      	ldr	r3, [pc, #96]	; (8001078 <ProcCapture+0x250>)
 8001016:	8a1b      	ldrh	r3, [r3, #16]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	1c1a      	adds	r2, r3, #0
 800101c:	4b19      	ldr	r3, [pc, #100]	; (8001084 <ProcCapture+0x25c>)
 800101e:	18d3      	adds	r3, r2, r3
 8001020:	1c1a      	adds	r2, r3, #0
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	429a      	cmp	r2, r3
 8001026:	d801      	bhi.n	800102c <ProcCapture+0x204>
 8001028:	4b16      	ldr	r3, [pc, #88]	; (8001084 <ProcCapture+0x25c>)
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	1c3b      	adds	r3, r7, #0
 800102e:	330e      	adds	r3, #14
 8001030:	1c3a      	adds	r2, r7, #0
 8001032:	320e      	adds	r2, #14
 8001034:	8812      	ldrh	r2, [r2, #0]
 8001036:	3201      	adds	r2, #1
 8001038:	801a      	strh	r2, [r3, #0]
 800103a:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <ProcCapture+0x250>)
 800103c:	8a1b      	ldrh	r3, [r3, #16]
 800103e:	1c3a      	adds	r2, r7, #0
 8001040:	320e      	adds	r2, #14
 8001042:	8812      	ldrh	r2, [r2, #0]
 8001044:	429a      	cmp	r2, r3
 8001046:	d3d4      	bcc.n	8000ff2 <ProcCapture+0x1ca>
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <ProcCapture+0x260>)
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <ProcCapture+0x258>)
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	4b09      	ldr	r3, [pc, #36]	; (8001078 <ProcCapture+0x250>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	061b      	lsls	r3, r3, #24
 8001056:	161b      	asrs	r3, r3, #24
 8001058:	2b17      	cmp	r3, #23
 800105a:	d004      	beq.n	8001066 <ProcCapture+0x23e>
 800105c:	2b18      	cmp	r3, #24
 800105e:	d100      	bne.n	8001062 <ProcCapture+0x23a>
 8001060:	e305      	b.n	800166e <ProcCapture+0x846>
 8001062:	f000 fe0c 	bl	8001c7e <ProcCapture+0xe56>
 8001066:	1c3b      	adds	r3, r7, #0
 8001068:	330e      	adds	r3, #14
 800106a:	2200      	movs	r2, #0
 800106c:	801a      	strh	r2, [r3, #0]
 800106e:	e2ee      	b.n	800164e <ProcCapture+0x826>
 8001070:	40010800 	.word	0x40010800
 8001074:	2000233c 	.word	0x2000233c
 8001078:	200009c8 	.word	0x200009c8
 800107c:	40020008 	.word	0x40020008
 8001080:	20001b08 	.word	0x20001b08
 8001084:	200009dc 	.word	0x200009dc
 8001088:	200011dc 	.word	0x200011dc
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3304      	adds	r3, #4
 8001090:	881b      	ldrh	r3, [r3, #0]
 8001092:	041b      	lsls	r3, r3, #16
 8001094:	0c1a      	lsrs	r2, r3, #16
 8001096:	1cbb      	adds	r3, r7, #2
 8001098:	881b      	ldrh	r3, [r3, #0]
 800109a:	18d3      	adds	r3, r2, r3
 800109c:	041b      	lsls	r3, r3, #16
 800109e:	0c1a      	lsrs	r2, r3, #16
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	801a      	strh	r2, [r3, #0]
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	3302      	adds	r3, #2
 80010a8:	4698      	mov	r8, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	881b      	ldrh	r3, [r3, #0]
 80010ae:	041b      	lsls	r3, r3, #16
 80010b0:	141b      	asrs	r3, r3, #16
 80010b2:	1c18      	adds	r0, r3, #0
 80010b4:	f002 fe78 	bl	8003da8 <__aeabi_i2f>
 80010b8:	1c03      	adds	r3, r0, #0
 80010ba:	1c18      	adds	r0, r3, #0
 80010bc:	f002 fad8 	bl	8003670 <__aeabi_f2d>
 80010c0:	1c03      	adds	r3, r0, #0
 80010c2:	1c0c      	adds	r4, r1, #0
 80010c4:	1c18      	adds	r0, r3, #0
 80010c6:	1c21      	adds	r1, r4, #0
 80010c8:	4bee      	ldr	r3, [pc, #952]	; (8001484 <ProcCapture+0x65c>)
 80010ca:	4aed      	ldr	r2, [pc, #948]	; (8001480 <ProcCapture+0x658>)
 80010cc:	f002 fb28 	bl	8003720 <__aeabi_dmul>
 80010d0:	1c03      	adds	r3, r0, #0
 80010d2:	1c0c      	adds	r4, r1, #0
 80010d4:	1c1d      	adds	r5, r3, #0
 80010d6:	1c26      	adds	r6, r4, #0
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3302      	adds	r3, #2
 80010dc:	881b      	ldrh	r3, [r3, #0]
 80010de:	041b      	lsls	r3, r3, #16
 80010e0:	141b      	asrs	r3, r3, #16
 80010e2:	1c18      	adds	r0, r3, #0
 80010e4:	f002 fe60 	bl	8003da8 <__aeabi_i2f>
 80010e8:	1c03      	adds	r3, r0, #0
 80010ea:	1c18      	adds	r0, r3, #0
 80010ec:	f002 fac0 	bl	8003670 <__aeabi_f2d>
 80010f0:	1c03      	adds	r3, r0, #0
 80010f2:	1c0c      	adds	r4, r1, #0
 80010f4:	1c18      	adds	r0, r3, #0
 80010f6:	1c21      	adds	r1, r4, #0
 80010f8:	4ae3      	ldr	r2, [pc, #908]	; (8001488 <ProcCapture+0x660>)
 80010fa:	4be4      	ldr	r3, [pc, #912]	; (800148c <ProcCapture+0x664>)
 80010fc:	f002 fb10 	bl	8003720 <__aeabi_dmul>
 8001100:	1c03      	adds	r3, r0, #0
 8001102:	1c0c      	adds	r4, r1, #0
 8001104:	1c28      	adds	r0, r5, #0
 8001106:	1c31      	adds	r1, r6, #0
 8001108:	1c1a      	adds	r2, r3, #0
 800110a:	1c23      	adds	r3, r4, #0
 800110c:	f002 f952 	bl	80033b4 <__adddf3>
 8001110:	1c03      	adds	r3, r0, #0
 8001112:	1c0c      	adds	r4, r1, #0
 8001114:	1c1d      	adds	r5, r3, #0
 8001116:	1c26      	adds	r6, r4, #0
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3304      	adds	r3, #4
 800111c:	881b      	ldrh	r3, [r3, #0]
 800111e:	041b      	lsls	r3, r3, #16
 8001120:	141b      	asrs	r3, r3, #16
 8001122:	1c18      	adds	r0, r3, #0
 8001124:	f002 fe40 	bl	8003da8 <__aeabi_i2f>
 8001128:	1c03      	adds	r3, r0, #0
 800112a:	1c18      	adds	r0, r3, #0
 800112c:	f002 faa0 	bl	8003670 <__aeabi_f2d>
 8001130:	1c03      	adds	r3, r0, #0
 8001132:	1c0c      	adds	r4, r1, #0
 8001134:	1c18      	adds	r0, r3, #0
 8001136:	1c21      	adds	r1, r4, #0
 8001138:	4ad5      	ldr	r2, [pc, #852]	; (8001490 <ProcCapture+0x668>)
 800113a:	4bd6      	ldr	r3, [pc, #856]	; (8001494 <ProcCapture+0x66c>)
 800113c:	f002 faf0 	bl	8003720 <__aeabi_dmul>
 8001140:	1c03      	adds	r3, r0, #0
 8001142:	1c0c      	adds	r4, r1, #0
 8001144:	1c28      	adds	r0, r5, #0
 8001146:	1c31      	adds	r1, r6, #0
 8001148:	1c1a      	adds	r2, r3, #0
 800114a:	1c23      	adds	r3, r4, #0
 800114c:	f002 f932 	bl	80033b4 <__adddf3>
 8001150:	1c03      	adds	r3, r0, #0
 8001152:	1c0c      	adds	r4, r1, #0
 8001154:	1c1d      	adds	r5, r3, #0
 8001156:	1c26      	adds	r6, r4, #0
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3306      	adds	r3, #6
 800115c:	881b      	ldrh	r3, [r3, #0]
 800115e:	041b      	lsls	r3, r3, #16
 8001160:	141b      	asrs	r3, r3, #16
 8001162:	1c18      	adds	r0, r3, #0
 8001164:	f002 fe20 	bl	8003da8 <__aeabi_i2f>
 8001168:	1c03      	adds	r3, r0, #0
 800116a:	1c18      	adds	r0, r3, #0
 800116c:	f002 fa80 	bl	8003670 <__aeabi_f2d>
 8001170:	1c03      	adds	r3, r0, #0
 8001172:	1c0c      	adds	r4, r1, #0
 8001174:	1c18      	adds	r0, r3, #0
 8001176:	1c21      	adds	r1, r4, #0
 8001178:	4ac7      	ldr	r2, [pc, #796]	; (8001498 <ProcCapture+0x670>)
 800117a:	4bc8      	ldr	r3, [pc, #800]	; (800149c <ProcCapture+0x674>)
 800117c:	f002 fad0 	bl	8003720 <__aeabi_dmul>
 8001180:	1c03      	adds	r3, r0, #0
 8001182:	1c0c      	adds	r4, r1, #0
 8001184:	1c28      	adds	r0, r5, #0
 8001186:	1c31      	adds	r1, r6, #0
 8001188:	1c1a      	adds	r2, r3, #0
 800118a:	1c23      	adds	r3, r4, #0
 800118c:	f002 f912 	bl	80033b4 <__adddf3>
 8001190:	1c03      	adds	r3, r0, #0
 8001192:	1c0c      	adds	r4, r1, #0
 8001194:	1c1d      	adds	r5, r3, #0
 8001196:	1c26      	adds	r6, r4, #0
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3308      	adds	r3, #8
 800119c:	881b      	ldrh	r3, [r3, #0]
 800119e:	041b      	lsls	r3, r3, #16
 80011a0:	141b      	asrs	r3, r3, #16
 80011a2:	1c18      	adds	r0, r3, #0
 80011a4:	f002 fe00 	bl	8003da8 <__aeabi_i2f>
 80011a8:	1c03      	adds	r3, r0, #0
 80011aa:	1c18      	adds	r0, r3, #0
 80011ac:	f002 fa60 	bl	8003670 <__aeabi_f2d>
 80011b0:	1c03      	adds	r3, r0, #0
 80011b2:	1c0c      	adds	r4, r1, #0
 80011b4:	1c18      	adds	r0, r3, #0
 80011b6:	1c21      	adds	r1, r4, #0
 80011b8:	4ab9      	ldr	r2, [pc, #740]	; (80014a0 <ProcCapture+0x678>)
 80011ba:	4bba      	ldr	r3, [pc, #744]	; (80014a4 <ProcCapture+0x67c>)
 80011bc:	f002 fab0 	bl	8003720 <__aeabi_dmul>
 80011c0:	1c03      	adds	r3, r0, #0
 80011c2:	1c0c      	adds	r4, r1, #0
 80011c4:	1c28      	adds	r0, r5, #0
 80011c6:	1c31      	adds	r1, r6, #0
 80011c8:	1c1a      	adds	r2, r3, #0
 80011ca:	1c23      	adds	r3, r4, #0
 80011cc:	f002 f8f2 	bl	80033b4 <__adddf3>
 80011d0:	1c03      	adds	r3, r0, #0
 80011d2:	1c0c      	adds	r4, r1, #0
 80011d4:	1c18      	adds	r0, r3, #0
 80011d6:	1c21      	adds	r1, r4, #0
 80011d8:	f002 fcb4 	bl	8003b44 <__aeabi_d2iz>
 80011dc:	1c03      	adds	r3, r0, #0
 80011de:	041b      	lsls	r3, r3, #16
 80011e0:	0c1b      	lsrs	r3, r3, #16
 80011e2:	041b      	lsls	r3, r3, #16
 80011e4:	0c1a      	lsrs	r2, r3, #16
 80011e6:	1cbb      	adds	r3, r7, #2
 80011e8:	881b      	ldrh	r3, [r3, #0]
 80011ea:	18d3      	adds	r3, r2, r3
 80011ec:	041b      	lsls	r3, r3, #16
 80011ee:	0c1b      	lsrs	r3, r3, #16
 80011f0:	4642      	mov	r2, r8
 80011f2:	8013      	strh	r3, [r2, #0]
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	3304      	adds	r3, #4
 80011f8:	4698      	mov	r8, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	3302      	adds	r3, #2
 80011fe:	881b      	ldrh	r3, [r3, #0]
 8001200:	041b      	lsls	r3, r3, #16
 8001202:	141b      	asrs	r3, r3, #16
 8001204:	1c18      	adds	r0, r3, #0
 8001206:	f002 fdcf 	bl	8003da8 <__aeabi_i2f>
 800120a:	1c03      	adds	r3, r0, #0
 800120c:	1c18      	adds	r0, r3, #0
 800120e:	f002 fa2f 	bl	8003670 <__aeabi_f2d>
 8001212:	1c03      	adds	r3, r0, #0
 8001214:	1c0c      	adds	r4, r1, #0
 8001216:	1c18      	adds	r0, r3, #0
 8001218:	1c21      	adds	r1, r4, #0
 800121a:	4aa1      	ldr	r2, [pc, #644]	; (80014a0 <ProcCapture+0x678>)
 800121c:	4ba1      	ldr	r3, [pc, #644]	; (80014a4 <ProcCapture+0x67c>)
 800121e:	f002 fa7f 	bl	8003720 <__aeabi_dmul>
 8001222:	1c03      	adds	r3, r0, #0
 8001224:	1c0c      	adds	r4, r1, #0
 8001226:	1c1d      	adds	r5, r3, #0
 8001228:	1c26      	adds	r6, r4, #0
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	3304      	adds	r3, #4
 800122e:	881b      	ldrh	r3, [r3, #0]
 8001230:	041b      	lsls	r3, r3, #16
 8001232:	141b      	asrs	r3, r3, #16
 8001234:	1c18      	adds	r0, r3, #0
 8001236:	f002 fdb7 	bl	8003da8 <__aeabi_i2f>
 800123a:	1c03      	adds	r3, r0, #0
 800123c:	1c18      	adds	r0, r3, #0
 800123e:	f002 fa17 	bl	8003670 <__aeabi_f2d>
 8001242:	1c03      	adds	r3, r0, #0
 8001244:	1c0c      	adds	r4, r1, #0
 8001246:	1c18      	adds	r0, r3, #0
 8001248:	1c21      	adds	r1, r4, #0
 800124a:	4a97      	ldr	r2, [pc, #604]	; (80014a8 <ProcCapture+0x680>)
 800124c:	4b97      	ldr	r3, [pc, #604]	; (80014ac <ProcCapture+0x684>)
 800124e:	f002 fa67 	bl	8003720 <__aeabi_dmul>
 8001252:	1c03      	adds	r3, r0, #0
 8001254:	1c0c      	adds	r4, r1, #0
 8001256:	1c28      	adds	r0, r5, #0
 8001258:	1c31      	adds	r1, r6, #0
 800125a:	1c1a      	adds	r2, r3, #0
 800125c:	1c23      	adds	r3, r4, #0
 800125e:	f002 f8a9 	bl	80033b4 <__adddf3>
 8001262:	1c03      	adds	r3, r0, #0
 8001264:	1c0c      	adds	r4, r1, #0
 8001266:	1c1d      	adds	r5, r3, #0
 8001268:	1c26      	adds	r6, r4, #0
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	3306      	adds	r3, #6
 800126e:	881b      	ldrh	r3, [r3, #0]
 8001270:	041b      	lsls	r3, r3, #16
 8001272:	141b      	asrs	r3, r3, #16
 8001274:	1c18      	adds	r0, r3, #0
 8001276:	f002 fd97 	bl	8003da8 <__aeabi_i2f>
 800127a:	1c03      	adds	r3, r0, #0
 800127c:	1c18      	adds	r0, r3, #0
 800127e:	f002 f9f7 	bl	8003670 <__aeabi_f2d>
 8001282:	1c03      	adds	r3, r0, #0
 8001284:	1c0c      	adds	r4, r1, #0
 8001286:	1c18      	adds	r0, r3, #0
 8001288:	1c21      	adds	r1, r4, #0
 800128a:	4a89      	ldr	r2, [pc, #548]	; (80014b0 <ProcCapture+0x688>)
 800128c:	4b89      	ldr	r3, [pc, #548]	; (80014b4 <ProcCapture+0x68c>)
 800128e:	f002 fa47 	bl	8003720 <__aeabi_dmul>
 8001292:	1c03      	adds	r3, r0, #0
 8001294:	1c0c      	adds	r4, r1, #0
 8001296:	1c28      	adds	r0, r5, #0
 8001298:	1c31      	adds	r1, r6, #0
 800129a:	1c1a      	adds	r2, r3, #0
 800129c:	1c23      	adds	r3, r4, #0
 800129e:	f002 f889 	bl	80033b4 <__adddf3>
 80012a2:	1c03      	adds	r3, r0, #0
 80012a4:	1c0c      	adds	r4, r1, #0
 80012a6:	1c1d      	adds	r5, r3, #0
 80012a8:	1c26      	adds	r6, r4, #0
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	3308      	adds	r3, #8
 80012ae:	881b      	ldrh	r3, [r3, #0]
 80012b0:	041b      	lsls	r3, r3, #16
 80012b2:	141b      	asrs	r3, r3, #16
 80012b4:	1c18      	adds	r0, r3, #0
 80012b6:	f002 fd77 	bl	8003da8 <__aeabi_i2f>
 80012ba:	1c03      	adds	r3, r0, #0
 80012bc:	1c18      	adds	r0, r3, #0
 80012be:	f002 f9d7 	bl	8003670 <__aeabi_f2d>
 80012c2:	1c03      	adds	r3, r0, #0
 80012c4:	1c0c      	adds	r4, r1, #0
 80012c6:	1c18      	adds	r0, r3, #0
 80012c8:	1c21      	adds	r1, r4, #0
 80012ca:	4a7b      	ldr	r2, [pc, #492]	; (80014b8 <ProcCapture+0x690>)
 80012cc:	4b7b      	ldr	r3, [pc, #492]	; (80014bc <ProcCapture+0x694>)
 80012ce:	f002 fa27 	bl	8003720 <__aeabi_dmul>
 80012d2:	1c03      	adds	r3, r0, #0
 80012d4:	1c0c      	adds	r4, r1, #0
 80012d6:	1c28      	adds	r0, r5, #0
 80012d8:	1c31      	adds	r1, r6, #0
 80012da:	1c1a      	adds	r2, r3, #0
 80012dc:	1c23      	adds	r3, r4, #0
 80012de:	f002 f869 	bl	80033b4 <__adddf3>
 80012e2:	1c03      	adds	r3, r0, #0
 80012e4:	1c0c      	adds	r4, r1, #0
 80012e6:	1c1d      	adds	r5, r3, #0
 80012e8:	1c26      	adds	r6, r4, #0
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	330a      	adds	r3, #10
 80012ee:	881b      	ldrh	r3, [r3, #0]
 80012f0:	041b      	lsls	r3, r3, #16
 80012f2:	141b      	asrs	r3, r3, #16
 80012f4:	1c18      	adds	r0, r3, #0
 80012f6:	f002 fd57 	bl	8003da8 <__aeabi_i2f>
 80012fa:	1c03      	adds	r3, r0, #0
 80012fc:	1c18      	adds	r0, r3, #0
 80012fe:	f002 f9b7 	bl	8003670 <__aeabi_f2d>
 8001302:	1c03      	adds	r3, r0, #0
 8001304:	1c0c      	adds	r4, r1, #0
 8001306:	1c18      	adds	r0, r3, #0
 8001308:	1c21      	adds	r1, r4, #0
 800130a:	4b5e      	ldr	r3, [pc, #376]	; (8001484 <ProcCapture+0x65c>)
 800130c:	4a5c      	ldr	r2, [pc, #368]	; (8001480 <ProcCapture+0x658>)
 800130e:	f002 fa07 	bl	8003720 <__aeabi_dmul>
 8001312:	1c03      	adds	r3, r0, #0
 8001314:	1c0c      	adds	r4, r1, #0
 8001316:	1c28      	adds	r0, r5, #0
 8001318:	1c31      	adds	r1, r6, #0
 800131a:	1c1a      	adds	r2, r3, #0
 800131c:	1c23      	adds	r3, r4, #0
 800131e:	f002 f849 	bl	80033b4 <__adddf3>
 8001322:	1c03      	adds	r3, r0, #0
 8001324:	1c0c      	adds	r4, r1, #0
 8001326:	1c18      	adds	r0, r3, #0
 8001328:	1c21      	adds	r1, r4, #0
 800132a:	f002 fc0b 	bl	8003b44 <__aeabi_d2iz>
 800132e:	1c03      	adds	r3, r0, #0
 8001330:	041b      	lsls	r3, r3, #16
 8001332:	0c1b      	lsrs	r3, r3, #16
 8001334:	041b      	lsls	r3, r3, #16
 8001336:	0c1a      	lsrs	r2, r3, #16
 8001338:	1cbb      	adds	r3, r7, #2
 800133a:	881b      	ldrh	r3, [r3, #0]
 800133c:	18d3      	adds	r3, r2, r3
 800133e:	041b      	lsls	r3, r3, #16
 8001340:	0c1b      	lsrs	r3, r3, #16
 8001342:	4642      	mov	r2, r8
 8001344:	8013      	strh	r3, [r2, #0]
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	3306      	adds	r3, #6
 800134a:	4698      	mov	r8, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3302      	adds	r3, #2
 8001350:	881b      	ldrh	r3, [r3, #0]
 8001352:	041b      	lsls	r3, r3, #16
 8001354:	141b      	asrs	r3, r3, #16
 8001356:	1c18      	adds	r0, r3, #0
 8001358:	f002 fd26 	bl	8003da8 <__aeabi_i2f>
 800135c:	1c03      	adds	r3, r0, #0
 800135e:	1c18      	adds	r0, r3, #0
 8001360:	f002 f986 	bl	8003670 <__aeabi_f2d>
 8001364:	1c03      	adds	r3, r0, #0
 8001366:	1c0c      	adds	r4, r1, #0
 8001368:	1c18      	adds	r0, r3, #0
 800136a:	1c21      	adds	r1, r4, #0
 800136c:	4b45      	ldr	r3, [pc, #276]	; (8001484 <ProcCapture+0x65c>)
 800136e:	4a44      	ldr	r2, [pc, #272]	; (8001480 <ProcCapture+0x658>)
 8001370:	f002 f9d6 	bl	8003720 <__aeabi_dmul>
 8001374:	1c03      	adds	r3, r0, #0
 8001376:	1c0c      	adds	r4, r1, #0
 8001378:	1c1d      	adds	r5, r3, #0
 800137a:	1c26      	adds	r6, r4, #0
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3304      	adds	r3, #4
 8001380:	881b      	ldrh	r3, [r3, #0]
 8001382:	041b      	lsls	r3, r3, #16
 8001384:	141b      	asrs	r3, r3, #16
 8001386:	1c18      	adds	r0, r3, #0
 8001388:	f002 fd0e 	bl	8003da8 <__aeabi_i2f>
 800138c:	1c03      	adds	r3, r0, #0
 800138e:	1c18      	adds	r0, r3, #0
 8001390:	f002 f96e 	bl	8003670 <__aeabi_f2d>
 8001394:	1c03      	adds	r3, r0, #0
 8001396:	1c0c      	adds	r4, r1, #0
 8001398:	1c18      	adds	r0, r3, #0
 800139a:	1c21      	adds	r1, r4, #0
 800139c:	4a46      	ldr	r2, [pc, #280]	; (80014b8 <ProcCapture+0x690>)
 800139e:	4b47      	ldr	r3, [pc, #284]	; (80014bc <ProcCapture+0x694>)
 80013a0:	f002 f9be 	bl	8003720 <__aeabi_dmul>
 80013a4:	1c03      	adds	r3, r0, #0
 80013a6:	1c0c      	adds	r4, r1, #0
 80013a8:	1c28      	adds	r0, r5, #0
 80013aa:	1c31      	adds	r1, r6, #0
 80013ac:	1c1a      	adds	r2, r3, #0
 80013ae:	1c23      	adds	r3, r4, #0
 80013b0:	f002 f800 	bl	80033b4 <__adddf3>
 80013b4:	1c03      	adds	r3, r0, #0
 80013b6:	1c0c      	adds	r4, r1, #0
 80013b8:	1c1d      	adds	r5, r3, #0
 80013ba:	1c26      	adds	r6, r4, #0
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3306      	adds	r3, #6
 80013c0:	881b      	ldrh	r3, [r3, #0]
 80013c2:	041b      	lsls	r3, r3, #16
 80013c4:	141b      	asrs	r3, r3, #16
 80013c6:	1c18      	adds	r0, r3, #0
 80013c8:	f002 fcee 	bl	8003da8 <__aeabi_i2f>
 80013cc:	1c03      	adds	r3, r0, #0
 80013ce:	1c18      	adds	r0, r3, #0
 80013d0:	f002 f94e 	bl	8003670 <__aeabi_f2d>
 80013d4:	1c03      	adds	r3, r0, #0
 80013d6:	1c0c      	adds	r4, r1, #0
 80013d8:	1c18      	adds	r0, r3, #0
 80013da:	1c21      	adds	r1, r4, #0
 80013dc:	4a34      	ldr	r2, [pc, #208]	; (80014b0 <ProcCapture+0x688>)
 80013de:	4b35      	ldr	r3, [pc, #212]	; (80014b4 <ProcCapture+0x68c>)
 80013e0:	f002 f99e 	bl	8003720 <__aeabi_dmul>
 80013e4:	1c03      	adds	r3, r0, #0
 80013e6:	1c0c      	adds	r4, r1, #0
 80013e8:	1c28      	adds	r0, r5, #0
 80013ea:	1c31      	adds	r1, r6, #0
 80013ec:	1c1a      	adds	r2, r3, #0
 80013ee:	1c23      	adds	r3, r4, #0
 80013f0:	f001 ffe0 	bl	80033b4 <__adddf3>
 80013f4:	1c03      	adds	r3, r0, #0
 80013f6:	1c0c      	adds	r4, r1, #0
 80013f8:	1c1d      	adds	r5, r3, #0
 80013fa:	1c26      	adds	r6, r4, #0
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3308      	adds	r3, #8
 8001400:	881b      	ldrh	r3, [r3, #0]
 8001402:	041b      	lsls	r3, r3, #16
 8001404:	141b      	asrs	r3, r3, #16
 8001406:	1c18      	adds	r0, r3, #0
 8001408:	f002 fcce 	bl	8003da8 <__aeabi_i2f>
 800140c:	1c03      	adds	r3, r0, #0
 800140e:	1c18      	adds	r0, r3, #0
 8001410:	f002 f92e 	bl	8003670 <__aeabi_f2d>
 8001414:	1c03      	adds	r3, r0, #0
 8001416:	1c0c      	adds	r4, r1, #0
 8001418:	1c18      	adds	r0, r3, #0
 800141a:	1c21      	adds	r1, r4, #0
 800141c:	4a22      	ldr	r2, [pc, #136]	; (80014a8 <ProcCapture+0x680>)
 800141e:	4b23      	ldr	r3, [pc, #140]	; (80014ac <ProcCapture+0x684>)
 8001420:	f002 f97e 	bl	8003720 <__aeabi_dmul>
 8001424:	1c03      	adds	r3, r0, #0
 8001426:	1c0c      	adds	r4, r1, #0
 8001428:	1c28      	adds	r0, r5, #0
 800142a:	1c31      	adds	r1, r6, #0
 800142c:	1c1a      	adds	r2, r3, #0
 800142e:	1c23      	adds	r3, r4, #0
 8001430:	f001 ffc0 	bl	80033b4 <__adddf3>
 8001434:	1c03      	adds	r3, r0, #0
 8001436:	1c0c      	adds	r4, r1, #0
 8001438:	1c1d      	adds	r5, r3, #0
 800143a:	1c26      	adds	r6, r4, #0
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	330a      	adds	r3, #10
 8001440:	881b      	ldrh	r3, [r3, #0]
 8001442:	041b      	lsls	r3, r3, #16
 8001444:	141b      	asrs	r3, r3, #16
 8001446:	1c18      	adds	r0, r3, #0
 8001448:	f002 fcae 	bl	8003da8 <__aeabi_i2f>
 800144c:	1c03      	adds	r3, r0, #0
 800144e:	1c18      	adds	r0, r3, #0
 8001450:	f002 f90e 	bl	8003670 <__aeabi_f2d>
 8001454:	1c03      	adds	r3, r0, #0
 8001456:	1c0c      	adds	r4, r1, #0
 8001458:	1c18      	adds	r0, r3, #0
 800145a:	1c21      	adds	r1, r4, #0
 800145c:	4b09      	ldr	r3, [pc, #36]	; (8001484 <ProcCapture+0x65c>)
 800145e:	4a08      	ldr	r2, [pc, #32]	; (8001480 <ProcCapture+0x658>)
 8001460:	f002 f95e 	bl	8003720 <__aeabi_dmul>
 8001464:	1c03      	adds	r3, r0, #0
 8001466:	1c0c      	adds	r4, r1, #0
 8001468:	1c28      	adds	r0, r5, #0
 800146a:	1c31      	adds	r1, r6, #0
 800146c:	1c1a      	adds	r2, r3, #0
 800146e:	1c23      	adds	r3, r4, #0
 8001470:	f001 ffa0 	bl	80033b4 <__adddf3>
 8001474:	1c03      	adds	r3, r0, #0
 8001476:	1c0c      	adds	r4, r1, #0
 8001478:	e022      	b.n	80014c0 <ProcCapture+0x698>
 800147a:	46c0      	nop			; (mov r8, r8)
 800147c:	46c0      	nop			; (mov r8, r8)
 800147e:	46c0      	nop			; (mov r8, r8)
	...
 8001488:	886594af 	.word	0x886594af
 800148c:	bfb45d63 	.word	0xbfb45d63
 8001490:	9db22d0e 	.word	0x9db22d0e
 8001494:	3fe6a7ef 	.word	0x3fe6a7ef
 8001498:	0ff97247 	.word	0x0ff97247
 800149c:	3fdbb7e9 	.word	0x3fdbb7e9
 80014a0:	9db22d0e 	.word	0x9db22d0e
 80014a4:	bfa6a7ef 	.word	0xbfa6a7ef
 80014a8:	9db22d0e 	.word	0x9db22d0e
 80014ac:	3fc6a7ef 	.word	0x3fc6a7ef
 80014b0:	b9778573 	.word	0xb9778573
 80014b4:	3fedef88 	.word	0x3fedef88
 80014b8:	952d234f 	.word	0x952d234f
 80014bc:	bfb423b7 	.word	0xbfb423b7
 80014c0:	1c18      	adds	r0, r3, #0
 80014c2:	1c21      	adds	r1, r4, #0
 80014c4:	f002 fb3e 	bl	8003b44 <__aeabi_d2iz>
 80014c8:	1c03      	adds	r3, r0, #0
 80014ca:	041b      	lsls	r3, r3, #16
 80014cc:	0c1b      	lsrs	r3, r3, #16
 80014ce:	041b      	lsls	r3, r3, #16
 80014d0:	0c1a      	lsrs	r2, r3, #16
 80014d2:	1cbb      	adds	r3, r7, #2
 80014d4:	881b      	ldrh	r3, [r3, #0]
 80014d6:	18d3      	adds	r3, r2, r3
 80014d8:	041b      	lsls	r3, r3, #16
 80014da:	0c1b      	lsrs	r3, r3, #16
 80014dc:	4642      	mov	r2, r8
 80014de:	8013      	strh	r3, [r2, #0]
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	2208      	movs	r2, #8
 80014e4:	18d2      	adds	r2, r2, r3
 80014e6:	4690      	mov	r8, r2
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3304      	adds	r3, #4
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	041b      	lsls	r3, r3, #16
 80014f0:	141b      	asrs	r3, r3, #16
 80014f2:	1c18      	adds	r0, r3, #0
 80014f4:	f002 fc58 	bl	8003da8 <__aeabi_i2f>
 80014f8:	1c03      	adds	r3, r0, #0
 80014fa:	1c18      	adds	r0, r3, #0
 80014fc:	f002 f8b8 	bl	8003670 <__aeabi_f2d>
 8001500:	1c03      	adds	r3, r0, #0
 8001502:	1c0c      	adds	r4, r1, #0
 8001504:	1c18      	adds	r0, r3, #0
 8001506:	1c21      	adds	r1, r4, #0
 8001508:	4b5c      	ldr	r3, [pc, #368]	; (800167c <ProcCapture+0x854>)
 800150a:	4a5b      	ldr	r2, [pc, #364]	; (8001678 <ProcCapture+0x850>)
 800150c:	f002 f908 	bl	8003720 <__aeabi_dmul>
 8001510:	1c03      	adds	r3, r0, #0
 8001512:	1c0c      	adds	r4, r1, #0
 8001514:	1c1d      	adds	r5, r3, #0
 8001516:	1c26      	adds	r6, r4, #0
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3306      	adds	r3, #6
 800151c:	881b      	ldrh	r3, [r3, #0]
 800151e:	041b      	lsls	r3, r3, #16
 8001520:	141b      	asrs	r3, r3, #16
 8001522:	1c18      	adds	r0, r3, #0
 8001524:	f002 fc40 	bl	8003da8 <__aeabi_i2f>
 8001528:	1c03      	adds	r3, r0, #0
 800152a:	1c18      	adds	r0, r3, #0
 800152c:	f002 f8a0 	bl	8003670 <__aeabi_f2d>
 8001530:	1c03      	adds	r3, r0, #0
 8001532:	1c0c      	adds	r4, r1, #0
 8001534:	1c18      	adds	r0, r3, #0
 8001536:	1c21      	adds	r1, r4, #0
 8001538:	4a51      	ldr	r2, [pc, #324]	; (8001680 <ProcCapture+0x858>)
 800153a:	4b52      	ldr	r3, [pc, #328]	; (8001684 <ProcCapture+0x85c>)
 800153c:	f002 f8f0 	bl	8003720 <__aeabi_dmul>
 8001540:	1c03      	adds	r3, r0, #0
 8001542:	1c0c      	adds	r4, r1, #0
 8001544:	1c28      	adds	r0, r5, #0
 8001546:	1c31      	adds	r1, r6, #0
 8001548:	1c1a      	adds	r2, r3, #0
 800154a:	1c23      	adds	r3, r4, #0
 800154c:	f001 ff32 	bl	80033b4 <__adddf3>
 8001550:	1c03      	adds	r3, r0, #0
 8001552:	1c0c      	adds	r4, r1, #0
 8001554:	1c1d      	adds	r5, r3, #0
 8001556:	1c26      	adds	r6, r4, #0
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3308      	adds	r3, #8
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	041b      	lsls	r3, r3, #16
 8001560:	141b      	asrs	r3, r3, #16
 8001562:	1c18      	adds	r0, r3, #0
 8001564:	f002 fc20 	bl	8003da8 <__aeabi_i2f>
 8001568:	1c03      	adds	r3, r0, #0
 800156a:	1c18      	adds	r0, r3, #0
 800156c:	f002 f880 	bl	8003670 <__aeabi_f2d>
 8001570:	1c03      	adds	r3, r0, #0
 8001572:	1c0c      	adds	r4, r1, #0
 8001574:	1c18      	adds	r0, r3, #0
 8001576:	1c21      	adds	r1, r4, #0
 8001578:	4a43      	ldr	r2, [pc, #268]	; (8001688 <ProcCapture+0x860>)
 800157a:	4b44      	ldr	r3, [pc, #272]	; (800168c <ProcCapture+0x864>)
 800157c:	f002 f8d0 	bl	8003720 <__aeabi_dmul>
 8001580:	1c03      	adds	r3, r0, #0
 8001582:	1c0c      	adds	r4, r1, #0
 8001584:	1c28      	adds	r0, r5, #0
 8001586:	1c31      	adds	r1, r6, #0
 8001588:	1c1a      	adds	r2, r3, #0
 800158a:	1c23      	adds	r3, r4, #0
 800158c:	f001 ff12 	bl	80033b4 <__adddf3>
 8001590:	1c03      	adds	r3, r0, #0
 8001592:	1c0c      	adds	r4, r1, #0
 8001594:	1c1d      	adds	r5, r3, #0
 8001596:	1c26      	adds	r6, r4, #0
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	330a      	adds	r3, #10
 800159c:	881b      	ldrh	r3, [r3, #0]
 800159e:	041b      	lsls	r3, r3, #16
 80015a0:	141b      	asrs	r3, r3, #16
 80015a2:	1c18      	adds	r0, r3, #0
 80015a4:	f002 fc00 	bl	8003da8 <__aeabi_i2f>
 80015a8:	1c03      	adds	r3, r0, #0
 80015aa:	1c18      	adds	r0, r3, #0
 80015ac:	f002 f860 	bl	8003670 <__aeabi_f2d>
 80015b0:	1c03      	adds	r3, r0, #0
 80015b2:	1c0c      	adds	r4, r1, #0
 80015b4:	1c18      	adds	r0, r3, #0
 80015b6:	1c21      	adds	r1, r4, #0
 80015b8:	4a35      	ldr	r2, [pc, #212]	; (8001690 <ProcCapture+0x868>)
 80015ba:	4b36      	ldr	r3, [pc, #216]	; (8001694 <ProcCapture+0x86c>)
 80015bc:	f002 f8b0 	bl	8003720 <__aeabi_dmul>
 80015c0:	1c03      	adds	r3, r0, #0
 80015c2:	1c0c      	adds	r4, r1, #0
 80015c4:	1c28      	adds	r0, r5, #0
 80015c6:	1c31      	adds	r1, r6, #0
 80015c8:	1c1a      	adds	r2, r3, #0
 80015ca:	1c23      	adds	r3, r4, #0
 80015cc:	f001 fef2 	bl	80033b4 <__adddf3>
 80015d0:	1c03      	adds	r3, r0, #0
 80015d2:	1c0c      	adds	r4, r1, #0
 80015d4:	1c1d      	adds	r5, r3, #0
 80015d6:	1c26      	adds	r6, r4, #0
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	330c      	adds	r3, #12
 80015dc:	881b      	ldrh	r3, [r3, #0]
 80015de:	041b      	lsls	r3, r3, #16
 80015e0:	141b      	asrs	r3, r3, #16
 80015e2:	1c18      	adds	r0, r3, #0
 80015e4:	f002 fbe0 	bl	8003da8 <__aeabi_i2f>
 80015e8:	1c03      	adds	r3, r0, #0
 80015ea:	1c18      	adds	r0, r3, #0
 80015ec:	f002 f840 	bl	8003670 <__aeabi_f2d>
 80015f0:	1c03      	adds	r3, r0, #0
 80015f2:	1c0c      	adds	r4, r1, #0
 80015f4:	1c18      	adds	r0, r3, #0
 80015f6:	1c21      	adds	r1, r4, #0
 80015f8:	4a27      	ldr	r2, [pc, #156]	; (8001698 <ProcCapture+0x870>)
 80015fa:	4b28      	ldr	r3, [pc, #160]	; (800169c <ProcCapture+0x874>)
 80015fc:	f002 f890 	bl	8003720 <__aeabi_dmul>
 8001600:	1c03      	adds	r3, r0, #0
 8001602:	1c0c      	adds	r4, r1, #0
 8001604:	1c28      	adds	r0, r5, #0
 8001606:	1c31      	adds	r1, r6, #0
 8001608:	1c1a      	adds	r2, r3, #0
 800160a:	1c23      	adds	r3, r4, #0
 800160c:	f001 fed2 	bl	80033b4 <__adddf3>
 8001610:	1c03      	adds	r3, r0, #0
 8001612:	1c0c      	adds	r4, r1, #0
 8001614:	1c18      	adds	r0, r3, #0
 8001616:	1c21      	adds	r1, r4, #0
 8001618:	f002 fa94 	bl	8003b44 <__aeabi_d2iz>
 800161c:	1c03      	adds	r3, r0, #0
 800161e:	041b      	lsls	r3, r3, #16
 8001620:	0c1b      	lsrs	r3, r3, #16
 8001622:	041b      	lsls	r3, r3, #16
 8001624:	0c1a      	lsrs	r2, r3, #16
 8001626:	1cbb      	adds	r3, r7, #2
 8001628:	881b      	ldrh	r3, [r3, #0]
 800162a:	18d3      	adds	r3, r2, r3
 800162c:	041b      	lsls	r3, r3, #16
 800162e:	0c1b      	lsrs	r3, r3, #16
 8001630:	4642      	mov	r2, r8
 8001632:	8013      	strh	r3, [r2, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3304      	adds	r3, #4
 8001638:	607b      	str	r3, [r7, #4]
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	330a      	adds	r3, #10
 800163e:	613b      	str	r3, [r7, #16]
 8001640:	1c3b      	adds	r3, r7, #0
 8001642:	330e      	adds	r3, #14
 8001644:	1c3a      	adds	r2, r7, #0
 8001646:	320e      	adds	r2, #14
 8001648:	8812      	ldrh	r2, [r2, #0]
 800164a:	3201      	adds	r2, #1
 800164c:	801a      	strh	r2, [r3, #0]
 800164e:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <ProcCapture+0x878>)
 8001650:	8a1b      	ldrh	r3, [r3, #16]
 8001652:	1c18      	adds	r0, r3, #0
 8001654:	2105      	movs	r1, #5
 8001656:	f001 fe93 	bl	8003380 <__udivsi3>
 800165a:	1c03      	adds	r3, r0, #0
 800165c:	041b      	lsls	r3, r3, #16
 800165e:	0c1b      	lsrs	r3, r3, #16
 8001660:	1c3a      	adds	r2, r7, #0
 8001662:	320e      	adds	r2, #14
 8001664:	8812      	ldrh	r2, [r2, #0]
 8001666:	429a      	cmp	r2, r3
 8001668:	d200      	bcs.n	800166c <ProcCapture+0x844>
 800166a:	e50f      	b.n	800108c <ProcCapture+0x264>
 800166c:	e307      	b.n	8001c7e <ProcCapture+0xe56>
 800166e:	1c3b      	adds	r3, r7, #0
 8001670:	330e      	adds	r3, #14
 8001672:	2200      	movs	r2, #0
 8001674:	801a      	strh	r2, [r3, #0]
 8001676:	e2f2      	b.n	8001c5e <ProcCapture+0xe36>
 8001678:	9db22d0e 	.word	0x9db22d0e
 800167c:	bfa6a7ef 	.word	0xbfa6a7ef
 8001680:	0ff97247 	.word	0x0ff97247
 8001684:	3fdbb7e9 	.word	0x3fdbb7e9
 8001688:	9db22d0e 	.word	0x9db22d0e
 800168c:	3fe6a7ef 	.word	0x3fe6a7ef
 8001690:	886594af 	.word	0x886594af
 8001694:	bfb45d63 	.word	0xbfb45d63
	...
 80016a0:	200009c8 	.word	0x200009c8
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3304      	adds	r3, #4
 80016a8:	881b      	ldrh	r3, [r3, #0]
 80016aa:	041b      	lsls	r3, r3, #16
 80016ac:	0c1a      	lsrs	r2, r3, #16
 80016ae:	1cbb      	adds	r3, r7, #2
 80016b0:	881b      	ldrh	r3, [r3, #0]
 80016b2:	18d3      	adds	r3, r2, r3
 80016b4:	041b      	lsls	r3, r3, #16
 80016b6:	0c1a      	lsrs	r2, r3, #16
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	801a      	strh	r2, [r3, #0]
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	3302      	adds	r3, #2
 80016c0:	4698      	mov	r8, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	881b      	ldrh	r3, [r3, #0]
 80016c6:	041b      	lsls	r3, r3, #16
 80016c8:	141b      	asrs	r3, r3, #16
 80016ca:	1c18      	adds	r0, r3, #0
 80016cc:	f002 fb6c 	bl	8003da8 <__aeabi_i2f>
 80016d0:	1c03      	adds	r3, r0, #0
 80016d2:	1c18      	adds	r0, r3, #0
 80016d4:	f001 ffcc 	bl	8003670 <__aeabi_f2d>
 80016d8:	1c03      	adds	r3, r0, #0
 80016da:	1c0c      	adds	r4, r1, #0
 80016dc:	1c18      	adds	r0, r3, #0
 80016de:	1c21      	adds	r1, r4, #0
 80016e0:	4bec      	ldr	r3, [pc, #944]	; (8001a94 <ProcCapture+0xc6c>)
 80016e2:	4aeb      	ldr	r2, [pc, #940]	; (8001a90 <ProcCapture+0xc68>)
 80016e4:	f002 f81c 	bl	8003720 <__aeabi_dmul>
 80016e8:	1c03      	adds	r3, r0, #0
 80016ea:	1c0c      	adds	r4, r1, #0
 80016ec:	1c1d      	adds	r5, r3, #0
 80016ee:	1c26      	adds	r6, r4, #0
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3302      	adds	r3, #2
 80016f4:	881b      	ldrh	r3, [r3, #0]
 80016f6:	041b      	lsls	r3, r3, #16
 80016f8:	141b      	asrs	r3, r3, #16
 80016fa:	1c18      	adds	r0, r3, #0
 80016fc:	f002 fb54 	bl	8003da8 <__aeabi_i2f>
 8001700:	1c03      	adds	r3, r0, #0
 8001702:	1c18      	adds	r0, r3, #0
 8001704:	f001 ffb4 	bl	8003670 <__aeabi_f2d>
 8001708:	1c03      	adds	r3, r0, #0
 800170a:	1c0c      	adds	r4, r1, #0
 800170c:	1c18      	adds	r0, r3, #0
 800170e:	1c21      	adds	r1, r4, #0
 8001710:	4ae1      	ldr	r2, [pc, #900]	; (8001a98 <ProcCapture+0xc70>)
 8001712:	4be2      	ldr	r3, [pc, #904]	; (8001a9c <ProcCapture+0xc74>)
 8001714:	f002 f804 	bl	8003720 <__aeabi_dmul>
 8001718:	1c03      	adds	r3, r0, #0
 800171a:	1c0c      	adds	r4, r1, #0
 800171c:	1c28      	adds	r0, r5, #0
 800171e:	1c31      	adds	r1, r6, #0
 8001720:	1c1a      	adds	r2, r3, #0
 8001722:	1c23      	adds	r3, r4, #0
 8001724:	f001 fe46 	bl	80033b4 <__adddf3>
 8001728:	1c03      	adds	r3, r0, #0
 800172a:	1c0c      	adds	r4, r1, #0
 800172c:	1c1d      	adds	r5, r3, #0
 800172e:	1c26      	adds	r6, r4, #0
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3304      	adds	r3, #4
 8001734:	881b      	ldrh	r3, [r3, #0]
 8001736:	041b      	lsls	r3, r3, #16
 8001738:	141b      	asrs	r3, r3, #16
 800173a:	1c18      	adds	r0, r3, #0
 800173c:	f002 fb34 	bl	8003da8 <__aeabi_i2f>
 8001740:	1c03      	adds	r3, r0, #0
 8001742:	1c18      	adds	r0, r3, #0
 8001744:	f001 ff94 	bl	8003670 <__aeabi_f2d>
 8001748:	1c03      	adds	r3, r0, #0
 800174a:	1c0c      	adds	r4, r1, #0
 800174c:	1c18      	adds	r0, r3, #0
 800174e:	1c21      	adds	r1, r4, #0
 8001750:	4ad3      	ldr	r2, [pc, #844]	; (8001aa0 <ProcCapture+0xc78>)
 8001752:	4bd4      	ldr	r3, [pc, #848]	; (8001aa4 <ProcCapture+0xc7c>)
 8001754:	f001 ffe4 	bl	8003720 <__aeabi_dmul>
 8001758:	1c03      	adds	r3, r0, #0
 800175a:	1c0c      	adds	r4, r1, #0
 800175c:	1c28      	adds	r0, r5, #0
 800175e:	1c31      	adds	r1, r6, #0
 8001760:	1c1a      	adds	r2, r3, #0
 8001762:	1c23      	adds	r3, r4, #0
 8001764:	f001 fe26 	bl	80033b4 <__adddf3>
 8001768:	1c03      	adds	r3, r0, #0
 800176a:	1c0c      	adds	r4, r1, #0
 800176c:	1c1d      	adds	r5, r3, #0
 800176e:	1c26      	adds	r6, r4, #0
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3306      	adds	r3, #6
 8001774:	881b      	ldrh	r3, [r3, #0]
 8001776:	041b      	lsls	r3, r3, #16
 8001778:	141b      	asrs	r3, r3, #16
 800177a:	1c18      	adds	r0, r3, #0
 800177c:	f002 fb14 	bl	8003da8 <__aeabi_i2f>
 8001780:	1c03      	adds	r3, r0, #0
 8001782:	1c18      	adds	r0, r3, #0
 8001784:	f001 ff74 	bl	8003670 <__aeabi_f2d>
 8001788:	1c03      	adds	r3, r0, #0
 800178a:	1c0c      	adds	r4, r1, #0
 800178c:	1c18      	adds	r0, r3, #0
 800178e:	1c21      	adds	r1, r4, #0
 8001790:	4ac5      	ldr	r2, [pc, #788]	; (8001aa8 <ProcCapture+0xc80>)
 8001792:	4bc6      	ldr	r3, [pc, #792]	; (8001aac <ProcCapture+0xc84>)
 8001794:	f001 ffc4 	bl	8003720 <__aeabi_dmul>
 8001798:	1c03      	adds	r3, r0, #0
 800179a:	1c0c      	adds	r4, r1, #0
 800179c:	1c28      	adds	r0, r5, #0
 800179e:	1c31      	adds	r1, r6, #0
 80017a0:	1c1a      	adds	r2, r3, #0
 80017a2:	1c23      	adds	r3, r4, #0
 80017a4:	f001 fe06 	bl	80033b4 <__adddf3>
 80017a8:	1c03      	adds	r3, r0, #0
 80017aa:	1c0c      	adds	r4, r1, #0
 80017ac:	1c1d      	adds	r5, r3, #0
 80017ae:	1c26      	adds	r6, r4, #0
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3308      	adds	r3, #8
 80017b4:	881b      	ldrh	r3, [r3, #0]
 80017b6:	041b      	lsls	r3, r3, #16
 80017b8:	141b      	asrs	r3, r3, #16
 80017ba:	1c18      	adds	r0, r3, #0
 80017bc:	f002 faf4 	bl	8003da8 <__aeabi_i2f>
 80017c0:	1c03      	adds	r3, r0, #0
 80017c2:	1c18      	adds	r0, r3, #0
 80017c4:	f001 ff54 	bl	8003670 <__aeabi_f2d>
 80017c8:	1c03      	adds	r3, r0, #0
 80017ca:	1c0c      	adds	r4, r1, #0
 80017cc:	1c18      	adds	r0, r3, #0
 80017ce:	1c21      	adds	r1, r4, #0
 80017d0:	4ab7      	ldr	r2, [pc, #732]	; (8001ab0 <ProcCapture+0xc88>)
 80017d2:	4bb8      	ldr	r3, [pc, #736]	; (8001ab4 <ProcCapture+0xc8c>)
 80017d4:	f001 ffa4 	bl	8003720 <__aeabi_dmul>
 80017d8:	1c03      	adds	r3, r0, #0
 80017da:	1c0c      	adds	r4, r1, #0
 80017dc:	1c28      	adds	r0, r5, #0
 80017de:	1c31      	adds	r1, r6, #0
 80017e0:	1c1a      	adds	r2, r3, #0
 80017e2:	1c23      	adds	r3, r4, #0
 80017e4:	f001 fde6 	bl	80033b4 <__adddf3>
 80017e8:	1c03      	adds	r3, r0, #0
 80017ea:	1c0c      	adds	r4, r1, #0
 80017ec:	1c18      	adds	r0, r3, #0
 80017ee:	1c21      	adds	r1, r4, #0
 80017f0:	f002 f9a8 	bl	8003b44 <__aeabi_d2iz>
 80017f4:	1c03      	adds	r3, r0, #0
 80017f6:	041b      	lsls	r3, r3, #16
 80017f8:	0c1b      	lsrs	r3, r3, #16
 80017fa:	041b      	lsls	r3, r3, #16
 80017fc:	0c1a      	lsrs	r2, r3, #16
 80017fe:	1cbb      	adds	r3, r7, #2
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	18d3      	adds	r3, r2, r3
 8001804:	041b      	lsls	r3, r3, #16
 8001806:	0c1b      	lsrs	r3, r3, #16
 8001808:	4642      	mov	r2, r8
 800180a:	8013      	strh	r3, [r2, #0]
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	3304      	adds	r3, #4
 8001810:	4698      	mov	r8, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	881b      	ldrh	r3, [r3, #0]
 8001816:	041b      	lsls	r3, r3, #16
 8001818:	141b      	asrs	r3, r3, #16
 800181a:	1c18      	adds	r0, r3, #0
 800181c:	f002 fac4 	bl	8003da8 <__aeabi_i2f>
 8001820:	1c03      	adds	r3, r0, #0
 8001822:	1c18      	adds	r0, r3, #0
 8001824:	f001 ff24 	bl	8003670 <__aeabi_f2d>
 8001828:	1c03      	adds	r3, r0, #0
 800182a:	1c0c      	adds	r4, r1, #0
 800182c:	1c18      	adds	r0, r3, #0
 800182e:	1c21      	adds	r1, r4, #0
 8001830:	4b98      	ldr	r3, [pc, #608]	; (8001a94 <ProcCapture+0xc6c>)
 8001832:	4a97      	ldr	r2, [pc, #604]	; (8001a90 <ProcCapture+0xc68>)
 8001834:	f001 ff74 	bl	8003720 <__aeabi_dmul>
 8001838:	1c03      	adds	r3, r0, #0
 800183a:	1c0c      	adds	r4, r1, #0
 800183c:	1c1d      	adds	r5, r3, #0
 800183e:	1c26      	adds	r6, r4, #0
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3302      	adds	r3, #2
 8001844:	881b      	ldrh	r3, [r3, #0]
 8001846:	041b      	lsls	r3, r3, #16
 8001848:	141b      	asrs	r3, r3, #16
 800184a:	1c18      	adds	r0, r3, #0
 800184c:	f002 faac 	bl	8003da8 <__aeabi_i2f>
 8001850:	1c03      	adds	r3, r0, #0
 8001852:	1c18      	adds	r0, r3, #0
 8001854:	f001 ff0c 	bl	8003670 <__aeabi_f2d>
 8001858:	1c03      	adds	r3, r0, #0
 800185a:	1c0c      	adds	r4, r1, #0
 800185c:	1c18      	adds	r0, r3, #0
 800185e:	1c21      	adds	r1, r4, #0
 8001860:	4a95      	ldr	r2, [pc, #596]	; (8001ab8 <ProcCapture+0xc90>)
 8001862:	4b96      	ldr	r3, [pc, #600]	; (8001abc <ProcCapture+0xc94>)
 8001864:	f001 ff5c 	bl	8003720 <__aeabi_dmul>
 8001868:	1c03      	adds	r3, r0, #0
 800186a:	1c0c      	adds	r4, r1, #0
 800186c:	1c28      	adds	r0, r5, #0
 800186e:	1c31      	adds	r1, r6, #0
 8001870:	1c1a      	adds	r2, r3, #0
 8001872:	1c23      	adds	r3, r4, #0
 8001874:	f001 fd9e 	bl	80033b4 <__adddf3>
 8001878:	1c03      	adds	r3, r0, #0
 800187a:	1c0c      	adds	r4, r1, #0
 800187c:	1c1d      	adds	r5, r3, #0
 800187e:	1c26      	adds	r6, r4, #0
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3304      	adds	r3, #4
 8001884:	881b      	ldrh	r3, [r3, #0]
 8001886:	041b      	lsls	r3, r3, #16
 8001888:	141b      	asrs	r3, r3, #16
 800188a:	1c18      	adds	r0, r3, #0
 800188c:	f002 fa8c 	bl	8003da8 <__aeabi_i2f>
 8001890:	1c03      	adds	r3, r0, #0
 8001892:	1c18      	adds	r0, r3, #0
 8001894:	f001 feec 	bl	8003670 <__aeabi_f2d>
 8001898:	1c03      	adds	r3, r0, #0
 800189a:	1c0c      	adds	r4, r1, #0
 800189c:	1c18      	adds	r0, r3, #0
 800189e:	1c21      	adds	r1, r4, #0
 80018a0:	4a87      	ldr	r2, [pc, #540]	; (8001ac0 <ProcCapture+0xc98>)
 80018a2:	4b88      	ldr	r3, [pc, #544]	; (8001ac4 <ProcCapture+0xc9c>)
 80018a4:	f001 ff3c 	bl	8003720 <__aeabi_dmul>
 80018a8:	1c03      	adds	r3, r0, #0
 80018aa:	1c0c      	adds	r4, r1, #0
 80018ac:	1c28      	adds	r0, r5, #0
 80018ae:	1c31      	adds	r1, r6, #0
 80018b0:	1c1a      	adds	r2, r3, #0
 80018b2:	1c23      	adds	r3, r4, #0
 80018b4:	f001 fd7e 	bl	80033b4 <__adddf3>
 80018b8:	1c03      	adds	r3, r0, #0
 80018ba:	1c0c      	adds	r4, r1, #0
 80018bc:	1c1d      	adds	r5, r3, #0
 80018be:	1c26      	adds	r6, r4, #0
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3306      	adds	r3, #6
 80018c4:	881b      	ldrh	r3, [r3, #0]
 80018c6:	041b      	lsls	r3, r3, #16
 80018c8:	141b      	asrs	r3, r3, #16
 80018ca:	1c18      	adds	r0, r3, #0
 80018cc:	f002 fa6c 	bl	8003da8 <__aeabi_i2f>
 80018d0:	1c03      	adds	r3, r0, #0
 80018d2:	1c18      	adds	r0, r3, #0
 80018d4:	f001 fecc 	bl	8003670 <__aeabi_f2d>
 80018d8:	1c03      	adds	r3, r0, #0
 80018da:	1c0c      	adds	r4, r1, #0
 80018dc:	1c18      	adds	r0, r3, #0
 80018de:	1c21      	adds	r1, r4, #0
 80018e0:	4a79      	ldr	r2, [pc, #484]	; (8001ac8 <ProcCapture+0xca0>)
 80018e2:	4b7a      	ldr	r3, [pc, #488]	; (8001acc <ProcCapture+0xca4>)
 80018e4:	f001 ff1c 	bl	8003720 <__aeabi_dmul>
 80018e8:	1c03      	adds	r3, r0, #0
 80018ea:	1c0c      	adds	r4, r1, #0
 80018ec:	1c28      	adds	r0, r5, #0
 80018ee:	1c31      	adds	r1, r6, #0
 80018f0:	1c1a      	adds	r2, r3, #0
 80018f2:	1c23      	adds	r3, r4, #0
 80018f4:	f001 fd5e 	bl	80033b4 <__adddf3>
 80018f8:	1c03      	adds	r3, r0, #0
 80018fa:	1c0c      	adds	r4, r1, #0
 80018fc:	1c1d      	adds	r5, r3, #0
 80018fe:	1c26      	adds	r6, r4, #0
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3308      	adds	r3, #8
 8001904:	881b      	ldrh	r3, [r3, #0]
 8001906:	041b      	lsls	r3, r3, #16
 8001908:	141b      	asrs	r3, r3, #16
 800190a:	1c18      	adds	r0, r3, #0
 800190c:	f002 fa4c 	bl	8003da8 <__aeabi_i2f>
 8001910:	1c03      	adds	r3, r0, #0
 8001912:	1c18      	adds	r0, r3, #0
 8001914:	f001 feac 	bl	8003670 <__aeabi_f2d>
 8001918:	1c03      	adds	r3, r0, #0
 800191a:	1c0c      	adds	r4, r1, #0
 800191c:	1c18      	adds	r0, r3, #0
 800191e:	1c21      	adds	r1, r4, #0
 8001920:	4a63      	ldr	r2, [pc, #396]	; (8001ab0 <ProcCapture+0xc88>)
 8001922:	4b64      	ldr	r3, [pc, #400]	; (8001ab4 <ProcCapture+0xc8c>)
 8001924:	f001 fefc 	bl	8003720 <__aeabi_dmul>
 8001928:	1c03      	adds	r3, r0, #0
 800192a:	1c0c      	adds	r4, r1, #0
 800192c:	1c28      	adds	r0, r5, #0
 800192e:	1c31      	adds	r1, r6, #0
 8001930:	1c1a      	adds	r2, r3, #0
 8001932:	1c23      	adds	r3, r4, #0
 8001934:	f001 fd3e 	bl	80033b4 <__adddf3>
 8001938:	1c03      	adds	r3, r0, #0
 800193a:	1c0c      	adds	r4, r1, #0
 800193c:	1c18      	adds	r0, r3, #0
 800193e:	1c21      	adds	r1, r4, #0
 8001940:	f002 f900 	bl	8003b44 <__aeabi_d2iz>
 8001944:	1c03      	adds	r3, r0, #0
 8001946:	041b      	lsls	r3, r3, #16
 8001948:	0c1b      	lsrs	r3, r3, #16
 800194a:	041b      	lsls	r3, r3, #16
 800194c:	0c1a      	lsrs	r2, r3, #16
 800194e:	1cbb      	adds	r3, r7, #2
 8001950:	881b      	ldrh	r3, [r3, #0]
 8001952:	18d3      	adds	r3, r2, r3
 8001954:	041b      	lsls	r3, r3, #16
 8001956:	0c1b      	lsrs	r3, r3, #16
 8001958:	4642      	mov	r2, r8
 800195a:	8013      	strh	r3, [r2, #0]
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	3306      	adds	r3, #6
 8001960:	4698      	mov	r8, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	3302      	adds	r3, #2
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	041b      	lsls	r3, r3, #16
 800196a:	141b      	asrs	r3, r3, #16
 800196c:	1c18      	adds	r0, r3, #0
 800196e:	f002 fa1b 	bl	8003da8 <__aeabi_i2f>
 8001972:	1c03      	adds	r3, r0, #0
 8001974:	1c18      	adds	r0, r3, #0
 8001976:	f001 fe7b 	bl	8003670 <__aeabi_f2d>
 800197a:	1c03      	adds	r3, r0, #0
 800197c:	1c0c      	adds	r4, r1, #0
 800197e:	1c18      	adds	r0, r3, #0
 8001980:	1c21      	adds	r1, r4, #0
 8001982:	4a4b      	ldr	r2, [pc, #300]	; (8001ab0 <ProcCapture+0xc88>)
 8001984:	4b4b      	ldr	r3, [pc, #300]	; (8001ab4 <ProcCapture+0xc8c>)
 8001986:	f001 fecb 	bl	8003720 <__aeabi_dmul>
 800198a:	1c03      	adds	r3, r0, #0
 800198c:	1c0c      	adds	r4, r1, #0
 800198e:	1c1d      	adds	r5, r3, #0
 8001990:	1c26      	adds	r6, r4, #0
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	3304      	adds	r3, #4
 8001996:	881b      	ldrh	r3, [r3, #0]
 8001998:	041b      	lsls	r3, r3, #16
 800199a:	141b      	asrs	r3, r3, #16
 800199c:	1c18      	adds	r0, r3, #0
 800199e:	f002 fa03 	bl	8003da8 <__aeabi_i2f>
 80019a2:	1c03      	adds	r3, r0, #0
 80019a4:	1c18      	adds	r0, r3, #0
 80019a6:	f001 fe63 	bl	8003670 <__aeabi_f2d>
 80019aa:	1c03      	adds	r3, r0, #0
 80019ac:	1c0c      	adds	r4, r1, #0
 80019ae:	1c18      	adds	r0, r3, #0
 80019b0:	1c21      	adds	r1, r4, #0
 80019b2:	4a45      	ldr	r2, [pc, #276]	; (8001ac8 <ProcCapture+0xca0>)
 80019b4:	4b45      	ldr	r3, [pc, #276]	; (8001acc <ProcCapture+0xca4>)
 80019b6:	f001 feb3 	bl	8003720 <__aeabi_dmul>
 80019ba:	1c03      	adds	r3, r0, #0
 80019bc:	1c0c      	adds	r4, r1, #0
 80019be:	1c28      	adds	r0, r5, #0
 80019c0:	1c31      	adds	r1, r6, #0
 80019c2:	1c1a      	adds	r2, r3, #0
 80019c4:	1c23      	adds	r3, r4, #0
 80019c6:	f001 fcf5 	bl	80033b4 <__adddf3>
 80019ca:	1c03      	adds	r3, r0, #0
 80019cc:	1c0c      	adds	r4, r1, #0
 80019ce:	1c1d      	adds	r5, r3, #0
 80019d0:	1c26      	adds	r6, r4, #0
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	3306      	adds	r3, #6
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	041b      	lsls	r3, r3, #16
 80019da:	141b      	asrs	r3, r3, #16
 80019dc:	1c18      	adds	r0, r3, #0
 80019de:	f002 f9e3 	bl	8003da8 <__aeabi_i2f>
 80019e2:	1c03      	adds	r3, r0, #0
 80019e4:	1c18      	adds	r0, r3, #0
 80019e6:	f001 fe43 	bl	8003670 <__aeabi_f2d>
 80019ea:	1c03      	adds	r3, r0, #0
 80019ec:	1c0c      	adds	r4, r1, #0
 80019ee:	1c18      	adds	r0, r3, #0
 80019f0:	1c21      	adds	r1, r4, #0
 80019f2:	4a33      	ldr	r2, [pc, #204]	; (8001ac0 <ProcCapture+0xc98>)
 80019f4:	4b33      	ldr	r3, [pc, #204]	; (8001ac4 <ProcCapture+0xc9c>)
 80019f6:	f001 fe93 	bl	8003720 <__aeabi_dmul>
 80019fa:	1c03      	adds	r3, r0, #0
 80019fc:	1c0c      	adds	r4, r1, #0
 80019fe:	1c28      	adds	r0, r5, #0
 8001a00:	1c31      	adds	r1, r6, #0
 8001a02:	1c1a      	adds	r2, r3, #0
 8001a04:	1c23      	adds	r3, r4, #0
 8001a06:	f001 fcd5 	bl	80033b4 <__adddf3>
 8001a0a:	1c03      	adds	r3, r0, #0
 8001a0c:	1c0c      	adds	r4, r1, #0
 8001a0e:	1c1d      	adds	r5, r3, #0
 8001a10:	1c26      	adds	r6, r4, #0
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	3308      	adds	r3, #8
 8001a16:	881b      	ldrh	r3, [r3, #0]
 8001a18:	041b      	lsls	r3, r3, #16
 8001a1a:	141b      	asrs	r3, r3, #16
 8001a1c:	1c18      	adds	r0, r3, #0
 8001a1e:	f002 f9c3 	bl	8003da8 <__aeabi_i2f>
 8001a22:	1c03      	adds	r3, r0, #0
 8001a24:	1c18      	adds	r0, r3, #0
 8001a26:	f001 fe23 	bl	8003670 <__aeabi_f2d>
 8001a2a:	1c03      	adds	r3, r0, #0
 8001a2c:	1c0c      	adds	r4, r1, #0
 8001a2e:	1c18      	adds	r0, r3, #0
 8001a30:	1c21      	adds	r1, r4, #0
 8001a32:	4a21      	ldr	r2, [pc, #132]	; (8001ab8 <ProcCapture+0xc90>)
 8001a34:	4b21      	ldr	r3, [pc, #132]	; (8001abc <ProcCapture+0xc94>)
 8001a36:	f001 fe73 	bl	8003720 <__aeabi_dmul>
 8001a3a:	1c03      	adds	r3, r0, #0
 8001a3c:	1c0c      	adds	r4, r1, #0
 8001a3e:	1c28      	adds	r0, r5, #0
 8001a40:	1c31      	adds	r1, r6, #0
 8001a42:	1c1a      	adds	r2, r3, #0
 8001a44:	1c23      	adds	r3, r4, #0
 8001a46:	f001 fcb5 	bl	80033b4 <__adddf3>
 8001a4a:	1c03      	adds	r3, r0, #0
 8001a4c:	1c0c      	adds	r4, r1, #0
 8001a4e:	1c1d      	adds	r5, r3, #0
 8001a50:	1c26      	adds	r6, r4, #0
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	330a      	adds	r3, #10
 8001a56:	881b      	ldrh	r3, [r3, #0]
 8001a58:	041b      	lsls	r3, r3, #16
 8001a5a:	141b      	asrs	r3, r3, #16
 8001a5c:	1c18      	adds	r0, r3, #0
 8001a5e:	f002 f9a3 	bl	8003da8 <__aeabi_i2f>
 8001a62:	1c03      	adds	r3, r0, #0
 8001a64:	1c18      	adds	r0, r3, #0
 8001a66:	f001 fe03 	bl	8003670 <__aeabi_f2d>
 8001a6a:	1c03      	adds	r3, r0, #0
 8001a6c:	1c0c      	adds	r4, r1, #0
 8001a6e:	1c18      	adds	r0, r3, #0
 8001a70:	1c21      	adds	r1, r4, #0
 8001a72:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <ProcCapture+0xc6c>)
 8001a74:	4a06      	ldr	r2, [pc, #24]	; (8001a90 <ProcCapture+0xc68>)
 8001a76:	f001 fe53 	bl	8003720 <__aeabi_dmul>
 8001a7a:	1c03      	adds	r3, r0, #0
 8001a7c:	1c0c      	adds	r4, r1, #0
 8001a7e:	1c28      	adds	r0, r5, #0
 8001a80:	1c31      	adds	r1, r6, #0
 8001a82:	1c1a      	adds	r2, r3, #0
 8001a84:	1c23      	adds	r3, r4, #0
 8001a86:	f001 fc95 	bl	80033b4 <__adddf3>
 8001a8a:	1c03      	adds	r3, r0, #0
 8001a8c:	1c0c      	adds	r4, r1, #0
 8001a8e:	e01f      	b.n	8001ad0 <ProcCapture+0xca8>
	...
 8001a98:	952d234f 	.word	0x952d234f
 8001a9c:	bfb423b7 	.word	0xbfb423b7
 8001aa0:	b9778573 	.word	0xb9778573
 8001aa4:	3fedef88 	.word	0x3fedef88
 8001aa8:	9db22d0e 	.word	0x9db22d0e
 8001aac:	3fc6a7ef 	.word	0x3fc6a7ef
 8001ab0:	9db22d0e 	.word	0x9db22d0e
 8001ab4:	bfa6a7ef 	.word	0xbfa6a7ef
 8001ab8:	886594af 	.word	0x886594af
 8001abc:	bfb45d63 	.word	0xbfb45d63
 8001ac0:	9db22d0e 	.word	0x9db22d0e
 8001ac4:	3fe6a7ef 	.word	0x3fe6a7ef
 8001ac8:	0ff97247 	.word	0x0ff97247
 8001acc:	3fdbb7e9 	.word	0x3fdbb7e9
 8001ad0:	1c18      	adds	r0, r3, #0
 8001ad2:	1c21      	adds	r1, r4, #0
 8001ad4:	f002 f836 	bl	8003b44 <__aeabi_d2iz>
 8001ad8:	1c03      	adds	r3, r0, #0
 8001ada:	041b      	lsls	r3, r3, #16
 8001adc:	0c1b      	lsrs	r3, r3, #16
 8001ade:	041b      	lsls	r3, r3, #16
 8001ae0:	0c1a      	lsrs	r2, r3, #16
 8001ae2:	1cbb      	adds	r3, r7, #2
 8001ae4:	881b      	ldrh	r3, [r3, #0]
 8001ae6:	18d3      	adds	r3, r2, r3
 8001ae8:	041b      	lsls	r3, r3, #16
 8001aea:	0c1b      	lsrs	r3, r3, #16
 8001aec:	4642      	mov	r2, r8
 8001aee:	8013      	strh	r3, [r2, #0]
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	2208      	movs	r2, #8
 8001af4:	18d2      	adds	r2, r2, r3
 8001af6:	4690      	mov	r8, r2
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3302      	adds	r3, #2
 8001afc:	881b      	ldrh	r3, [r3, #0]
 8001afe:	041b      	lsls	r3, r3, #16
 8001b00:	141b      	asrs	r3, r3, #16
 8001b02:	1c18      	adds	r0, r3, #0
 8001b04:	f002 f950 	bl	8003da8 <__aeabi_i2f>
 8001b08:	1c03      	adds	r3, r0, #0
 8001b0a:	1c18      	adds	r0, r3, #0
 8001b0c:	f001 fdb0 	bl	8003670 <__aeabi_f2d>
 8001b10:	1c03      	adds	r3, r0, #0
 8001b12:	1c0c      	adds	r4, r1, #0
 8001b14:	1c18      	adds	r0, r3, #0
 8001b16:	1c21      	adds	r1, r4, #0
 8001b18:	4b6e      	ldr	r3, [pc, #440]	; (8001cd4 <ProcCapture+0xeac>)
 8001b1a:	4a6d      	ldr	r2, [pc, #436]	; (8001cd0 <ProcCapture+0xea8>)
 8001b1c:	f001 fe00 	bl	8003720 <__aeabi_dmul>
 8001b20:	1c03      	adds	r3, r0, #0
 8001b22:	1c0c      	adds	r4, r1, #0
 8001b24:	1c1d      	adds	r5, r3, #0
 8001b26:	1c26      	adds	r6, r4, #0
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3304      	adds	r3, #4
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	041b      	lsls	r3, r3, #16
 8001b30:	141b      	asrs	r3, r3, #16
 8001b32:	1c18      	adds	r0, r3, #0
 8001b34:	f002 f938 	bl	8003da8 <__aeabi_i2f>
 8001b38:	1c03      	adds	r3, r0, #0
 8001b3a:	1c18      	adds	r0, r3, #0
 8001b3c:	f001 fd98 	bl	8003670 <__aeabi_f2d>
 8001b40:	1c03      	adds	r3, r0, #0
 8001b42:	1c0c      	adds	r4, r1, #0
 8001b44:	1c18      	adds	r0, r3, #0
 8001b46:	1c21      	adds	r1, r4, #0
 8001b48:	4a63      	ldr	r2, [pc, #396]	; (8001cd8 <ProcCapture+0xeb0>)
 8001b4a:	4b64      	ldr	r3, [pc, #400]	; (8001cdc <ProcCapture+0xeb4>)
 8001b4c:	f001 fde8 	bl	8003720 <__aeabi_dmul>
 8001b50:	1c03      	adds	r3, r0, #0
 8001b52:	1c0c      	adds	r4, r1, #0
 8001b54:	1c28      	adds	r0, r5, #0
 8001b56:	1c31      	adds	r1, r6, #0
 8001b58:	1c1a      	adds	r2, r3, #0
 8001b5a:	1c23      	adds	r3, r4, #0
 8001b5c:	f001 fc2a 	bl	80033b4 <__adddf3>
 8001b60:	1c03      	adds	r3, r0, #0
 8001b62:	1c0c      	adds	r4, r1, #0
 8001b64:	1c1d      	adds	r5, r3, #0
 8001b66:	1c26      	adds	r6, r4, #0
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3306      	adds	r3, #6
 8001b6c:	881b      	ldrh	r3, [r3, #0]
 8001b6e:	041b      	lsls	r3, r3, #16
 8001b70:	141b      	asrs	r3, r3, #16
 8001b72:	1c18      	adds	r0, r3, #0
 8001b74:	f002 f918 	bl	8003da8 <__aeabi_i2f>
 8001b78:	1c03      	adds	r3, r0, #0
 8001b7a:	1c18      	adds	r0, r3, #0
 8001b7c:	f001 fd78 	bl	8003670 <__aeabi_f2d>
 8001b80:	1c03      	adds	r3, r0, #0
 8001b82:	1c0c      	adds	r4, r1, #0
 8001b84:	1c18      	adds	r0, r3, #0
 8001b86:	1c21      	adds	r1, r4, #0
 8001b88:	4a55      	ldr	r2, [pc, #340]	; (8001ce0 <ProcCapture+0xeb8>)
 8001b8a:	4b56      	ldr	r3, [pc, #344]	; (8001ce4 <ProcCapture+0xebc>)
 8001b8c:	f001 fdc8 	bl	8003720 <__aeabi_dmul>
 8001b90:	1c03      	adds	r3, r0, #0
 8001b92:	1c0c      	adds	r4, r1, #0
 8001b94:	1c28      	adds	r0, r5, #0
 8001b96:	1c31      	adds	r1, r6, #0
 8001b98:	1c1a      	adds	r2, r3, #0
 8001b9a:	1c23      	adds	r3, r4, #0
 8001b9c:	f001 fc0a 	bl	80033b4 <__adddf3>
 8001ba0:	1c03      	adds	r3, r0, #0
 8001ba2:	1c0c      	adds	r4, r1, #0
 8001ba4:	1c1d      	adds	r5, r3, #0
 8001ba6:	1c26      	adds	r6, r4, #0
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3308      	adds	r3, #8
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	041b      	lsls	r3, r3, #16
 8001bb0:	141b      	asrs	r3, r3, #16
 8001bb2:	1c18      	adds	r0, r3, #0
 8001bb4:	f002 f8f8 	bl	8003da8 <__aeabi_i2f>
 8001bb8:	1c03      	adds	r3, r0, #0
 8001bba:	1c18      	adds	r0, r3, #0
 8001bbc:	f001 fd58 	bl	8003670 <__aeabi_f2d>
 8001bc0:	1c03      	adds	r3, r0, #0
 8001bc2:	1c0c      	adds	r4, r1, #0
 8001bc4:	1c18      	adds	r0, r3, #0
 8001bc6:	1c21      	adds	r1, r4, #0
 8001bc8:	4a47      	ldr	r2, [pc, #284]	; (8001ce8 <ProcCapture+0xec0>)
 8001bca:	4b48      	ldr	r3, [pc, #288]	; (8001cec <ProcCapture+0xec4>)
 8001bcc:	f001 fda8 	bl	8003720 <__aeabi_dmul>
 8001bd0:	1c03      	adds	r3, r0, #0
 8001bd2:	1c0c      	adds	r4, r1, #0
 8001bd4:	1c28      	adds	r0, r5, #0
 8001bd6:	1c31      	adds	r1, r6, #0
 8001bd8:	1c1a      	adds	r2, r3, #0
 8001bda:	1c23      	adds	r3, r4, #0
 8001bdc:	f001 fbea 	bl	80033b4 <__adddf3>
 8001be0:	1c03      	adds	r3, r0, #0
 8001be2:	1c0c      	adds	r4, r1, #0
 8001be4:	1c1d      	adds	r5, r3, #0
 8001be6:	1c26      	adds	r6, r4, #0
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	330a      	adds	r3, #10
 8001bec:	881b      	ldrh	r3, [r3, #0]
 8001bee:	041b      	lsls	r3, r3, #16
 8001bf0:	141b      	asrs	r3, r3, #16
 8001bf2:	1c18      	adds	r0, r3, #0
 8001bf4:	f002 f8d8 	bl	8003da8 <__aeabi_i2f>
 8001bf8:	1c03      	adds	r3, r0, #0
 8001bfa:	1c18      	adds	r0, r3, #0
 8001bfc:	f001 fd38 	bl	8003670 <__aeabi_f2d>
 8001c00:	1c03      	adds	r3, r0, #0
 8001c02:	1c0c      	adds	r4, r1, #0
 8001c04:	1c18      	adds	r0, r3, #0
 8001c06:	1c21      	adds	r1, r4, #0
 8001c08:	4a39      	ldr	r2, [pc, #228]	; (8001cf0 <ProcCapture+0xec8>)
 8001c0a:	4b3a      	ldr	r3, [pc, #232]	; (8001cf4 <ProcCapture+0xecc>)
 8001c0c:	f001 fd88 	bl	8003720 <__aeabi_dmul>
 8001c10:	1c03      	adds	r3, r0, #0
 8001c12:	1c0c      	adds	r4, r1, #0
 8001c14:	1c28      	adds	r0, r5, #0
 8001c16:	1c31      	adds	r1, r6, #0
 8001c18:	1c1a      	adds	r2, r3, #0
 8001c1a:	1c23      	adds	r3, r4, #0
 8001c1c:	f001 fbca 	bl	80033b4 <__adddf3>
 8001c20:	1c03      	adds	r3, r0, #0
 8001c22:	1c0c      	adds	r4, r1, #0
 8001c24:	1c18      	adds	r0, r3, #0
 8001c26:	1c21      	adds	r1, r4, #0
 8001c28:	f001 ff8c 	bl	8003b44 <__aeabi_d2iz>
 8001c2c:	1c03      	adds	r3, r0, #0
 8001c2e:	041b      	lsls	r3, r3, #16
 8001c30:	0c1b      	lsrs	r3, r3, #16
 8001c32:	041b      	lsls	r3, r3, #16
 8001c34:	0c1a      	lsrs	r2, r3, #16
 8001c36:	1cbb      	adds	r3, r7, #2
 8001c38:	881b      	ldrh	r3, [r3, #0]
 8001c3a:	18d3      	adds	r3, r2, r3
 8001c3c:	041b      	lsls	r3, r3, #16
 8001c3e:	0c1b      	lsrs	r3, r3, #16
 8001c40:	4642      	mov	r2, r8
 8001c42:	8013      	strh	r3, [r2, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3302      	adds	r3, #2
 8001c48:	607b      	str	r3, [r7, #4]
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	330a      	adds	r3, #10
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	1c3b      	adds	r3, r7, #0
 8001c52:	330e      	adds	r3, #14
 8001c54:	1c3a      	adds	r2, r7, #0
 8001c56:	320e      	adds	r2, #14
 8001c58:	8812      	ldrh	r2, [r2, #0]
 8001c5a:	3201      	adds	r2, #1
 8001c5c:	801a      	strh	r2, [r3, #0]
 8001c5e:	4b26      	ldr	r3, [pc, #152]	; (8001cf8 <ProcCapture+0xed0>)
 8001c60:	8a1b      	ldrh	r3, [r3, #16]
 8001c62:	1c18      	adds	r0, r3, #0
 8001c64:	2105      	movs	r1, #5
 8001c66:	f001 fb8b 	bl	8003380 <__udivsi3>
 8001c6a:	1c03      	adds	r3, r0, #0
 8001c6c:	041b      	lsls	r3, r3, #16
 8001c6e:	0c1b      	lsrs	r3, r3, #16
 8001c70:	1c3a      	adds	r2, r7, #0
 8001c72:	320e      	adds	r2, #14
 8001c74:	8812      	ldrh	r2, [r2, #0]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d200      	bcs.n	8001c7c <ProcCapture+0xe54>
 8001c7a:	e513      	b.n	80016a4 <ProcCapture+0x87c>
 8001c7c:	46c0      	nop			; (mov r8, r8)
 8001c7e:	4b1f      	ldr	r3, [pc, #124]	; (8001cfc <ProcCapture+0xed4>)
 8001c80:	4a1f      	ldr	r2, [pc, #124]	; (8001d00 <ProcCapture+0xed8>)
 8001c82:	619a      	str	r2, [r3, #24]
 8001c84:	4b1d      	ldr	r3, [pc, #116]	; (8001cfc <ProcCapture+0xed4>)
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	1c1a      	adds	r2, r3, #0
 8001c8a:	2320      	movs	r3, #32
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d017      	beq.n	8001cc2 <ProcCapture+0xe9a>
 8001c92:	4b1a      	ldr	r3, [pc, #104]	; (8001cfc <ProcCapture+0xed4>)
 8001c94:	881b      	ldrh	r3, [r3, #0]
 8001c96:	2204      	movs	r2, #4
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	041b      	lsls	r3, r3, #16
 8001c9c:	0c1a      	lsrs	r2, r3, #16
 8001c9e:	4b17      	ldr	r3, [pc, #92]	; (8001cfc <ProcCapture+0xed4>)
 8001ca0:	801a      	strh	r2, [r3, #0]
 8001ca2:	4b16      	ldr	r3, [pc, #88]	; (8001cfc <ProcCapture+0xed4>)
 8001ca4:	881b      	ldrh	r3, [r3, #0]
 8001ca6:	2220      	movs	r2, #32
 8001ca8:	4393      	bics	r3, r2
 8001caa:	041b      	lsls	r3, r3, #16
 8001cac:	0c1a      	lsrs	r2, r3, #16
 8001cae:	4b13      	ldr	r3, [pc, #76]	; (8001cfc <ProcCapture+0xed4>)
 8001cb0:	801a      	strh	r2, [r3, #0]
 8001cb2:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <ProcCapture+0xed4>)
 8001cb4:	885b      	ldrh	r3, [r3, #2]
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	041b      	lsls	r3, r3, #16
 8001cbc:	0c1a      	lsrs	r2, r3, #16
 8001cbe:	4b0f      	ldr	r3, [pc, #60]	; (8001cfc <ProcCapture+0xed4>)
 8001cc0:	805a      	strh	r2, [r3, #2]
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	b006      	add	sp, #24
 8001cc6:	bc04      	pop	{r2}
 8001cc8:	4690      	mov	r8, r2
 8001cca:	bcf0      	pop	{r4, r5, r6, r7}
 8001ccc:	bc01      	pop	{r0}
 8001cce:	4700      	bx	r0
 8001cd0:	9db22d0e 	.word	0x9db22d0e
 8001cd4:	bfa6a7ef 	.word	0xbfa6a7ef
 8001cd8:	9db22d0e 	.word	0x9db22d0e
 8001cdc:	3fc6a7ef 	.word	0x3fc6a7ef
 8001ce0:	b9778573 	.word	0xb9778573
 8001ce4:	3fedef88 	.word	0x3fedef88
 8001ce8:	952d234f 	.word	0x952d234f
 8001cec:	bfb423b7 	.word	0xbfb423b7
	...
 8001cf8:	200009c8 	.word	0x200009c8
 8001cfc:	2000233c 	.word	0x2000233c
 8001d00:	20001b08 	.word	0x20001b08

08001d04 <Rolling>:
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <Rolling+0x4c>)
 8001d0a:	881b      	ldrh	r3, [r3, #0]
 8001d0c:	2208      	movs	r2, #8
 8001d0e:	4393      	bics	r3, r2
 8001d10:	041b      	lsls	r3, r3, #16
 8001d12:	0c1a      	lsrs	r2, r3, #16
 8001d14:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <Rolling+0x4c>)
 8001d16:	801a      	strh	r2, [r3, #0]
 8001d18:	4b0e      	ldr	r3, [pc, #56]	; (8001d54 <Rolling+0x50>)
 8001d1a:	7a9b      	ldrb	r3, [r3, #10]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d006      	beq.n	8001d2e <Rolling+0x2a>
 8001d20:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <Rolling+0x4c>)
 8001d22:	881b      	ldrh	r3, [r3, #0]
 8001d24:	1c1a      	adds	r2, r3, #0
 8001d26:	2302      	movs	r3, #2
 8001d28:	4013      	ands	r3, r2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00b      	beq.n	8001d46 <Rolling+0x42>
 8001d2e:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <Rolling+0x4c>)
 8001d30:	695a      	ldr	r2, [r3, #20]
 8001d32:	4b07      	ldr	r3, [pc, #28]	; (8001d50 <Rolling+0x4c>)
 8001d34:	619a      	str	r2, [r3, #24]
 8001d36:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <Rolling+0x4c>)
 8001d38:	885b      	ldrh	r3, [r3, #2]
 8001d3a:	2204      	movs	r2, #4
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	041b      	lsls	r3, r3, #16
 8001d40:	0c1a      	lsrs	r2, r3, #16
 8001d42:	4b03      	ldr	r3, [pc, #12]	; (8001d50 <Rolling+0x4c>)
 8001d44:	805a      	strh	r2, [r3, #2]
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	bc01      	pop	{r0}
 8001d4c:	4700      	bx	r0
 8001d4e:	46c0      	nop			; (mov r8, r8)
 8001d50:	2000233c 	.word	0x2000233c
 8001d54:	200009c8 	.word	0x200009c8

08001d58 <StopCapture>:
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	2380      	movs	r3, #128	; 0x80
 8001d5e:	05db      	lsls	r3, r3, #23
 8001d60:	2280      	movs	r2, #128	; 0x80
 8001d62:	05d2      	lsls	r2, r2, #23
 8001d64:	8812      	ldrh	r2, [r2, #0]
 8001d66:	0412      	lsls	r2, r2, #16
 8001d68:	0c12      	lsrs	r2, r2, #16
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	438a      	bics	r2, r1
 8001d6e:	0412      	lsls	r2, r2, #16
 8001d70:	0c12      	lsrs	r2, r2, #16
 8001d72:	801a      	strh	r2, [r3, #0]
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc80      	pop	{r7}
 8001d78:	bc01      	pop	{r0}
 8001d7a:	4700      	bx	r0

08001d7c <SetVSen>:
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	1c02      	adds	r2, r0, #0
 8001d84:	1dfb      	adds	r3, r7, #7
 8001d86:	701a      	strb	r2, [r3, #0]
 8001d88:	1dfb      	adds	r3, r7, #7
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	061b      	lsls	r3, r3, #24
 8001d8e:	161b      	asrs	r3, r3, #24
 8001d90:	2b0c      	cmp	r3, #12
 8001d92:	dd02      	ble.n	8001d9a <SetVSen+0x1e>
 8001d94:	1dfb      	adds	r3, r7, #7
 8001d96:	220c      	movs	r2, #12
 8001d98:	701a      	strb	r2, [r3, #0]
 8001d9a:	1dfb      	adds	r3, r7, #7
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	061b      	lsls	r3, r3, #24
 8001da0:	161b      	asrs	r3, r3, #24
 8001da2:	2b03      	cmp	r3, #3
 8001da4:	dc02      	bgt.n	8001dac <SetVSen+0x30>
 8001da6:	1dfb      	adds	r3, r7, #7
 8001da8:	2204      	movs	r2, #4
 8001daa:	701a      	strb	r2, [r3, #0]
 8001dac:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <SetVSen+0x4c>)
 8001dae:	1dfa      	adds	r2, r7, #7
 8001db0:	7812      	ldrb	r2, [r2, #0]
 8001db2:	711a      	strb	r2, [r3, #4]
 8001db4:	4b04      	ldr	r3, [pc, #16]	; (8001dc8 <SetVSen+0x4c>)
 8001db6:	791b      	ldrb	r3, [r3, #4]
 8001db8:	061b      	lsls	r3, r3, #24
 8001dba:	161b      	asrs	r3, r3, #24
 8001dbc:	1c18      	adds	r0, r3, #0
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	b002      	add	sp, #8
 8001dc2:	bc80      	pop	{r7}
 8001dc4:	bc02      	pop	{r1}
 8001dc6:	4708      	bx	r1
 8001dc8:	200009c8 	.word	0x200009c8

08001dcc <GetVSen>:
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	4b04      	ldr	r3, [pc, #16]	; (8001de4 <GetVSen+0x18>)
 8001dd2:	791b      	ldrb	r3, [r3, #4]
 8001dd4:	061b      	lsls	r3, r3, #24
 8001dd6:	161b      	asrs	r3, r3, #24
 8001dd8:	1c18      	adds	r0, r3, #0
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	bc02      	pop	{r1}
 8001de0:	4708      	bx	r1
 8001de2:	46c0      	nop			; (mov r8, r8)
 8001de4:	200009c8 	.word	0x200009c8

08001de8 <SetCpl>:
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	1c02      	adds	r2, r0, #0
 8001df0:	1dfb      	adds	r3, r7, #7
 8001df2:	701a      	strb	r2, [r3, #0]
 8001df4:	1dfb      	adds	r3, r7, #7
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	061b      	lsls	r3, r3, #24
 8001dfa:	161b      	asrs	r3, r3, #24
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	dd02      	ble.n	8001e06 <SetCpl+0x1e>
 8001e00:	1dfb      	adds	r3, r7, #7
 8001e02:	2202      	movs	r2, #2
 8001e04:	701a      	strb	r2, [r3, #0]
 8001e06:	1dfb      	adds	r3, r7, #7
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b7f      	cmp	r3, #127	; 0x7f
 8001e0c:	d902      	bls.n	8001e14 <SetCpl+0x2c>
 8001e0e:	1dfb      	adds	r3, r7, #7
 8001e10:	2200      	movs	r2, #0
 8001e12:	701a      	strb	r2, [r3, #0]
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <SetCpl+0x48>)
 8001e16:	1dfa      	adds	r2, r7, #7
 8001e18:	7812      	ldrb	r2, [r2, #0]
 8001e1a:	715a      	strb	r2, [r3, #5]
 8001e1c:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <SetCpl+0x48>)
 8001e1e:	795b      	ldrb	r3, [r3, #5]
 8001e20:	061b      	lsls	r3, r3, #24
 8001e22:	161b      	asrs	r3, r3, #24
 8001e24:	1c18      	adds	r0, r3, #0
 8001e26:	46bd      	mov	sp, r7
 8001e28:	b002      	add	sp, #8
 8001e2a:	bc80      	pop	{r7}
 8001e2c:	bc02      	pop	{r1}
 8001e2e:	4708      	bx	r1
 8001e30:	200009c8 	.word	0x200009c8

08001e34 <GetCpl>:
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	4b04      	ldr	r3, [pc, #16]	; (8001e4c <GetCpl+0x18>)
 8001e3a:	795b      	ldrb	r3, [r3, #5]
 8001e3c:	061b      	lsls	r3, r3, #24
 8001e3e:	161b      	asrs	r3, r3, #24
 8001e40:	1c18      	adds	r0, r3, #0
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	bc02      	pop	{r1}
 8001e48:	4708      	bx	r1
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	200009c8 	.word	0x200009c8

08001e50 <SetVPos>:
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	1c02      	adds	r2, r0, #0
 8001e58:	1dbb      	adds	r3, r7, #6
 8001e5a:	801a      	strh	r2, [r3, #0]
 8001e5c:	1dbb      	adds	r3, r7, #6
 8001e5e:	2200      	movs	r2, #0
 8001e60:	5e9b      	ldrsh	r3, [r3, r2]
 8001e62:	1c1a      	adds	r2, r3, #0
 8001e64:	32ff      	adds	r2, #255	; 0xff
 8001e66:	da03      	bge.n	8001e70 <SetVPos+0x20>
 8001e68:	1dbb      	adds	r3, r7, #6
 8001e6a:	22ff      	movs	r2, #255	; 0xff
 8001e6c:	4252      	negs	r2, r2
 8001e6e:	801a      	strh	r2, [r3, #0]
 8001e70:	1dbb      	adds	r3, r7, #6
 8001e72:	2200      	movs	r2, #0
 8001e74:	5e9b      	ldrsh	r3, [r3, r2]
 8001e76:	2bff      	cmp	r3, #255	; 0xff
 8001e78:	dd02      	ble.n	8001e80 <SetVPos+0x30>
 8001e7a:	1dbb      	adds	r3, r7, #6
 8001e7c:	22ff      	movs	r2, #255	; 0xff
 8001e7e:	801a      	strh	r2, [r3, #0]
 8001e80:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <SetVPos+0x4c>)
 8001e82:	1dba      	adds	r2, r7, #6
 8001e84:	8812      	ldrh	r2, [r2, #0]
 8001e86:	80da      	strh	r2, [r3, #6]
 8001e88:	1dbb      	adds	r3, r7, #6
 8001e8a:	881b      	ldrh	r3, [r3, #0]
 8001e8c:	041b      	lsls	r3, r3, #16
 8001e8e:	141b      	asrs	r3, r3, #16
 8001e90:	1c18      	adds	r0, r3, #0
 8001e92:	46bd      	mov	sp, r7
 8001e94:	b002      	add	sp, #8
 8001e96:	bc80      	pop	{r7}
 8001e98:	bc02      	pop	{r1}
 8001e9a:	4708      	bx	r1
 8001e9c:	200009c8 	.word	0x200009c8

08001ea0 <GetVPos>:
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	4b04      	ldr	r3, [pc, #16]	; (8001eb8 <GetVPos+0x18>)
 8001ea6:	88db      	ldrh	r3, [r3, #6]
 8001ea8:	041b      	lsls	r3, r3, #16
 8001eaa:	141b      	asrs	r3, r3, #16
 8001eac:	1c18      	adds	r0, r3, #0
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	bc02      	pop	{r1}
 8001eb4:	4708      	bx	r1
 8001eb6:	46c0      	nop			; (mov r8, r8)
 8001eb8:	200009c8 	.word	0x200009c8

08001ebc <SetTimeBase>:
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	1c02      	adds	r2, r0, #0
 8001ec4:	1dfb      	adds	r3, r7, #7
 8001ec6:	701a      	strb	r2, [r3, #0]
 8001ec8:	1dfb      	adds	r3, r7, #7
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	061b      	lsls	r3, r3, #24
 8001ece:	161b      	asrs	r3, r3, #24
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	dc02      	bgt.n	8001eda <SetTimeBase+0x1e>
 8001ed4:	1dfb      	adds	r3, r7, #7
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	701a      	strb	r2, [r3, #0]
 8001eda:	1dfb      	adds	r3, r7, #7
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	061b      	lsls	r3, r3, #24
 8001ee0:	161b      	asrs	r3, r3, #24
 8001ee2:	2b18      	cmp	r3, #24
 8001ee4:	dd02      	ble.n	8001eec <SetTimeBase+0x30>
 8001ee6:	1dfb      	adds	r3, r7, #7
 8001ee8:	2218      	movs	r2, #24
 8001eea:	701a      	strb	r2, [r3, #0]
 8001eec:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <SetTimeBase+0x4c>)
 8001eee:	1dfa      	adds	r2, r7, #7
 8001ef0:	7812      	ldrb	r2, [r2, #0]
 8001ef2:	701a      	strb	r2, [r3, #0]
 8001ef4:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <SetTimeBase+0x4c>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	061b      	lsls	r3, r3, #24
 8001efa:	161b      	asrs	r3, r3, #24
 8001efc:	1c18      	adds	r0, r3, #0
 8001efe:	46bd      	mov	sp, r7
 8001f00:	b002      	add	sp, #8
 8001f02:	bc80      	pop	{r7}
 8001f04:	bc02      	pop	{r1}
 8001f06:	4708      	bx	r1
 8001f08:	200009c8 	.word	0x200009c8

08001f0c <GetTimebase>:
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <GetTimebase+0x18>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	061b      	lsls	r3, r3, #24
 8001f16:	161b      	asrs	r3, r3, #24
 8001f18:	1c18      	adds	r0, r3, #0
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	bc02      	pop	{r1}
 8001f20:	4708      	bx	r1
 8001f22:	46c0      	nop			; (mov r8, r8)
 8001f24:	200009c8 	.word	0x200009c8

08001f28 <SetHPos>:
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	1c02      	adds	r2, r0, #0
 8001f30:	1dbb      	adds	r3, r7, #6
 8001f32:	801a      	strh	r2, [r3, #0]
 8001f34:	1dbb      	adds	r3, r7, #6
 8001f36:	2100      	movs	r1, #0
 8001f38:	5e5b      	ldrsh	r3, [r3, r1]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	da02      	bge.n	8001f44 <SetHPos+0x1c>
 8001f3e:	1dbb      	adds	r3, r7, #6
 8001f40:	2200      	movs	r2, #0
 8001f42:	801a      	strh	r2, [r3, #0]
 8001f44:	1dbb      	adds	r3, r7, #6
 8001f46:	2100      	movs	r1, #0
 8001f48:	5e5a      	ldrsh	r2, [r3, r1]
 8001f4a:	4b0e      	ldr	r3, [pc, #56]	; (8001f84 <SetHPos+0x5c>)
 8001f4c:	8a1b      	ldrh	r3, [r3, #16]
 8001f4e:	3b2e      	subs	r3, #46	; 0x2e
 8001f50:	3bff      	subs	r3, #255	; 0xff
 8001f52:	429a      	cmp	r2, r3
 8001f54:	dd07      	ble.n	8001f66 <SetHPos+0x3e>
 8001f56:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <SetHPos+0x5c>)
 8001f58:	8a1b      	ldrh	r3, [r3, #16]
 8001f5a:	3b2e      	subs	r3, #46	; 0x2e
 8001f5c:	3bff      	subs	r3, #255	; 0xff
 8001f5e:	041b      	lsls	r3, r3, #16
 8001f60:	0c1a      	lsrs	r2, r3, #16
 8001f62:	1dbb      	adds	r3, r7, #6
 8001f64:	801a      	strh	r2, [r3, #0]
 8001f66:	4b07      	ldr	r3, [pc, #28]	; (8001f84 <SetHPos+0x5c>)
 8001f68:	1dba      	adds	r2, r7, #6
 8001f6a:	8812      	ldrh	r2, [r2, #0]
 8001f6c:	805a      	strh	r2, [r3, #2]
 8001f6e:	4b05      	ldr	r3, [pc, #20]	; (8001f84 <SetHPos+0x5c>)
 8001f70:	885b      	ldrh	r3, [r3, #2]
 8001f72:	041b      	lsls	r3, r3, #16
 8001f74:	141b      	asrs	r3, r3, #16
 8001f76:	1c18      	adds	r0, r3, #0
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	b002      	add	sp, #8
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	bc02      	pop	{r1}
 8001f80:	4708      	bx	r1
 8001f82:	46c0      	nop			; (mov r8, r8)
 8001f84:	200009c8 	.word	0x200009c8

08001f88 <GetHPos>:
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	4b04      	ldr	r3, [pc, #16]	; (8001fa0 <GetHPos+0x18>)
 8001f8e:	885b      	ldrh	r3, [r3, #2]
 8001f90:	041b      	lsls	r3, r3, #16
 8001f92:	141b      	asrs	r3, r3, #16
 8001f94:	1c18      	adds	r0, r3, #0
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	bc02      	pop	{r1}
 8001f9c:	4708      	bx	r1
 8001f9e:	46c0      	nop			; (mov r8, r8)
 8001fa0:	200009c8 	.word	0x200009c8

08001fa4 <SetTrigMode>:
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	1c02      	adds	r2, r0, #0
 8001fac:	1dfb      	adds	r3, r7, #7
 8001fae:	701a      	strb	r2, [r3, #0]
 8001fb0:	1dfb      	adds	r3, r7, #7
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b7f      	cmp	r3, #127	; 0x7f
 8001fb6:	d902      	bls.n	8001fbe <SetTrigMode+0x1a>
 8001fb8:	1dfb      	adds	r3, r7, #7
 8001fba:	2200      	movs	r2, #0
 8001fbc:	701a      	strb	r2, [r3, #0]
 8001fbe:	1dfb      	adds	r3, r7, #7
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	061b      	lsls	r3, r3, #24
 8001fc4:	161b      	asrs	r3, r3, #24
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	dd02      	ble.n	8001fd0 <SetTrigMode+0x2c>
 8001fca:	1dfb      	adds	r3, r7, #7
 8001fcc:	2202      	movs	r2, #2
 8001fce:	701a      	strb	r2, [r3, #0]
 8001fd0:	4b06      	ldr	r3, [pc, #24]	; (8001fec <SetTrigMode+0x48>)
 8001fd2:	1dfa      	adds	r2, r7, #7
 8001fd4:	7812      	ldrb	r2, [r2, #0]
 8001fd6:	729a      	strb	r2, [r3, #10]
 8001fd8:	4b04      	ldr	r3, [pc, #16]	; (8001fec <SetTrigMode+0x48>)
 8001fda:	7a9b      	ldrb	r3, [r3, #10]
 8001fdc:	061b      	lsls	r3, r3, #24
 8001fde:	161b      	asrs	r3, r3, #24
 8001fe0:	1c18      	adds	r0, r3, #0
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	b002      	add	sp, #8
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	bc02      	pop	{r1}
 8001fea:	4708      	bx	r1
 8001fec:	200009c8 	.word	0x200009c8

08001ff0 <GetTrigMode>:
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	4b04      	ldr	r3, [pc, #16]	; (8002008 <GetTrigMode+0x18>)
 8001ff6:	7a9b      	ldrb	r3, [r3, #10]
 8001ff8:	061b      	lsls	r3, r3, #24
 8001ffa:	161b      	asrs	r3, r3, #24
 8001ffc:	1c18      	adds	r0, r3, #0
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bc80      	pop	{r7}
 8002002:	bc02      	pop	{r1}
 8002004:	4708      	bx	r1
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	200009c8 	.word	0x200009c8

0800200c <SetTrigEdge>:
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	1c02      	adds	r2, r0, #0
 8002014:	1dfb      	adds	r3, r7, #7
 8002016:	701a      	strb	r2, [r3, #0]
 8002018:	1dfb      	adds	r3, r7, #7
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b7f      	cmp	r3, #127	; 0x7f
 800201e:	d902      	bls.n	8002026 <SetTrigEdge+0x1a>
 8002020:	1dfb      	adds	r3, r7, #7
 8002022:	2200      	movs	r2, #0
 8002024:	701a      	strb	r2, [r3, #0]
 8002026:	1dfb      	adds	r3, r7, #7
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	061b      	lsls	r3, r3, #24
 800202c:	161b      	asrs	r3, r3, #24
 800202e:	2b01      	cmp	r3, #1
 8002030:	dd02      	ble.n	8002038 <SetTrigEdge+0x2c>
 8002032:	1dfb      	adds	r3, r7, #7
 8002034:	2201      	movs	r2, #1
 8002036:	701a      	strb	r2, [r3, #0]
 8002038:	4b06      	ldr	r3, [pc, #24]	; (8002054 <SetTrigEdge+0x48>)
 800203a:	1dfa      	adds	r2, r7, #7
 800203c:	7812      	ldrb	r2, [r2, #0]
 800203e:	72da      	strb	r2, [r3, #11]
 8002040:	4b04      	ldr	r3, [pc, #16]	; (8002054 <SetTrigEdge+0x48>)
 8002042:	7adb      	ldrb	r3, [r3, #11]
 8002044:	061b      	lsls	r3, r3, #24
 8002046:	161b      	asrs	r3, r3, #24
 8002048:	1c18      	adds	r0, r3, #0
 800204a:	46bd      	mov	sp, r7
 800204c:	b002      	add	sp, #8
 800204e:	bc80      	pop	{r7}
 8002050:	bc02      	pop	{r1}
 8002052:	4708      	bx	r1
 8002054:	200009c8 	.word	0x200009c8

08002058 <GetTrigEdge>:
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
 800205c:	4b04      	ldr	r3, [pc, #16]	; (8002070 <GetTrigEdge+0x18>)
 800205e:	7adb      	ldrb	r3, [r3, #11]
 8002060:	061b      	lsls	r3, r3, #24
 8002062:	161b      	asrs	r3, r3, #24
 8002064:	1c18      	adds	r0, r3, #0
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	bc02      	pop	{r1}
 800206c:	4708      	bx	r1
 800206e:	46c0      	nop			; (mov r8, r8)
 8002070:	200009c8 	.word	0x200009c8

08002074 <SetTrigLvl>:
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	1c02      	adds	r2, r0, #0
 800207c:	1dbb      	adds	r3, r7, #6
 800207e:	801a      	strh	r2, [r3, #0]
 8002080:	1dbb      	adds	r3, r7, #6
 8002082:	2100      	movs	r1, #0
 8002084:	5e5a      	ldrsh	r2, [r3, r1]
 8002086:	4b0f      	ldr	r3, [pc, #60]	; (80020c4 <SetTrigLvl+0x50>)
 8002088:	429a      	cmp	r2, r3
 800208a:	da02      	bge.n	8002092 <SetTrigLvl+0x1e>
 800208c:	1dbb      	adds	r3, r7, #6
 800208e:	4a0d      	ldr	r2, [pc, #52]	; (80020c4 <SetTrigLvl+0x50>)
 8002090:	801a      	strh	r2, [r3, #0]
 8002092:	1dbb      	adds	r3, r7, #6
 8002094:	2100      	movs	r1, #0
 8002096:	5e5a      	ldrsh	r2, [r3, r1]
 8002098:	2396      	movs	r3, #150	; 0x96
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	429a      	cmp	r2, r3
 800209e:	dd03      	ble.n	80020a8 <SetTrigLvl+0x34>
 80020a0:	1dbb      	adds	r3, r7, #6
 80020a2:	2296      	movs	r2, #150	; 0x96
 80020a4:	0052      	lsls	r2, r2, #1
 80020a6:	801a      	strh	r2, [r3, #0]
 80020a8:	4b07      	ldr	r3, [pc, #28]	; (80020c8 <SetTrigLvl+0x54>)
 80020aa:	1dba      	adds	r2, r7, #6
 80020ac:	8812      	ldrh	r2, [r2, #0]
 80020ae:	819a      	strh	r2, [r3, #12]
 80020b0:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <SetTrigLvl+0x54>)
 80020b2:	899b      	ldrh	r3, [r3, #12]
 80020b4:	041b      	lsls	r3, r3, #16
 80020b6:	141b      	asrs	r3, r3, #16
 80020b8:	1c18      	adds	r0, r3, #0
 80020ba:	46bd      	mov	sp, r7
 80020bc:	b002      	add	sp, #8
 80020be:	bc80      	pop	{r7}
 80020c0:	bc02      	pop	{r1}
 80020c2:	4708      	bx	r1
 80020c4:	fffffed4 	.word	0xfffffed4
 80020c8:	200009c8 	.word	0x200009c8

080020cc <GetTrigLvl>:
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	4b04      	ldr	r3, [pc, #16]	; (80020e4 <GetTrigLvl+0x18>)
 80020d2:	899b      	ldrh	r3, [r3, #12]
 80020d4:	041b      	lsls	r3, r3, #16
 80020d6:	141b      	asrs	r3, r3, #16
 80020d8:	1c18      	adds	r0, r3, #0
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	bc02      	pop	{r1}
 80020e0:	4708      	bx	r1
 80020e2:	46c0      	nop			; (mov r8, r8)
 80020e4:	200009c8 	.word	0x200009c8

080020e8 <SetRecLen>:
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	1c02      	adds	r2, r0, #0
 80020f0:	1dbb      	adds	r3, r7, #6
 80020f2:	801a      	strh	r2, [r3, #0]
 80020f4:	1dbb      	adds	r3, r7, #6
 80020f6:	881a      	ldrh	r2, [r3, #0]
 80020f8:	4b0e      	ldr	r3, [pc, #56]	; (8002134 <SetRecLen+0x4c>)
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d803      	bhi.n	8002106 <SetRecLen+0x1e>
 80020fe:	1dbb      	adds	r3, r7, #6
 8002100:	2280      	movs	r2, #128	; 0x80
 8002102:	0092      	lsls	r2, r2, #2
 8002104:	801a      	strh	r2, [r3, #0]
 8002106:	1dbb      	adds	r3, r7, #6
 8002108:	881a      	ldrh	r2, [r3, #0]
 800210a:	2380      	movs	r3, #128	; 0x80
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	429a      	cmp	r2, r3
 8002110:	d903      	bls.n	800211a <SetRecLen+0x32>
 8002112:	1dbb      	adds	r3, r7, #6
 8002114:	2280      	movs	r2, #128	; 0x80
 8002116:	00d2      	lsls	r2, r2, #3
 8002118:	801a      	strh	r2, [r3, #0]
 800211a:	4b07      	ldr	r3, [pc, #28]	; (8002138 <SetRecLen+0x50>)
 800211c:	1dba      	adds	r2, r7, #6
 800211e:	8812      	ldrh	r2, [r2, #0]
 8002120:	821a      	strh	r2, [r3, #16]
 8002122:	4b05      	ldr	r3, [pc, #20]	; (8002138 <SetRecLen+0x50>)
 8002124:	8a1b      	ldrh	r3, [r3, #16]
 8002126:	1c18      	adds	r0, r3, #0
 8002128:	46bd      	mov	sp, r7
 800212a:	b002      	add	sp, #8
 800212c:	bc80      	pop	{r7}
 800212e:	bc02      	pop	{r1}
 8002130:	4708      	bx	r1
 8002132:	46c0      	nop			; (mov r8, r8)
 8002134:	000001ff 	.word	0x000001ff
 8002138:	200009c8 	.word	0x200009c8

0800213c <GetRecLen>:
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
 8002140:	4b03      	ldr	r3, [pc, #12]	; (8002150 <GetRecLen+0x14>)
 8002142:	8a1b      	ldrh	r3, [r3, #16]
 8002144:	1c18      	adds	r0, r3, #0
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	bc02      	pop	{r1}
 800214c:	4708      	bx	r1
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	200009c8 	.word	0x200009c8

08002154 <SetFocus>:
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	1c02      	adds	r2, r0, #0
 800215c:	1dfb      	adds	r3, r7, #7
 800215e:	701a      	strb	r2, [r3, #0]
 8002160:	1dfb      	adds	r3, r7, #7
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b05      	cmp	r3, #5
 8002166:	d902      	bls.n	800216e <SetFocus+0x1a>
 8002168:	1dfb      	adds	r3, r7, #7
 800216a:	2205      	movs	r2, #5
 800216c:	701a      	strb	r2, [r3, #0]
 800216e:	4b06      	ldr	r3, [pc, #24]	; (8002188 <SetFocus+0x34>)
 8002170:	1dfa      	adds	r2, r7, #7
 8002172:	7812      	ldrb	r2, [r2, #0]
 8002174:	711a      	strb	r2, [r3, #4]
 8002176:	4b04      	ldr	r3, [pc, #16]	; (8002188 <SetFocus+0x34>)
 8002178:	791b      	ldrb	r3, [r3, #4]
 800217a:	1c18      	adds	r0, r3, #0
 800217c:	46bd      	mov	sp, r7
 800217e:	b002      	add	sp, #8
 8002180:	bc80      	pop	{r7}
 8002182:	bc02      	pop	{r1}
 8002184:	4708      	bx	r1
 8002186:	46c0      	nop			; (mov r8, r8)
 8002188:	2000233c 	.word	0x2000233c

0800218c <GetFocus>:
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
 8002190:	4b03      	ldr	r3, [pc, #12]	; (80021a0 <GetFocus+0x14>)
 8002192:	791b      	ldrb	r3, [r3, #4]
 8002194:	1c18      	adds	r0, r3, #0
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	bc02      	pop	{r1}
 800219c:	4708      	bx	r1
 800219e:	46c0      	nop			; (mov r8, r8)
 80021a0:	2000233c 	.word	0x2000233c

080021a4 <GetDsoStatus>:
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	4b03      	ldr	r3, [pc, #12]	; (80021b8 <GetDsoStatus+0x14>)
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	1c18      	adds	r0, r3, #0
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	bc02      	pop	{r1}
 80021b4:	4708      	bx	r1
 80021b6:	46c0      	nop			; (mov r8, r8)
 80021b8:	2000233c 	.word	0x2000233c

080021bc <SetHold>:
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
 80021c0:	4b05      	ldr	r3, [pc, #20]	; (80021d8 <SetHold+0x1c>)
 80021c2:	881b      	ldrh	r3, [r3, #0]
 80021c4:	2204      	movs	r2, #4
 80021c6:	4313      	orrs	r3, r2
 80021c8:	041b      	lsls	r3, r3, #16
 80021ca:	0c1a      	lsrs	r2, r3, #16
 80021cc:	4b02      	ldr	r3, [pc, #8]	; (80021d8 <SetHold+0x1c>)
 80021ce:	801a      	strh	r2, [r3, #0]
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bc80      	pop	{r7}
 80021d4:	bc01      	pop	{r0}
 80021d6:	4700      	bx	r0
 80021d8:	2000233c 	.word	0x2000233c

080021dc <ClrHold>:
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
 80021e0:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <ClrHold+0x1c>)
 80021e2:	881b      	ldrh	r3, [r3, #0]
 80021e4:	2204      	movs	r2, #4
 80021e6:	4393      	bics	r3, r2
 80021e8:	041b      	lsls	r3, r3, #16
 80021ea:	0c1a      	lsrs	r2, r3, #16
 80021ec:	4b02      	ldr	r3, [pc, #8]	; (80021f8 <ClrHold+0x1c>)
 80021ee:	801a      	strh	r2, [r3, #0]
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bc80      	pop	{r7}
 80021f4:	bc01      	pop	{r0}
 80021f6:	4700      	bx	r0
 80021f8:	2000233c 	.word	0x2000233c

080021fc <GetAverage>:
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
 8002200:	4b04      	ldr	r3, [pc, #16]	; (8002214 <GetAverage+0x18>)
 8002202:	89db      	ldrh	r3, [r3, #14]
 8002204:	041b      	lsls	r3, r3, #16
 8002206:	141b      	asrs	r3, r3, #16
 8002208:	1c18      	adds	r0, r3, #0
 800220a:	46bd      	mov	sp, r7
 800220c:	bc80      	pop	{r7}
 800220e:	bc02      	pop	{r1}
 8002210:	4708      	bx	r1
 8002212:	46c0      	nop			; (mov r8, r8)
 8002214:	2000233c 	.word	0x2000233c

08002218 <SetVPosOfs>:
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	1c02      	adds	r2, r0, #0
 8002220:	1dbb      	adds	r3, r7, #6
 8002222:	801a      	strh	r2, [r3, #0]
 8002224:	1dbb      	adds	r3, r7, #6
 8002226:	2200      	movs	r2, #0
 8002228:	5e9b      	ldrsh	r3, [r3, r2]
 800222a:	1c1a      	adds	r2, r3, #0
 800222c:	32ff      	adds	r2, #255	; 0xff
 800222e:	da03      	bge.n	8002238 <SetVPosOfs+0x20>
 8002230:	1dbb      	adds	r3, r7, #6
 8002232:	22ff      	movs	r2, #255	; 0xff
 8002234:	4252      	negs	r2, r2
 8002236:	801a      	strh	r2, [r3, #0]
 8002238:	1dbb      	adds	r3, r7, #6
 800223a:	2200      	movs	r2, #0
 800223c:	5e9b      	ldrsh	r3, [r3, r2]
 800223e:	2bff      	cmp	r3, #255	; 0xff
 8002240:	dd02      	ble.n	8002248 <SetVPosOfs+0x30>
 8002242:	1dbb      	adds	r3, r7, #6
 8002244:	22ff      	movs	r2, #255	; 0xff
 8002246:	801a      	strh	r2, [r3, #0]
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <SetVPosOfs+0x4c>)
 800224a:	1dba      	adds	r2, r7, #6
 800224c:	8812      	ldrh	r2, [r2, #0]
 800224e:	811a      	strh	r2, [r3, #8]
 8002250:	1dbb      	adds	r3, r7, #6
 8002252:	881b      	ldrh	r3, [r3, #0]
 8002254:	041b      	lsls	r3, r3, #16
 8002256:	141b      	asrs	r3, r3, #16
 8002258:	1c18      	adds	r0, r3, #0
 800225a:	46bd      	mov	sp, r7
 800225c:	b002      	add	sp, #8
 800225e:	bc80      	pop	{r7}
 8002260:	bc02      	pop	{r1}
 8002262:	4708      	bx	r1
 8002264:	200009c8 	.word	0x200009c8

08002268 <GetVPosOfs>:
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
 800226c:	4b04      	ldr	r3, [pc, #16]	; (8002280 <GetVPosOfs+0x18>)
 800226e:	891b      	ldrh	r3, [r3, #8]
 8002270:	041b      	lsls	r3, r3, #16
 8002272:	141b      	asrs	r3, r3, #16
 8002274:	1c18      	adds	r0, r3, #0
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	bc02      	pop	{r1}
 800227c:	4708      	bx	r1
 800227e:	46c0      	nop			; (mov r8, r8)
 8002280:	200009c8 	.word	0x200009c8

08002284 <UpdateDisp>:
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	1c02      	adds	r2, r0, #0
 800228c:	1dbb      	adds	r3, r7, #6
 800228e:	801a      	strh	r2, [r3, #0]
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <UpdateDisp+0x28>)
 8002292:	885a      	ldrh	r2, [r3, #2]
 8002294:	1dbb      	adds	r3, r7, #6
 8002296:	881b      	ldrh	r3, [r3, #0]
 8002298:	4313      	orrs	r3, r2
 800229a:	041b      	lsls	r3, r3, #16
 800229c:	0c1a      	lsrs	r2, r3, #16
 800229e:	4b03      	ldr	r3, [pc, #12]	; (80022ac <UpdateDisp+0x28>)
 80022a0:	805a      	strh	r2, [r3, #2]
 80022a2:	46bd      	mov	sp, r7
 80022a4:	b002      	add	sp, #8
 80022a6:	bc80      	pop	{r7}
 80022a8:	bc01      	pop	{r0}
 80022aa:	4700      	bx	r0
 80022ac:	2000233c 	.word	0x2000233c

080022b0 <Dummy>:
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bc80      	pop	{r7}
 80022b8:	bc01      	pop	{r0}
 80022ba:	4700      	bx	r0

080022bc <DsoDisplay>:
 80022bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022be:	b087      	sub	sp, #28
 80022c0:	af02      	add	r7, sp, #8
 80022c2:	4b8e      	ldr	r3, [pc, #568]	; (80024fc <DsoDisplay+0x240>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d123      	bne.n	8002312 <DsoDisplay+0x56>
 80022ca:	4b8d      	ldr	r3, [pc, #564]	; (8002500 <DsoDisplay+0x244>)
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	2380      	movs	r3, #128	; 0x80
 80022d0:	025b      	lsls	r3, r3, #9
 80022d2:	4013      	ands	r3, r2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d01c      	beq.n	8002312 <DsoDisplay+0x56>
 80022d8:	4b8a      	ldr	r3, [pc, #552]	; (8002504 <DsoDisplay+0x248>)
 80022da:	881b      	ldrh	r3, [r3, #0]
 80022dc:	3301      	adds	r3, #1
 80022de:	041b      	lsls	r3, r3, #16
 80022e0:	0c1a      	lsrs	r2, r3, #16
 80022e2:	4b88      	ldr	r3, [pc, #544]	; (8002504 <DsoDisplay+0x248>)
 80022e4:	801a      	strh	r2, [r3, #0]
 80022e6:	4b88      	ldr	r3, [pc, #544]	; (8002508 <DsoDisplay+0x24c>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	805a      	strh	r2, [r3, #2]
 80022ec:	4b85      	ldr	r3, [pc, #532]	; (8002504 <DsoDisplay+0x248>)
 80022ee:	881a      	ldrh	r2, [r3, #0]
 80022f0:	4b86      	ldr	r3, [pc, #536]	; (800250c <DsoDisplay+0x250>)
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d10d      	bne.n	8002312 <DsoDisplay+0x56>
 80022f6:	4b86      	ldr	r3, [pc, #536]	; (8002510 <DsoDisplay+0x254>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	061b      	lsls	r3, r3, #24
 80022fc:	0e1a      	lsrs	r2, r3, #24
 80022fe:	4b7f      	ldr	r3, [pc, #508]	; (80024fc <DsoDisplay+0x240>)
 8002300:	701a      	strb	r2, [r3, #0]
 8002302:	4b81      	ldr	r3, [pc, #516]	; (8002508 <DsoDisplay+0x24c>)
 8002304:	881b      	ldrh	r3, [r3, #0]
 8002306:	2201      	movs	r2, #1
 8002308:	4313      	orrs	r3, r2
 800230a:	041b      	lsls	r3, r3, #16
 800230c:	0c1a      	lsrs	r2, r3, #16
 800230e:	4b7e      	ldr	r3, [pc, #504]	; (8002508 <DsoDisplay+0x24c>)
 8002310:	801a      	strh	r2, [r3, #0]
 8002312:	4b80      	ldr	r3, [pc, #512]	; (8002514 <DsoDisplay+0x258>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d102      	bne.n	8002320 <DsoDisplay+0x64>
 800231a:	4b7b      	ldr	r3, [pc, #492]	; (8002508 <DsoDisplay+0x24c>)
 800231c:	2200      	movs	r2, #0
 800231e:	805a      	strh	r2, [r3, #2]
 8002320:	4b79      	ldr	r3, [pc, #484]	; (8002508 <DsoDisplay+0x24c>)
 8002322:	885b      	ldrh	r3, [r3, #2]
 8002324:	1c1a      	adds	r2, r3, #0
 8002326:	2308      	movs	r3, #8
 8002328:	4013      	ands	r3, r2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d009      	beq.n	8002342 <DsoDisplay+0x86>
 800232e:	4b76      	ldr	r3, [pc, #472]	; (8002508 <DsoDisplay+0x24c>)
 8002330:	885b      	ldrh	r3, [r3, #2]
 8002332:	2208      	movs	r2, #8
 8002334:	4393      	bics	r3, r2
 8002336:	041b      	lsls	r3, r3, #16
 8002338:	0c1a      	lsrs	r2, r3, #16
 800233a:	4b73      	ldr	r3, [pc, #460]	; (8002508 <DsoDisplay+0x24c>)
 800233c:	805a      	strh	r2, [r3, #2]
 800233e:	f002 fd0b 	bl	8004d58 <ClrScreen>
 8002342:	4b71      	ldr	r3, [pc, #452]	; (8002508 <DsoDisplay+0x24c>)
 8002344:	885b      	ldrh	r3, [r3, #2]
 8002346:	1c1a      	adds	r2, r3, #0
 8002348:	2301      	movs	r3, #1
 800234a:	4013      	ands	r3, r2
 800234c:	061b      	lsls	r3, r3, #24
 800234e:	0e1b      	lsrs	r3, r3, #24
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00b      	beq.n	800236c <DsoDisplay+0xb0>
 8002354:	4b6c      	ldr	r3, [pc, #432]	; (8002508 <DsoDisplay+0x24c>)
 8002356:	885b      	ldrh	r3, [r3, #2]
 8002358:	2201      	movs	r2, #1
 800235a:	4393      	bics	r3, r2
 800235c:	041b      	lsls	r3, r3, #16
 800235e:	0c1a      	lsrs	r2, r3, #16
 8002360:	4b69      	ldr	r3, [pc, #420]	; (8002508 <DsoDisplay+0x24c>)
 8002362:	805a      	strh	r2, [r3, #2]
 8002364:	f002 fcf8 	bl	8004d58 <ClrScreen>
 8002368:	f000 fbe0 	bl	8002b2c <Grid>
 800236c:	4b66      	ldr	r3, [pc, #408]	; (8002508 <DsoDisplay+0x24c>)
 800236e:	885b      	ldrh	r3, [r3, #2]
 8002370:	1c1a      	adds	r2, r3, #0
 8002372:	2302      	movs	r3, #2
 8002374:	4013      	ands	r3, r2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d100      	bne.n	800237c <DsoDisplay+0xc0>
 800237a:	e3a4      	b.n	8002ac6 <DsoDisplay+0x80a>
 800237c:	4b62      	ldr	r3, [pc, #392]	; (8002508 <DsoDisplay+0x24c>)
 800237e:	885b      	ldrh	r3, [r3, #2]
 8002380:	2202      	movs	r2, #2
 8002382:	4393      	bics	r3, r2
 8002384:	041b      	lsls	r3, r3, #16
 8002386:	0c1a      	lsrs	r2, r3, #16
 8002388:	4b5f      	ldr	r3, [pc, #380]	; (8002508 <DsoDisplay+0x24c>)
 800238a:	805a      	strh	r2, [r3, #2]
 800238c:	23a0      	movs	r3, #160	; 0xa0
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	2200      	movs	r2, #0
 8002392:	9200      	str	r2, [sp, #0]
 8002394:	2000      	movs	r0, #0
 8002396:	21da      	movs	r1, #218	; 0xda
 8002398:	1c1a      	adds	r2, r3, #0
 800239a:	2316      	movs	r3, #22
 800239c:	f002 fc9a 	bl	8004cd4 <FillRect>
 80023a0:	495d      	ldr	r1, [pc, #372]	; (8002518 <DsoDisplay+0x25c>)
 80023a2:	4b5b      	ldr	r3, [pc, #364]	; (8002510 <DsoDisplay+0x254>)
 80023a4:	791b      	ldrb	r3, [r3, #4]
 80023a6:	061b      	lsls	r3, r3, #24
 80023a8:	161a      	asrs	r2, r3, #24
 80023aa:	1c13      	adds	r3, r2, #0
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	189b      	adds	r3, r3, r2
 80023b0:	3b14      	subs	r3, #20
 80023b2:	18ca      	adds	r2, r1, r3
 80023b4:	4b59      	ldr	r3, [pc, #356]	; (800251c <DsoDisplay+0x260>)
 80023b6:	2100      	movs	r1, #0
 80023b8:	9100      	str	r1, [sp, #0]
 80023ba:	4959      	ldr	r1, [pc, #356]	; (8002520 <DsoDisplay+0x264>)
 80023bc:	9101      	str	r1, [sp, #4]
 80023be:	2010      	movs	r0, #16
 80023c0:	21e1      	movs	r1, #225	; 0xe1
 80023c2:	f002 fd43 	bl	8004e4c <PutsGenic>
 80023c6:	4a57      	ldr	r2, [pc, #348]	; (8002524 <DsoDisplay+0x268>)
 80023c8:	4b51      	ldr	r3, [pc, #324]	; (8002510 <DsoDisplay+0x254>)
 80023ca:	795b      	ldrb	r3, [r3, #5]
 80023cc:	061b      	lsls	r3, r3, #24
 80023ce:	161b      	asrs	r3, r3, #24
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	18d2      	adds	r2, r2, r3
 80023d4:	4b51      	ldr	r3, [pc, #324]	; (800251c <DsoDisplay+0x260>)
 80023d6:	2100      	movs	r1, #0
 80023d8:	9100      	str	r1, [sp, #0]
 80023da:	4951      	ldr	r1, [pc, #324]	; (8002520 <DsoDisplay+0x264>)
 80023dc:	9101      	str	r1, [sp, #4]
 80023de:	203c      	movs	r0, #60	; 0x3c
 80023e0:	21e1      	movs	r1, #225	; 0xe1
 80023e2:	f002 fd33 	bl	8004e4c <PutsGenic>
 80023e6:	4950      	ldr	r1, [pc, #320]	; (8002528 <DsoDisplay+0x26c>)
 80023e8:	4b49      	ldr	r3, [pc, #292]	; (8002510 <DsoDisplay+0x254>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	061b      	lsls	r3, r3, #24
 80023ee:	161b      	asrs	r3, r3, #24
 80023f0:	1e5a      	subs	r2, r3, #1
 80023f2:	1c13      	adds	r3, r2, #0
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	189b      	adds	r3, r3, r2
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	18ca      	adds	r2, r1, r3
 80023fc:	23fc      	movs	r3, #252	; 0xfc
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	2100      	movs	r1, #0
 8002402:	9100      	str	r1, [sp, #0]
 8002404:	4946      	ldr	r1, [pc, #280]	; (8002520 <DsoDisplay+0x264>)
 8002406:	9101      	str	r1, [sp, #4]
 8002408:	2073      	movs	r0, #115	; 0x73
 800240a:	21e1      	movs	r1, #225	; 0xe1
 800240c:	f002 fd1e 	bl	8004e4c <PutsGenic>
 8002410:	4946      	ldr	r1, [pc, #280]	; (800252c <DsoDisplay+0x270>)
 8002412:	4b3f      	ldr	r3, [pc, #252]	; (8002510 <DsoDisplay+0x254>)
 8002414:	7a9b      	ldrb	r3, [r3, #10]
 8002416:	061b      	lsls	r3, r3, #24
 8002418:	161a      	asrs	r2, r3, #24
 800241a:	1c13      	adds	r3, r2, #0
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	189b      	adds	r3, r3, r2
 8002420:	18ca      	adds	r2, r1, r3
 8002422:	4b43      	ldr	r3, [pc, #268]	; (8002530 <DsoDisplay+0x274>)
 8002424:	2100      	movs	r1, #0
 8002426:	9100      	str	r1, [sp, #0]
 8002428:	493d      	ldr	r1, [pc, #244]	; (8002520 <DsoDisplay+0x264>)
 800242a:	9101      	str	r1, [sp, #4]
 800242c:	20c3      	movs	r0, #195	; 0xc3
 800242e:	21e1      	movs	r1, #225	; 0xe1
 8002430:	f002 fd0c 	bl	8004e4c <PutsGenic>
 8002434:	4b36      	ldr	r3, [pc, #216]	; (8002510 <DsoDisplay+0x254>)
 8002436:	7adb      	ldrb	r3, [r3, #11]
 8002438:	061b      	lsls	r3, r3, #24
 800243a:	0e1a      	lsrs	r2, r3, #24
 800243c:	2382      	movs	r3, #130	; 0x82
 800243e:	0059      	lsls	r1, r3, #1
 8002440:	4b3b      	ldr	r3, [pc, #236]	; (8002530 <DsoDisplay+0x274>)
 8002442:	2000      	movs	r0, #0
 8002444:	9000      	str	r0, [sp, #0]
 8002446:	483b      	ldr	r0, [pc, #236]	; (8002534 <DsoDisplay+0x278>)
 8002448:	9001      	str	r0, [sp, #4]
 800244a:	1c08      	adds	r0, r1, #0
 800244c:	21e3      	movs	r1, #227	; 0xe3
 800244e:	f002 fc91 	bl	8004d74 <PutcGenic>
 8002452:	4b2d      	ldr	r3, [pc, #180]	; (8002508 <DsoDisplay+0x24c>)
 8002454:	791b      	ldrb	r3, [r3, #4]
 8002456:	2b02      	cmp	r3, #2
 8002458:	d831      	bhi.n	80024be <DsoDisplay+0x202>
 800245a:	1c3b      	adds	r3, r7, #0
 800245c:	330f      	adds	r3, #15
 800245e:	4a2a      	ldr	r2, [pc, #168]	; (8002508 <DsoDisplay+0x24c>)
 8002460:	7912      	ldrb	r2, [r2, #4]
 8002462:	701a      	strb	r2, [r3, #0]
 8002464:	1c3b      	adds	r3, r7, #0
 8002466:	330f      	adds	r3, #15
 8002468:	781a      	ldrb	r2, [r3, #0]
 800246a:	4b33      	ldr	r3, [pc, #204]	; (8002538 <DsoDisplay+0x27c>)
 800246c:	00d2      	lsls	r2, r2, #3
 800246e:	5ad0      	ldrh	r0, [r2, r3]
 8002470:	1c3b      	adds	r3, r7, #0
 8002472:	330f      	adds	r3, #15
 8002474:	781a      	ldrb	r2, [r3, #0]
 8002476:	4930      	ldr	r1, [pc, #192]	; (8002538 <DsoDisplay+0x27c>)
 8002478:	2302      	movs	r3, #2
 800247a:	00d2      	lsls	r2, r2, #3
 800247c:	188a      	adds	r2, r1, r2
 800247e:	18d3      	adds	r3, r2, r3
 8002480:	8819      	ldrh	r1, [r3, #0]
 8002482:	1c3b      	adds	r3, r7, #0
 8002484:	330f      	adds	r3, #15
 8002486:	781a      	ldrb	r2, [r3, #0]
 8002488:	4c2b      	ldr	r4, [pc, #172]	; (8002538 <DsoDisplay+0x27c>)
 800248a:	2304      	movs	r3, #4
 800248c:	00d2      	lsls	r2, r2, #3
 800248e:	18a2      	adds	r2, r4, r2
 8002490:	18d3      	adds	r3, r2, r3
 8002492:	881a      	ldrh	r2, [r3, #0]
 8002494:	1c3b      	adds	r3, r7, #0
 8002496:	330f      	adds	r3, #15
 8002498:	781c      	ldrb	r4, [r3, #0]
 800249a:	4d27      	ldr	r5, [pc, #156]	; (8002538 <DsoDisplay+0x27c>)
 800249c:	2306      	movs	r3, #6
 800249e:	00e4      	lsls	r4, r4, #3
 80024a0:	192c      	adds	r4, r5, r4
 80024a2:	18e3      	adds	r3, r4, r3
 80024a4:	881b      	ldrh	r3, [r3, #0]
 80024a6:	0400      	lsls	r0, r0, #16
 80024a8:	1400      	asrs	r0, r0, #16
 80024aa:	0409      	lsls	r1, r1, #16
 80024ac:	1409      	asrs	r1, r1, #16
 80024ae:	0412      	lsls	r2, r2, #16
 80024b0:	1412      	asrs	r2, r2, #16
 80024b2:	041b      	lsls	r3, r3, #16
 80024b4:	141b      	asrs	r3, r3, #16
 80024b6:	4c21      	ldr	r4, [pc, #132]	; (800253c <DsoDisplay+0x280>)
 80024b8:	9400      	str	r4, [sp, #0]
 80024ba:	f7fd ff5d 	bl	8000378 <DrawRect>
 80024be:	4b20      	ldr	r3, [pc, #128]	; (8002540 <DsoDisplay+0x284>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	9200      	str	r2, [sp, #0]
 80024c4:	4a16      	ldr	r2, [pc, #88]	; (8002520 <DsoDisplay+0x264>)
 80024c6:	9201      	str	r2, [sp, #4]
 80024c8:	200e      	movs	r0, #14
 80024ca:	2100      	movs	r1, #0
 80024cc:	1c1a      	adds	r2, r3, #0
 80024ce:	2300      	movs	r3, #0
 80024d0:	f002 fcbc 	bl	8004e4c <PutsGenic>
 80024d4:	4b0c      	ldr	r3, [pc, #48]	; (8002508 <DsoDisplay+0x24c>)
 80024d6:	881b      	ldrh	r3, [r3, #0]
 80024d8:	1c1a      	adds	r2, r3, #0
 80024da:	2304      	movs	r3, #4
 80024dc:	4013      	ands	r3, r2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d032      	beq.n	8002548 <DsoDisplay+0x28c>
 80024e2:	4b18      	ldr	r3, [pc, #96]	; (8002544 <DsoDisplay+0x288>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	9200      	str	r2, [sp, #0]
 80024e8:	4a0d      	ldr	r2, [pc, #52]	; (8002520 <DsoDisplay+0x264>)
 80024ea:	9201      	str	r2, [sp, #4]
 80024ec:	200e      	movs	r0, #14
 80024ee:	2100      	movs	r1, #0
 80024f0:	1c1a      	adds	r2, r3, #0
 80024f2:	231f      	movs	r3, #31
 80024f4:	f002 fcaa 	bl	8004e4c <PutsGenic>
 80024f8:	e031      	b.n	800255e <DsoDisplay+0x2a2>
 80024fa:	46c0      	nop			; (mov r8, r8)
 80024fc:	20000187 	.word	0x20000187
 8002500:	e000e010 	.word	0xe000e010
 8002504:	200025b8 	.word	0x200025b8
 8002508:	2000233c 	.word	0x2000233c
 800250c:	000005dc 	.word	0x000005dc
 8002510:	200009c8 	.word	0x200009c8
 8002514:	20000186 	.word	0x20000186
 8002518:	08006e70 	.word	0x08006e70
 800251c:	000007ff 	.word	0x000007ff
 8002520:	20000138 	.word	0x20000138
 8002524:	08006ec4 	.word	0x08006ec4
 8002528:	08006ed0 	.word	0x08006ed0
 800252c:	08006f68 	.word	0x08006f68
 8002530:	0000b35f 	.word	0x0000b35f
 8002534:	200000b4 	.word	0x200000b4
 8002538:	200000c0 	.word	0x200000c0
 800253c:	0000ffe0 	.word	0x0000ffe0
 8002540:	08006f78 	.word	0x08006f78
 8002544:	08006f84 	.word	0x08006f84
 8002548:	4ad1      	ldr	r2, [pc, #836]	; (8002890 <DsoDisplay+0x5d4>)
 800254a:	23fc      	movs	r3, #252	; 0xfc
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	2100      	movs	r1, #0
 8002550:	9100      	str	r1, [sp, #0]
 8002552:	49d0      	ldr	r1, [pc, #832]	; (8002894 <DsoDisplay+0x5d8>)
 8002554:	9101      	str	r1, [sp, #4]
 8002556:	200e      	movs	r0, #14
 8002558:	2100      	movs	r1, #0
 800255a:	f002 fc77 	bl	8004e4c <PutsGenic>
 800255e:	4bce      	ldr	r3, [pc, #824]	; (8002898 <DsoDisplay+0x5dc>)
 8002560:	881a      	ldrh	r2, [r3, #0]
 8002562:	4bce      	ldr	r3, [pc, #824]	; (800289c <DsoDisplay+0x5e0>)
 8002564:	429a      	cmp	r2, r3
 8002566:	d058      	beq.n	800261a <DsoDisplay+0x35e>
 8002568:	4bcd      	ldr	r3, [pc, #820]	; (80028a0 <DsoDisplay+0x5e4>)
 800256a:	881b      	ldrh	r3, [r3, #0]
 800256c:	3301      	adds	r3, #1
 800256e:	041b      	lsls	r3, r3, #16
 8002570:	0c1a      	lsrs	r2, r3, #16
 8002572:	4bcb      	ldr	r3, [pc, #812]	; (80028a0 <DsoDisplay+0x5e4>)
 8002574:	801a      	strh	r2, [r3, #0]
 8002576:	4bca      	ldr	r3, [pc, #808]	; (80028a0 <DsoDisplay+0x5e4>)
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	2b46      	cmp	r3, #70	; 0x46
 800257c:	d14d      	bne.n	800261a <DsoDisplay+0x35e>
 800257e:	1c3b      	adds	r3, r7, #0
 8002580:	330c      	adds	r3, #12
 8002582:	2200      	movs	r2, #0
 8002584:	801a      	strh	r2, [r3, #0]
 8002586:	1c3b      	adds	r3, r7, #0
 8002588:	330c      	adds	r3, #12
 800258a:	881a      	ldrh	r2, [r3, #0]
 800258c:	23a0      	movs	r3, #160	; 0xa0
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	9200      	str	r2, [sp, #0]
 8002592:	2000      	movs	r0, #0
 8002594:	2100      	movs	r1, #0
 8002596:	1c1a      	adds	r2, r3, #0
 8002598:	23f0      	movs	r3, #240	; 0xf0
 800259a:	f002 fb9b 	bl	8004cd4 <FillRect>
 800259e:	1c3b      	adds	r3, r7, #0
 80025a0:	330c      	adds	r3, #12
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	4bbf      	ldr	r3, [pc, #764]	; (80028a4 <DsoDisplay+0x5e8>)
 80025a8:	9301      	str	r3, [sp, #4]
 80025aa:	2014      	movs	r0, #20
 80025ac:	2150      	movs	r1, #80	; 0x50
 80025ae:	2200      	movs	r2, #0
 80025b0:	231f      	movs	r3, #31
 80025b2:	f002 fbdf 	bl	8004d74 <PutcGenic>
 80025b6:	1c3b      	adds	r3, r7, #0
 80025b8:	330c      	adds	r3, #12
 80025ba:	881a      	ldrh	r2, [r3, #0]
 80025bc:	4bba      	ldr	r3, [pc, #744]	; (80028a8 <DsoDisplay+0x5ec>)
 80025be:	9200      	str	r2, [sp, #0]
 80025c0:	4aba      	ldr	r2, [pc, #744]	; (80028ac <DsoDisplay+0x5f0>)
 80025c2:	9201      	str	r2, [sp, #4]
 80025c4:	2018      	movs	r0, #24
 80025c6:	2173      	movs	r1, #115	; 0x73
 80025c8:	2200      	movs	r2, #0
 80025ca:	f002 fbd3 	bl	8004d74 <PutcGenic>
 80025ce:	1c3b      	adds	r3, r7, #0
 80025d0:	330c      	adds	r3, #12
 80025d2:	881a      	ldrh	r2, [r3, #0]
 80025d4:	4bb4      	ldr	r3, [pc, #720]	; (80028a8 <DsoDisplay+0x5ec>)
 80025d6:	9200      	str	r2, [sp, #0]
 80025d8:	4ab5      	ldr	r2, [pc, #724]	; (80028b0 <DsoDisplay+0x5f4>)
 80025da:	9201      	str	r2, [sp, #4]
 80025dc:	2014      	movs	r0, #20
 80025de:	21b4      	movs	r1, #180	; 0xb4
 80025e0:	2200      	movs	r2, #0
 80025e2:	f002 fbc7 	bl	8004d74 <PutcGenic>
 80025e6:	1c3b      	adds	r3, r7, #0
 80025e8:	330c      	adds	r3, #12
 80025ea:	881a      	ldrh	r2, [r3, #0]
 80025ec:	4bae      	ldr	r3, [pc, #696]	; (80028a8 <DsoDisplay+0x5ec>)
 80025ee:	9200      	str	r2, [sp, #0]
 80025f0:	4ab0      	ldr	r2, [pc, #704]	; (80028b4 <DsoDisplay+0x5f8>)
 80025f2:	9201      	str	r2, [sp, #4]
 80025f4:	205a      	movs	r0, #90	; 0x5a
 80025f6:	21b2      	movs	r1, #178	; 0xb2
 80025f8:	2200      	movs	r2, #0
 80025fa:	f002 fbbb 	bl	8004d74 <PutcGenic>
 80025fe:	1c3b      	adds	r3, r7, #0
 8002600:	330c      	adds	r3, #12
 8002602:	881a      	ldrh	r2, [r3, #0]
 8002604:	4ba8      	ldr	r3, [pc, #672]	; (80028a8 <DsoDisplay+0x5ec>)
 8002606:	9200      	str	r2, [sp, #0]
 8002608:	4aab      	ldr	r2, [pc, #684]	; (80028b8 <DsoDisplay+0x5fc>)
 800260a:	9201      	str	r2, [sp, #4]
 800260c:	205a      	movs	r0, #90	; 0x5a
 800260e:	21c8      	movs	r1, #200	; 0xc8
 8002610:	2200      	movs	r2, #0
 8002612:	f002 fbaf 	bl	8004d74 <PutcGenic>
 8002616:	f000 feaf 	bl	8003378 <DeadLoop>
 800261a:	4ba8      	ldr	r3, [pc, #672]	; (80028bc <DsoDisplay+0x600>)
 800261c:	891b      	ldrh	r3, [r3, #8]
 800261e:	041b      	lsls	r3, r3, #16
 8002620:	0c1b      	lsrs	r3, r3, #16
 8002622:	3b03      	subs	r3, #3
 8002624:	041b      	lsls	r3, r3, #16
 8002626:	0c1b      	lsrs	r3, r3, #16
 8002628:	2200      	movs	r2, #0
 800262a:	9200      	str	r2, [sp, #0]
 800262c:	4aa4      	ldr	r2, [pc, #656]	; (80028c0 <DsoDisplay+0x604>)
 800262e:	9201      	str	r2, [sp, #4]
 8002630:	2002      	movs	r0, #2
 8002632:	1c19      	adds	r1, r3, #0
 8002634:	2201      	movs	r2, #1
 8002636:	2300      	movs	r3, #0
 8002638:	f002 fb9c 	bl	8004d74 <PutcGenic>
 800263c:	4ba1      	ldr	r3, [pc, #644]	; (80028c4 <DsoDisplay+0x608>)
 800263e:	88db      	ldrh	r3, [r3, #6]
 8002640:	041b      	lsls	r3, r3, #16
 8002642:	0c1a      	lsrs	r2, r3, #16
 8002644:	4b9f      	ldr	r3, [pc, #636]	; (80028c4 <DsoDisplay+0x608>)
 8002646:	891b      	ldrh	r3, [r3, #8]
 8002648:	041b      	lsls	r3, r3, #16
 800264a:	0c1b      	lsrs	r3, r3, #16
 800264c:	18d3      	adds	r3, r2, r3
 800264e:	041b      	lsls	r3, r3, #16
 8002650:	0c1b      	lsrs	r3, r3, #16
 8002652:	2275      	movs	r2, #117	; 0x75
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	041b      	lsls	r3, r3, #16
 8002658:	0c1a      	lsrs	r2, r3, #16
 800265a:	1c3b      	adds	r3, r7, #0
 800265c:	330c      	adds	r3, #12
 800265e:	801a      	strh	r2, [r3, #0]
 8002660:	1c3b      	adds	r3, r7, #0
 8002662:	330c      	adds	r3, #12
 8002664:	2200      	movs	r2, #0
 8002666:	5e9b      	ldrsh	r3, [r3, r2]
 8002668:	2b10      	cmp	r3, #16
 800266a:	dc03      	bgt.n	8002674 <DsoDisplay+0x3b8>
 800266c:	1c3b      	adds	r3, r7, #0
 800266e:	330c      	adds	r3, #12
 8002670:	2211      	movs	r2, #17
 8002672:	801a      	strh	r2, [r3, #0]
 8002674:	1c3b      	adds	r3, r7, #0
 8002676:	330c      	adds	r3, #12
 8002678:	2200      	movs	r2, #0
 800267a:	5e9b      	ldrsh	r3, [r3, r2]
 800267c:	2bd9      	cmp	r3, #217	; 0xd9
 800267e:	dd03      	ble.n	8002688 <DsoDisplay+0x3cc>
 8002680:	1c3b      	adds	r3, r7, #0
 8002682:	330c      	adds	r3, #12
 8002684:	22d9      	movs	r2, #217	; 0xd9
 8002686:	801a      	strh	r2, [r3, #0]
 8002688:	4b8c      	ldr	r3, [pc, #560]	; (80028bc <DsoDisplay+0x600>)
 800268a:	791b      	ldrb	r3, [r3, #4]
 800268c:	2b05      	cmp	r3, #5
 800268e:	d101      	bne.n	8002694 <DsoDisplay+0x3d8>
 8002690:	4b85      	ldr	r3, [pc, #532]	; (80028a8 <DsoDisplay+0x5ec>)
 8002692:	e000      	b.n	8002696 <DsoDisplay+0x3da>
 8002694:	4b8c      	ldr	r3, [pc, #560]	; (80028c8 <DsoDisplay+0x60c>)
 8002696:	1c3a      	adds	r2, r7, #0
 8002698:	320a      	adds	r2, #10
 800269a:	8013      	strh	r3, [r2, #0]
 800269c:	1c3b      	adds	r3, r7, #0
 800269e:	330c      	adds	r3, #12
 80026a0:	881b      	ldrh	r3, [r3, #0]
 80026a2:	3b03      	subs	r3, #3
 80026a4:	041b      	lsls	r3, r3, #16
 80026a6:	0c1a      	lsrs	r2, r3, #16
 80026a8:	1c3b      	adds	r3, r7, #0
 80026aa:	330a      	adds	r3, #10
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	2100      	movs	r1, #0
 80026b0:	9100      	str	r1, [sp, #0]
 80026b2:	4983      	ldr	r1, [pc, #524]	; (80028c0 <DsoDisplay+0x604>)
 80026b4:	9101      	str	r1, [sp, #4]
 80026b6:	2002      	movs	r0, #2
 80026b8:	1c11      	adds	r1, r2, #0
 80026ba:	2201      	movs	r2, #1
 80026bc:	f002 fb5a 	bl	8004d74 <PutcGenic>
 80026c0:	4b7e      	ldr	r3, [pc, #504]	; (80028bc <DsoDisplay+0x600>)
 80026c2:	1c3a      	adds	r2, r7, #0
 80026c4:	320c      	adds	r2, #12
 80026c6:	8812      	ldrh	r2, [r2, #0]
 80026c8:	811a      	strh	r2, [r3, #8]
 80026ca:	4b7c      	ldr	r3, [pc, #496]	; (80028bc <DsoDisplay+0x600>)
 80026cc:	88da      	ldrh	r2, [r3, #6]
 80026ce:	4b7b      	ldr	r3, [pc, #492]	; (80028bc <DsoDisplay+0x600>)
 80026d0:	795b      	ldrb	r3, [r3, #5]
 80026d2:	0412      	lsls	r2, r2, #16
 80026d4:	1412      	asrs	r2, r2, #16
 80026d6:	041b      	lsls	r3, r3, #16
 80026d8:	141b      	asrs	r3, r3, #16
 80026da:	2100      	movs	r1, #0
 80026dc:	9100      	str	r1, [sp, #0]
 80026de:	1c10      	adds	r0, r2, #0
 80026e0:	2108      	movs	r1, #8
 80026e2:	1c1a      	adds	r2, r3, #0
 80026e4:	2305      	movs	r3, #5
 80026e6:	f002 faf5 	bl	8004cd4 <FillRect>
 80026ea:	23fc      	movs	r3, #252	; 0xfc
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	206b      	movs	r0, #107	; 0x6b
 80026f2:	2106      	movs	r1, #6
 80026f4:	2201      	movs	r2, #1
 80026f6:	2308      	movs	r3, #8
 80026f8:	f002 faec 	bl	8004cd4 <FillRect>
 80026fc:	23fc      	movs	r3, #252	; 0xfc
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	206b      	movs	r0, #107	; 0x6b
 8002704:	2106      	movs	r1, #6
 8002706:	2204      	movs	r2, #4
 8002708:	2301      	movs	r3, #1
 800270a:	f002 fae3 	bl	8004cd4 <FillRect>
 800270e:	23fc      	movs	r3, #252	; 0xfc
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	206b      	movs	r0, #107	; 0x6b
 8002716:	210e      	movs	r1, #14
 8002718:	2204      	movs	r2, #4
 800271a:	2301      	movs	r3, #1
 800271c:	f002 fada 	bl	8004cd4 <FillRect>
 8002720:	23fc      	movs	r3, #252	; 0xfc
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	20d5      	movs	r0, #213	; 0xd5
 8002728:	2106      	movs	r1, #6
 800272a:	2201      	movs	r2, #1
 800272c:	2308      	movs	r3, #8
 800272e:	f002 fad1 	bl	8004cd4 <FillRect>
 8002732:	23fc      	movs	r3, #252	; 0xfc
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	20d2      	movs	r0, #210	; 0xd2
 800273a:	2106      	movs	r1, #6
 800273c:	2204      	movs	r2, #4
 800273e:	2301      	movs	r3, #1
 8002740:	f002 fac8 	bl	8004cd4 <FillRect>
 8002744:	23fc      	movs	r3, #252	; 0xfc
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	20d2      	movs	r0, #210	; 0xd2
 800274c:	210e      	movs	r1, #14
 800274e:	2204      	movs	r2, #4
 8002750:	2301      	movs	r3, #1
 8002752:	f002 fabf 	bl	8004cd4 <FillRect>
 8002756:	23fc      	movs	r3, #252	; 0xfc
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	206e      	movs	r0, #110	; 0x6e
 800275e:	210a      	movs	r1, #10
 8002760:	2265      	movs	r2, #101	; 0x65
 8002762:	2301      	movs	r3, #1
 8002764:	f002 fab6 	bl	8004cd4 <FillRect>
 8002768:	4b56      	ldr	r3, [pc, #344]	; (80028c4 <DsoDisplay+0x608>)
 800276a:	885b      	ldrh	r3, [r3, #2]
 800276c:	041b      	lsls	r3, r3, #16
 800276e:	141b      	asrs	r3, r3, #16
 8002770:	2265      	movs	r2, #101	; 0x65
 8002772:	4353      	muls	r3, r2
 8002774:	1c1a      	adds	r2, r3, #0
 8002776:	4b53      	ldr	r3, [pc, #332]	; (80028c4 <DsoDisplay+0x608>)
 8002778:	8a1b      	ldrh	r3, [r3, #16]
 800277a:	1c10      	adds	r0, r2, #0
 800277c:	1c19      	adds	r1, r3, #0
 800277e:	f000 fdff 	bl	8003380 <__udivsi3>
 8002782:	1c03      	adds	r3, r0, #0
 8002784:	061b      	lsls	r3, r3, #24
 8002786:	0e1a      	lsrs	r2, r3, #24
 8002788:	1c3b      	adds	r3, r7, #0
 800278a:	330f      	adds	r3, #15
 800278c:	326e      	adds	r2, #110	; 0x6e
 800278e:	701a      	strb	r2, [r3, #0]
 8002790:	4b4c      	ldr	r3, [pc, #304]	; (80028c4 <DsoDisplay+0x608>)
 8002792:	8a1b      	ldrh	r3, [r3, #16]
 8002794:	484d      	ldr	r0, [pc, #308]	; (80028cc <DsoDisplay+0x610>)
 8002796:	1c19      	adds	r1, r3, #0
 8002798:	f000 fdf2 	bl	8003380 <__udivsi3>
 800279c:	1c03      	adds	r3, r0, #0
 800279e:	041b      	lsls	r3, r3, #16
 80027a0:	0c1a      	lsrs	r2, r3, #16
 80027a2:	1c3b      	adds	r3, r7, #0
 80027a4:	330e      	adds	r3, #14
 80027a6:	701a      	strb	r2, [r3, #0]
 80027a8:	4b44      	ldr	r3, [pc, #272]	; (80028bc <DsoDisplay+0x600>)
 80027aa:	791b      	ldrb	r3, [r3, #4]
 80027ac:	2b04      	cmp	r3, #4
 80027ae:	d101      	bne.n	80027b4 <DsoDisplay+0x4f8>
 80027b0:	4b3d      	ldr	r3, [pc, #244]	; (80028a8 <DsoDisplay+0x5ec>)
 80027b2:	e001      	b.n	80027b8 <DsoDisplay+0x4fc>
 80027b4:	23fc      	movs	r3, #252	; 0xfc
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	1c3a      	adds	r2, r7, #0
 80027ba:	320a      	adds	r2, #10
 80027bc:	8013      	strh	r3, [r2, #0]
 80027be:	1c3b      	adds	r3, r7, #0
 80027c0:	330f      	adds	r3, #15
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	041b      	lsls	r3, r3, #16
 80027c6:	0c1a      	lsrs	r2, r3, #16
 80027c8:	1c3b      	adds	r3, r7, #0
 80027ca:	330e      	adds	r3, #14
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	041b      	lsls	r3, r3, #16
 80027d0:	0c1b      	lsrs	r3, r3, #16
 80027d2:	0412      	lsls	r2, r2, #16
 80027d4:	1412      	asrs	r2, r2, #16
 80027d6:	041b      	lsls	r3, r3, #16
 80027d8:	141b      	asrs	r3, r3, #16
 80027da:	1c39      	adds	r1, r7, #0
 80027dc:	310a      	adds	r1, #10
 80027de:	8809      	ldrh	r1, [r1, #0]
 80027e0:	9100      	str	r1, [sp, #0]
 80027e2:	1c10      	adds	r0, r2, #0
 80027e4:	2108      	movs	r1, #8
 80027e6:	1c1a      	adds	r2, r3, #0
 80027e8:	2305      	movs	r3, #5
 80027ea:	f002 fa73 	bl	8004cd4 <FillRect>
 80027ee:	1c3b      	adds	r3, r7, #0
 80027f0:	330f      	adds	r3, #15
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	041b      	lsls	r3, r3, #16
 80027f6:	0c1a      	lsrs	r2, r3, #16
 80027f8:	4b30      	ldr	r3, [pc, #192]	; (80028bc <DsoDisplay+0x600>)
 80027fa:	80da      	strh	r2, [r3, #6]
 80027fc:	4b2f      	ldr	r3, [pc, #188]	; (80028bc <DsoDisplay+0x600>)
 80027fe:	1c3a      	adds	r2, r7, #0
 8002800:	320e      	adds	r2, #14
 8002802:	7812      	ldrb	r2, [r2, #0]
 8002804:	715a      	strb	r2, [r3, #5]
 8002806:	4b2d      	ldr	r3, [pc, #180]	; (80028bc <DsoDisplay+0x600>)
 8002808:	895b      	ldrh	r3, [r3, #10]
 800280a:	041b      	lsls	r3, r3, #16
 800280c:	0c1b      	lsrs	r3, r3, #16
 800280e:	3b03      	subs	r3, #3
 8002810:	041b      	lsls	r3, r3, #16
 8002812:	0c1b      	lsrs	r3, r3, #16
 8002814:	4a2e      	ldr	r2, [pc, #184]	; (80028d0 <DsoDisplay+0x614>)
 8002816:	2100      	movs	r1, #0
 8002818:	9100      	str	r1, [sp, #0]
 800281a:	4929      	ldr	r1, [pc, #164]	; (80028c0 <DsoDisplay+0x604>)
 800281c:	9101      	str	r1, [sp, #4]
 800281e:	1c10      	adds	r0, r2, #0
 8002820:	1c19      	adds	r1, r3, #0
 8002822:	2202      	movs	r2, #2
 8002824:	2300      	movs	r3, #0
 8002826:	f002 faa5 	bl	8004d74 <PutcGenic>
 800282a:	4b26      	ldr	r3, [pc, #152]	; (80028c4 <DsoDisplay+0x608>)
 800282c:	899b      	ldrh	r3, [r3, #12]
 800282e:	041b      	lsls	r3, r3, #16
 8002830:	0c1a      	lsrs	r2, r3, #16
 8002832:	4b24      	ldr	r3, [pc, #144]	; (80028c4 <DsoDisplay+0x608>)
 8002834:	88db      	ldrh	r3, [r3, #6]
 8002836:	041b      	lsls	r3, r3, #16
 8002838:	0c1b      	lsrs	r3, r3, #16
 800283a:	18d3      	adds	r3, r2, r3
 800283c:	041b      	lsls	r3, r3, #16
 800283e:	0c1a      	lsrs	r2, r3, #16
 8002840:	4b20      	ldr	r3, [pc, #128]	; (80028c4 <DsoDisplay+0x608>)
 8002842:	891b      	ldrh	r3, [r3, #8]
 8002844:	041b      	lsls	r3, r3, #16
 8002846:	0c1b      	lsrs	r3, r3, #16
 8002848:	18d3      	adds	r3, r2, r3
 800284a:	041b      	lsls	r3, r3, #16
 800284c:	0c1b      	lsrs	r3, r3, #16
 800284e:	2275      	movs	r2, #117	; 0x75
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	041b      	lsls	r3, r3, #16
 8002854:	0c1a      	lsrs	r2, r3, #16
 8002856:	1c3b      	adds	r3, r7, #0
 8002858:	330c      	adds	r3, #12
 800285a:	801a      	strh	r2, [r3, #0]
 800285c:	1c3b      	adds	r3, r7, #0
 800285e:	330c      	adds	r3, #12
 8002860:	2200      	movs	r2, #0
 8002862:	5e9b      	ldrsh	r3, [r3, r2]
 8002864:	2b10      	cmp	r3, #16
 8002866:	dc03      	bgt.n	8002870 <DsoDisplay+0x5b4>
 8002868:	1c3b      	adds	r3, r7, #0
 800286a:	330c      	adds	r3, #12
 800286c:	2211      	movs	r2, #17
 800286e:	801a      	strh	r2, [r3, #0]
 8002870:	1c3b      	adds	r3, r7, #0
 8002872:	330c      	adds	r3, #12
 8002874:	2200      	movs	r2, #0
 8002876:	5e9b      	ldrsh	r3, [r3, r2]
 8002878:	2bd9      	cmp	r3, #217	; 0xd9
 800287a:	dd03      	ble.n	8002884 <DsoDisplay+0x5c8>
 800287c:	1c3b      	adds	r3, r7, #0
 800287e:	330c      	adds	r3, #12
 8002880:	22d9      	movs	r2, #217	; 0xd9
 8002882:	801a      	strh	r2, [r3, #0]
 8002884:	4b0d      	ldr	r3, [pc, #52]	; (80028bc <DsoDisplay+0x600>)
 8002886:	791b      	ldrb	r3, [r3, #4]
 8002888:	2b03      	cmp	r3, #3
 800288a:	d123      	bne.n	80028d4 <DsoDisplay+0x618>
 800288c:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <DsoDisplay+0x5ec>)
 800288e:	e022      	b.n	80028d6 <DsoDisplay+0x61a>
 8002890:	08006f8c 	.word	0x08006f8c
 8002894:	20000138 	.word	0x20000138
 8002898:	20000182 	.word	0x20000182
 800289c:	0000ec4a 	.word	0x0000ec4a
 80028a0:	20000184 	.word	0x20000184
 80028a4:	20000040 	.word	0x20000040
 80028a8:	0000ffe0 	.word	0x0000ffe0
 80028ac:	20000034 	.word	0x20000034
 80028b0:	20000010 	.word	0x20000010
 80028b4:	2000001c 	.word	0x2000001c
 80028b8:	20000028 	.word	0x20000028
 80028bc:	2000233c 	.word	0x2000233c
 80028c0:	20000094 	.word	0x20000094
 80028c4:	200009c8 	.word	0x200009c8
 80028c8:	000007ff 	.word	0x000007ff
 80028cc:	0000765c 	.word	0x0000765c
 80028d0:	00000137 	.word	0x00000137
 80028d4:	4b8a      	ldr	r3, [pc, #552]	; (8002b00 <DsoDisplay+0x844>)
 80028d6:	1c3a      	adds	r2, r7, #0
 80028d8:	320a      	adds	r2, #10
 80028da:	8013      	strh	r3, [r2, #0]
 80028dc:	1c3b      	adds	r3, r7, #0
 80028de:	330c      	adds	r3, #12
 80028e0:	881b      	ldrh	r3, [r3, #0]
 80028e2:	3b03      	subs	r3, #3
 80028e4:	041b      	lsls	r3, r3, #16
 80028e6:	0c1a      	lsrs	r2, r3, #16
 80028e8:	4986      	ldr	r1, [pc, #536]	; (8002b04 <DsoDisplay+0x848>)
 80028ea:	1c3b      	adds	r3, r7, #0
 80028ec:	330a      	adds	r3, #10
 80028ee:	881b      	ldrh	r3, [r3, #0]
 80028f0:	2000      	movs	r0, #0
 80028f2:	9000      	str	r0, [sp, #0]
 80028f4:	4884      	ldr	r0, [pc, #528]	; (8002b08 <DsoDisplay+0x84c>)
 80028f6:	9001      	str	r0, [sp, #4]
 80028f8:	1c08      	adds	r0, r1, #0
 80028fa:	1c11      	adds	r1, r2, #0
 80028fc:	2202      	movs	r2, #2
 80028fe:	f002 fa39 	bl	8004d74 <PutcGenic>
 8002902:	4b82      	ldr	r3, [pc, #520]	; (8002b0c <DsoDisplay+0x850>)
 8002904:	1c3a      	adds	r2, r7, #0
 8002906:	320c      	adds	r2, #12
 8002908:	8812      	ldrh	r2, [r2, #0]
 800290a:	815a      	strh	r2, [r3, #10]
 800290c:	4b80      	ldr	r3, [pc, #512]	; (8002b10 <DsoDisplay+0x854>)
 800290e:	899b      	ldrh	r3, [r3, #12]
 8002910:	041b      	lsls	r3, r3, #16
 8002912:	141b      	asrs	r3, r3, #16
 8002914:	1c18      	adds	r0, r3, #0
 8002916:	f001 fa47 	bl	8003da8 <__aeabi_i2f>
 800291a:	1c03      	adds	r3, r0, #0
 800291c:	1c18      	adds	r0, r3, #0
 800291e:	f000 fea7 	bl	8003670 <__aeabi_f2d>
 8002922:	1c03      	adds	r3, r0, #0
 8002924:	1c0c      	adds	r4, r1, #0
 8002926:	1c18      	adds	r0, r3, #0
 8002928:	1c21      	adds	r1, r4, #0
 800292a:	4b74      	ldr	r3, [pc, #464]	; (8002afc <DsoDisplay+0x840>)
 800292c:	4a72      	ldr	r2, [pc, #456]	; (8002af8 <DsoDisplay+0x83c>)
 800292e:	f000 fef7 	bl	8003720 <__aeabi_dmul>
 8002932:	1c03      	adds	r3, r0, #0
 8002934:	1c0c      	adds	r4, r1, #0
 8002936:	1c1d      	adds	r5, r3, #0
 8002938:	1c26      	adds	r6, r4, #0
 800293a:	4b75      	ldr	r3, [pc, #468]	; (8002b10 <DsoDisplay+0x854>)
 800293c:	791b      	ldrb	r3, [r3, #4]
 800293e:	061b      	lsls	r3, r3, #24
 8002940:	161b      	asrs	r3, r3, #24
 8002942:	1f1a      	subs	r2, r3, #4
 8002944:	4b73      	ldr	r3, [pc, #460]	; (8002b14 <DsoDisplay+0x858>)
 8002946:	0092      	lsls	r2, r2, #2
 8002948:	58d3      	ldr	r3, [r2, r3]
 800294a:	1c18      	adds	r0, r3, #0
 800294c:	f000 fe90 	bl	8003670 <__aeabi_f2d>
 8002950:	1c03      	adds	r3, r0, #0
 8002952:	1c0c      	adds	r4, r1, #0
 8002954:	1c28      	adds	r0, r5, #0
 8002956:	1c31      	adds	r1, r6, #0
 8002958:	1c1a      	adds	r2, r3, #0
 800295a:	1c23      	adds	r3, r4, #0
 800295c:	f000 fee0 	bl	8003720 <__aeabi_dmul>
 8002960:	1c03      	adds	r3, r0, #0
 8002962:	1c0c      	adds	r4, r1, #0
 8002964:	1c18      	adds	r0, r3, #0
 8002966:	1c21      	adds	r1, r4, #0
 8002968:	f001 f914 	bl	8003b94 <__aeabi_d2f>
 800296c:	1c03      	adds	r3, r0, #0
 800296e:	607b      	str	r3, [r7, #4]
 8002970:	2301      	movs	r3, #1
 8002972:	1c1c      	adds	r4, r3, #0
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	4968      	ldr	r1, [pc, #416]	; (8002b18 <DsoDisplay+0x85c>)
 8002978:	f001 facc 	bl	8003f14 <__aeabi_fcmpge>
 800297c:	1c03      	adds	r3, r0, #0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <DsoDisplay+0x6ca>
 8002982:	2300      	movs	r3, #0
 8002984:	1c1c      	adds	r4, r3, #0
 8002986:	0623      	lsls	r3, r4, #24
 8002988:	0e1b      	lsrs	r3, r3, #24
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00b      	beq.n	80029a6 <DsoDisplay+0x6ea>
 800298e:	1c3b      	adds	r3, r7, #0
 8002990:	330f      	adds	r3, #15
 8002992:	2220      	movs	r2, #32
 8002994:	701a      	strb	r2, [r3, #0]
 8002996:	1c3c      	adds	r4, r7, #0
 8002998:	340a      	adds	r4, #10
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f001 face 	bl	8003f3c <__aeabi_f2uiz>
 80029a0:	1c03      	adds	r3, r0, #0
 80029a2:	8023      	strh	r3, [r4, #0]
 80029a4:	e00e      	b.n	80029c4 <DsoDisplay+0x708>
 80029a6:	1c3b      	adds	r3, r7, #0
 80029a8:	330f      	adds	r3, #15
 80029aa:	222d      	movs	r2, #45	; 0x2d
 80029ac:	701a      	strb	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2280      	movs	r2, #128	; 0x80
 80029b2:	0612      	lsls	r2, r2, #24
 80029b4:	4053      	eors	r3, r2
 80029b6:	1c3c      	adds	r4, r7, #0
 80029b8:	340a      	adds	r4, #10
 80029ba:	1c18      	adds	r0, r3, #0
 80029bc:	f001 fabe 	bl	8003f3c <__aeabi_f2uiz>
 80029c0:	1c03      	adds	r3, r0, #0
 80029c2:	8023      	strh	r3, [r4, #0]
 80029c4:	1c3b      	adds	r3, r7, #0
 80029c6:	330a      	adds	r3, #10
 80029c8:	881a      	ldrh	r2, [r3, #0]
 80029ca:	4b54      	ldr	r3, [pc, #336]	; (8002b1c <DsoDisplay+0x860>)
 80029cc:	1c10      	adds	r0, r2, #0
 80029ce:	1c19      	adds	r1, r3, #0
 80029d0:	f7fd ff90 	bl	80008f4 <BinToDec16>
 80029d4:	4b4e      	ldr	r3, [pc, #312]	; (8002b10 <DsoDisplay+0x854>)
 80029d6:	791b      	ldrb	r3, [r3, #4]
 80029d8:	061b      	lsls	r3, r3, #24
 80029da:	161b      	asrs	r3, r3, #24
 80029dc:	2b09      	cmp	r3, #9
 80029de:	dc1d      	bgt.n	8002a1c <DsoDisplay+0x760>
 80029e0:	4b4f      	ldr	r3, [pc, #316]	; (8002b20 <DsoDisplay+0x864>)
 80029e2:	791a      	ldrb	r2, [r3, #4]
 80029e4:	4b4e      	ldr	r3, [pc, #312]	; (8002b20 <DsoDisplay+0x864>)
 80029e6:	715a      	strb	r2, [r3, #5]
 80029e8:	4b4d      	ldr	r3, [pc, #308]	; (8002b20 <DsoDisplay+0x864>)
 80029ea:	78da      	ldrb	r2, [r3, #3]
 80029ec:	4b4c      	ldr	r3, [pc, #304]	; (8002b20 <DsoDisplay+0x864>)
 80029ee:	711a      	strb	r2, [r3, #4]
 80029f0:	4b4b      	ldr	r3, [pc, #300]	; (8002b20 <DsoDisplay+0x864>)
 80029f2:	222e      	movs	r2, #46	; 0x2e
 80029f4:	70da      	strb	r2, [r3, #3]
 80029f6:	4b4a      	ldr	r3, [pc, #296]	; (8002b20 <DsoDisplay+0x864>)
 80029f8:	2256      	movs	r2, #86	; 0x56
 80029fa:	719a      	strb	r2, [r3, #6]
 80029fc:	4b48      	ldr	r3, [pc, #288]	; (8002b20 <DsoDisplay+0x864>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	71da      	strb	r2, [r3, #7]
 8002a02:	4b47      	ldr	r3, [pc, #284]	; (8002b20 <DsoDisplay+0x864>)
 8002a04:	1c3a      	adds	r2, r7, #0
 8002a06:	320f      	adds	r2, #15
 8002a08:	7812      	ldrb	r2, [r2, #0]
 8002a0a:	701a      	strb	r2, [r3, #0]
 8002a0c:	4b44      	ldr	r3, [pc, #272]	; (8002b20 <DsoDisplay+0x864>)
 8002a0e:	785b      	ldrb	r3, [r3, #1]
 8002a10:	2b30      	cmp	r3, #48	; 0x30
 8002a12:	d14e      	bne.n	8002ab2 <DsoDisplay+0x7f6>
 8002a14:	4b42      	ldr	r3, [pc, #264]	; (8002b20 <DsoDisplay+0x864>)
 8002a16:	2220      	movs	r2, #32
 8002a18:	705a      	strb	r2, [r3, #1]
 8002a1a:	e04a      	b.n	8002ab2 <DsoDisplay+0x7f6>
 8002a1c:	4b40      	ldr	r3, [pc, #256]	; (8002b20 <DsoDisplay+0x864>)
 8002a1e:	2220      	movs	r2, #32
 8002a20:	701a      	strb	r2, [r3, #0]
 8002a22:	4b3f      	ldr	r3, [pc, #252]	; (8002b20 <DsoDisplay+0x864>)
 8002a24:	789a      	ldrb	r2, [r3, #2]
 8002a26:	4b3e      	ldr	r3, [pc, #248]	; (8002b20 <DsoDisplay+0x864>)
 8002a28:	705a      	strb	r2, [r3, #1]
 8002a2a:	4b3d      	ldr	r3, [pc, #244]	; (8002b20 <DsoDisplay+0x864>)
 8002a2c:	78da      	ldrb	r2, [r3, #3]
 8002a2e:	4b3c      	ldr	r3, [pc, #240]	; (8002b20 <DsoDisplay+0x864>)
 8002a30:	709a      	strb	r2, [r3, #2]
 8002a32:	4b3b      	ldr	r3, [pc, #236]	; (8002b20 <DsoDisplay+0x864>)
 8002a34:	791a      	ldrb	r2, [r3, #4]
 8002a36:	4b3a      	ldr	r3, [pc, #232]	; (8002b20 <DsoDisplay+0x864>)
 8002a38:	70da      	strb	r2, [r3, #3]
 8002a3a:	4b39      	ldr	r3, [pc, #228]	; (8002b20 <DsoDisplay+0x864>)
 8002a3c:	795a      	ldrb	r2, [r3, #5]
 8002a3e:	4b38      	ldr	r3, [pc, #224]	; (8002b20 <DsoDisplay+0x864>)
 8002a40:	711a      	strb	r2, [r3, #4]
 8002a42:	4b37      	ldr	r3, [pc, #220]	; (8002b20 <DsoDisplay+0x864>)
 8002a44:	226d      	movs	r2, #109	; 0x6d
 8002a46:	715a      	strb	r2, [r3, #5]
 8002a48:	4b35      	ldr	r3, [pc, #212]	; (8002b20 <DsoDisplay+0x864>)
 8002a4a:	2256      	movs	r2, #86	; 0x56
 8002a4c:	719a      	strb	r2, [r3, #6]
 8002a4e:	4b34      	ldr	r3, [pc, #208]	; (8002b20 <DsoDisplay+0x864>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	71da      	strb	r2, [r3, #7]
 8002a54:	1c3b      	adds	r3, r7, #0
 8002a56:	330e      	adds	r3, #14
 8002a58:	2201      	movs	r2, #1
 8002a5a:	701a      	strb	r2, [r3, #0]
 8002a5c:	e013      	b.n	8002a86 <DsoDisplay+0x7ca>
 8002a5e:	1c3b      	adds	r3, r7, #0
 8002a60:	330e      	adds	r3, #14
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	4a2e      	ldr	r2, [pc, #184]	; (8002b20 <DsoDisplay+0x864>)
 8002a66:	5cd3      	ldrb	r3, [r2, r3]
 8002a68:	2b30      	cmp	r3, #48	; 0x30
 8002a6a:	d112      	bne.n	8002a92 <DsoDisplay+0x7d6>
 8002a6c:	1c3b      	adds	r3, r7, #0
 8002a6e:	330e      	adds	r3, #14
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	4a2b      	ldr	r2, [pc, #172]	; (8002b20 <DsoDisplay+0x864>)
 8002a74:	2120      	movs	r1, #32
 8002a76:	54d1      	strb	r1, [r2, r3]
 8002a78:	1c3b      	adds	r3, r7, #0
 8002a7a:	330e      	adds	r3, #14
 8002a7c:	1c3a      	adds	r2, r7, #0
 8002a7e:	320e      	adds	r2, #14
 8002a80:	7812      	ldrb	r2, [r2, #0]
 8002a82:	3201      	adds	r2, #1
 8002a84:	701a      	strb	r2, [r3, #0]
 8002a86:	1c3b      	adds	r3, r7, #0
 8002a88:	330e      	adds	r3, #14
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	2b03      	cmp	r3, #3
 8002a8e:	d9e6      	bls.n	8002a5e <DsoDisplay+0x7a2>
 8002a90:	e000      	b.n	8002a94 <DsoDisplay+0x7d8>
 8002a92:	46c0      	nop			; (mov r8, r8)
 8002a94:	1c3b      	adds	r3, r7, #0
 8002a96:	330e      	adds	r3, #14
 8002a98:	1c3a      	adds	r2, r7, #0
 8002a9a:	320e      	adds	r2, #14
 8002a9c:	7812      	ldrb	r2, [r2, #0]
 8002a9e:	3a01      	subs	r2, #1
 8002aa0:	701a      	strb	r2, [r3, #0]
 8002aa2:	1c3b      	adds	r3, r7, #0
 8002aa4:	330e      	adds	r3, #14
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	4a1d      	ldr	r2, [pc, #116]	; (8002b20 <DsoDisplay+0x864>)
 8002aaa:	1c39      	adds	r1, r7, #0
 8002aac:	310f      	adds	r1, #15
 8002aae:	7809      	ldrb	r1, [r1, #0]
 8002ab0:	54d1      	strb	r1, [r2, r3]
 8002ab2:	4a1b      	ldr	r2, [pc, #108]	; (8002b20 <DsoDisplay+0x864>)
 8002ab4:	4b1b      	ldr	r3, [pc, #108]	; (8002b24 <DsoDisplay+0x868>)
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	9100      	str	r1, [sp, #0]
 8002aba:	491b      	ldr	r1, [pc, #108]	; (8002b28 <DsoDisplay+0x86c>)
 8002abc:	9101      	str	r1, [sp, #4]
 8002abe:	20f0      	movs	r0, #240	; 0xf0
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	f002 f9c3 	bl	8004e4c <PutsGenic>
 8002ac6:	4b11      	ldr	r3, [pc, #68]	; (8002b0c <DsoDisplay+0x850>)
 8002ac8:	885b      	ldrh	r3, [r3, #2]
 8002aca:	1c1a      	adds	r2, r3, #0
 8002acc:	2304      	movs	r3, #4
 8002ace:	4013      	ands	r3, r2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d009      	beq.n	8002ae8 <DsoDisplay+0x82c>
 8002ad4:	4b0d      	ldr	r3, [pc, #52]	; (8002b0c <DsoDisplay+0x850>)
 8002ad6:	885b      	ldrh	r3, [r3, #2]
 8002ad8:	2204      	movs	r2, #4
 8002ada:	4393      	bics	r3, r2
 8002adc:	041b      	lsls	r3, r3, #16
 8002ade:	0c1a      	lsrs	r2, r3, #16
 8002ae0:	4b0a      	ldr	r3, [pc, #40]	; (8002b0c <DsoDisplay+0x850>)
 8002ae2:	805a      	strh	r2, [r3, #2]
 8002ae4:	f000 f8f4 	bl	8002cd0 <FastShow>
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	b005      	add	sp, #20
 8002aec:	bcf0      	pop	{r4, r5, r6, r7}
 8002aee:	bc01      	pop	{r0}
 8002af0:	4700      	bx	r0
 8002af2:	46c0      	nop			; (mov r8, r8)
 8002af4:	46c0      	nop			; (mov r8, r8)
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	00000000 	.word	0x00000000
 8002afc:	3fe9c800 	.word	0x3fe9c800
 8002b00:	0000b35f 	.word	0x0000b35f
 8002b04:	00000137 	.word	0x00000137
 8002b08:	20000094 	.word	0x20000094
 8002b0c:	2000233c 	.word	0x2000233c
 8002b10:	200009c8 	.word	0x200009c8
 8002b14:	08006ea0 	.word	0x08006ea0
 8002b18:	00000000 	.word	0x00000000
 8002b1c:	20002309 	.word	0x20002309
 8002b20:	20002308 	.word	0x20002308
 8002b24:	0000841e 	.word	0x0000841e
 8002b28:	20000138 	.word	0x20000138

08002b2c <Grid>:
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af02      	add	r7, sp, #8
 8002b32:	1dfb      	adds	r3, r7, #7
 8002b34:	2201      	movs	r2, #1
 8002b36:	701a      	strb	r2, [r3, #0]
 8002b38:	e021      	b.n	8002b7e <Grid+0x52>
 8002b3a:	1dfb      	adds	r3, r7, #7
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	041b      	lsls	r3, r3, #16
 8002b40:	0c1b      	lsrs	r3, r3, #16
 8002b42:	1c1a      	adds	r2, r3, #0
 8002b44:	0092      	lsls	r2, r2, #2
 8002b46:	18d3      	adds	r3, r2, r3
 8002b48:	1c1a      	adds	r2, r3, #0
 8002b4a:	0091      	lsls	r1, r2, #2
 8002b4c:	1c1a      	adds	r2, r3, #0
 8002b4e:	1c0b      	adds	r3, r1, #0
 8002b50:	18d3      	adds	r3, r2, r3
 8002b52:	041b      	lsls	r3, r3, #16
 8002b54:	0c1b      	lsrs	r3, r3, #16
 8002b56:	330a      	adds	r3, #10
 8002b58:	041b      	lsls	r3, r3, #16
 8002b5a:	0c1b      	lsrs	r3, r3, #16
 8002b5c:	041b      	lsls	r3, r3, #16
 8002b5e:	0c1b      	lsrs	r3, r3, #16
 8002b60:	041b      	lsls	r3, r3, #16
 8002b62:	141b      	asrs	r3, r3, #16
 8002b64:	4a58      	ldr	r2, [pc, #352]	; (8002cc8 <Grid+0x19c>)
 8002b66:	9200      	str	r2, [sp, #0]
 8002b68:	1c18      	adds	r0, r3, #0
 8002b6a:	2111      	movs	r1, #17
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	23c8      	movs	r3, #200	; 0xc8
 8002b70:	f002 f8b0 	bl	8004cd4 <FillRect>
 8002b74:	1dfb      	adds	r3, r7, #7
 8002b76:	1dfa      	adds	r2, r7, #7
 8002b78:	7812      	ldrb	r2, [r2, #0]
 8002b7a:	3201      	adds	r2, #1
 8002b7c:	701a      	strb	r2, [r3, #0]
 8002b7e:	1dfb      	adds	r3, r7, #7
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	2b0b      	cmp	r3, #11
 8002b84:	d9d9      	bls.n	8002b3a <Grid+0xe>
 8002b86:	1dfb      	adds	r3, r7, #7
 8002b88:	2201      	movs	r2, #1
 8002b8a:	701a      	strb	r2, [r3, #0]
 8002b8c:	e022      	b.n	8002bd4 <Grid+0xa8>
 8002b8e:	1dfb      	adds	r3, r7, #7
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	041b      	lsls	r3, r3, #16
 8002b94:	0c1b      	lsrs	r3, r3, #16
 8002b96:	1c1a      	adds	r2, r3, #0
 8002b98:	0092      	lsls	r2, r2, #2
 8002b9a:	18d3      	adds	r3, r2, r3
 8002b9c:	1c1a      	adds	r2, r3, #0
 8002b9e:	0091      	lsls	r1, r2, #2
 8002ba0:	1c1a      	adds	r2, r3, #0
 8002ba2:	1c0b      	adds	r3, r1, #0
 8002ba4:	18d3      	adds	r3, r2, r3
 8002ba6:	041b      	lsls	r3, r3, #16
 8002ba8:	0c1b      	lsrs	r3, r3, #16
 8002baa:	3311      	adds	r3, #17
 8002bac:	041b      	lsls	r3, r3, #16
 8002bae:	0c1b      	lsrs	r3, r3, #16
 8002bb0:	041b      	lsls	r3, r3, #16
 8002bb2:	0c1b      	lsrs	r3, r3, #16
 8002bb4:	041b      	lsls	r3, r3, #16
 8002bb6:	141b      	asrs	r3, r3, #16
 8002bb8:	2296      	movs	r2, #150	; 0x96
 8002bba:	0052      	lsls	r2, r2, #1
 8002bbc:	4942      	ldr	r1, [pc, #264]	; (8002cc8 <Grid+0x19c>)
 8002bbe:	9100      	str	r1, [sp, #0]
 8002bc0:	200a      	movs	r0, #10
 8002bc2:	1c19      	adds	r1, r3, #0
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	f002 f885 	bl	8004cd4 <FillRect>
 8002bca:	1dfb      	adds	r3, r7, #7
 8002bcc:	1dfa      	adds	r2, r7, #7
 8002bce:	7812      	ldrb	r2, [r2, #0]
 8002bd0:	3201      	adds	r2, #1
 8002bd2:	701a      	strb	r2, [r3, #0]
 8002bd4:	1dfb      	adds	r3, r7, #7
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b07      	cmp	r3, #7
 8002bda:	d9d8      	bls.n	8002b8e <Grid+0x62>
 8002bdc:	2396      	movs	r3, #150	; 0x96
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	4a3a      	ldr	r2, [pc, #232]	; (8002ccc <Grid+0x1a0>)
 8002be2:	9200      	str	r2, [sp, #0]
 8002be4:	200a      	movs	r0, #10
 8002be6:	2111      	movs	r1, #17
 8002be8:	1c1a      	adds	r2, r3, #0
 8002bea:	2301      	movs	r3, #1
 8002bec:	f002 f872 	bl	8004cd4 <FillRect>
 8002bf0:	2396      	movs	r3, #150	; 0x96
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	4a35      	ldr	r2, [pc, #212]	; (8002ccc <Grid+0x1a0>)
 8002bf6:	9200      	str	r2, [sp, #0]
 8002bf8:	200a      	movs	r0, #10
 8002bfa:	21d9      	movs	r1, #217	; 0xd9
 8002bfc:	1c1a      	adds	r2, r3, #0
 8002bfe:	2301      	movs	r3, #1
 8002c00:	f002 f868 	bl	8004cd4 <FillRect>
 8002c04:	4b31      	ldr	r3, [pc, #196]	; (8002ccc <Grid+0x1a0>)
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	200a      	movs	r0, #10
 8002c0a:	2111      	movs	r1, #17
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	23c8      	movs	r3, #200	; 0xc8
 8002c10:	f002 f860 	bl	8004cd4 <FillRect>
 8002c14:	239b      	movs	r3, #155	; 0x9b
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	4a2c      	ldr	r2, [pc, #176]	; (8002ccc <Grid+0x1a0>)
 8002c1a:	9200      	str	r2, [sp, #0]
 8002c1c:	1c18      	adds	r0, r3, #0
 8002c1e:	2111      	movs	r1, #17
 8002c20:	2201      	movs	r2, #1
 8002c22:	23c8      	movs	r3, #200	; 0xc8
 8002c24:	f002 f856 	bl	8004cd4 <FillRect>
 8002c28:	1dfb      	adds	r3, r7, #7
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	701a      	strb	r2, [r3, #0]
 8002c2e:	e01c      	b.n	8002c6a <Grid+0x13e>
 8002c30:	1dfb      	adds	r3, r7, #7
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	041b      	lsls	r3, r3, #16
 8002c36:	0c1b      	lsrs	r3, r3, #16
 8002c38:	1c1a      	adds	r2, r3, #0
 8002c3a:	0092      	lsls	r2, r2, #2
 8002c3c:	18d3      	adds	r3, r2, r3
 8002c3e:	041b      	lsls	r3, r3, #16
 8002c40:	0c1b      	lsrs	r3, r3, #16
 8002c42:	330a      	adds	r3, #10
 8002c44:	041b      	lsls	r3, r3, #16
 8002c46:	0c1b      	lsrs	r3, r3, #16
 8002c48:	041b      	lsls	r3, r3, #16
 8002c4a:	0c1b      	lsrs	r3, r3, #16
 8002c4c:	041b      	lsls	r3, r3, #16
 8002c4e:	141b      	asrs	r3, r3, #16
 8002c50:	4a1d      	ldr	r2, [pc, #116]	; (8002cc8 <Grid+0x19c>)
 8002c52:	9200      	str	r2, [sp, #0]
 8002c54:	1c18      	adds	r0, r3, #0
 8002c56:	2173      	movs	r1, #115	; 0x73
 8002c58:	2201      	movs	r2, #1
 8002c5a:	2305      	movs	r3, #5
 8002c5c:	f002 f83a 	bl	8004cd4 <FillRect>
 8002c60:	1dfb      	adds	r3, r7, #7
 8002c62:	1dfa      	adds	r2, r7, #7
 8002c64:	7812      	ldrb	r2, [r2, #0]
 8002c66:	3201      	adds	r2, #1
 8002c68:	701a      	strb	r2, [r3, #0]
 8002c6a:	1dfb      	adds	r3, r7, #7
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	2b3b      	cmp	r3, #59	; 0x3b
 8002c70:	d9de      	bls.n	8002c30 <Grid+0x104>
 8002c72:	1dfb      	adds	r3, r7, #7
 8002c74:	2201      	movs	r2, #1
 8002c76:	701a      	strb	r2, [r3, #0]
 8002c78:	e01c      	b.n	8002cb4 <Grid+0x188>
 8002c7a:	1dfb      	adds	r3, r7, #7
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	041b      	lsls	r3, r3, #16
 8002c80:	0c1b      	lsrs	r3, r3, #16
 8002c82:	1c1a      	adds	r2, r3, #0
 8002c84:	0092      	lsls	r2, r2, #2
 8002c86:	18d3      	adds	r3, r2, r3
 8002c88:	041b      	lsls	r3, r3, #16
 8002c8a:	0c1b      	lsrs	r3, r3, #16
 8002c8c:	3311      	adds	r3, #17
 8002c8e:	041b      	lsls	r3, r3, #16
 8002c90:	0c1b      	lsrs	r3, r3, #16
 8002c92:	041b      	lsls	r3, r3, #16
 8002c94:	0c1b      	lsrs	r3, r3, #16
 8002c96:	041b      	lsls	r3, r3, #16
 8002c98:	141b      	asrs	r3, r3, #16
 8002c9a:	4a0b      	ldr	r2, [pc, #44]	; (8002cc8 <Grid+0x19c>)
 8002c9c:	9200      	str	r2, [sp, #0]
 8002c9e:	209e      	movs	r0, #158	; 0x9e
 8002ca0:	1c19      	adds	r1, r3, #0
 8002ca2:	2205      	movs	r2, #5
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	f002 f815 	bl	8004cd4 <FillRect>
 8002caa:	1dfb      	adds	r3, r7, #7
 8002cac:	1dfa      	adds	r2, r7, #7
 8002cae:	7812      	ldrb	r2, [r2, #0]
 8002cb0:	3201      	adds	r2, #1
 8002cb2:	701a      	strb	r2, [r3, #0]
 8002cb4:	1dfb      	adds	r3, r7, #7
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2b27      	cmp	r3, #39	; 0x27
 8002cba:	d9de      	bls.n	8002c7a <Grid+0x14e>
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	b002      	add	sp, #8
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	bc01      	pop	{r0}
 8002cc4:	4700      	bx	r0
 8002cc6:	46c0      	nop			; (mov r8, r8)
 8002cc8:	00005acb 	.word	0x00005acb
 8002ccc:	0000defb 	.word	0x0000defb

08002cd0 <FastShow>:
 8002cd0:	b590      	push	{r4, r7, lr}
 8002cd2:	b08b      	sub	sp, #44	; 0x2c
 8002cd4:	af02      	add	r7, sp, #8
 8002cd6:	4ba3      	ldr	r3, [pc, #652]	; (8002f64 <FastShow+0x294>)
 8002cd8:	881b      	ldrh	r3, [r3, #0]
 8002cda:	1c1a      	adds	r2, r3, #0
 8002cdc:	2340      	movs	r3, #64	; 0x40
 8002cde:	4013      	ands	r3, r2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d004      	beq.n	8002cee <FastShow+0x1e>
 8002ce4:	4ba0      	ldr	r3, [pc, #640]	; (8002f68 <FastShow+0x298>)
 8002ce6:	617b      	str	r3, [r7, #20]
 8002ce8:	4ba0      	ldr	r3, [pc, #640]	; (8002f6c <FastShow+0x29c>)
 8002cea:	613b      	str	r3, [r7, #16]
 8002cec:	e003      	b.n	8002cf6 <FastShow+0x26>
 8002cee:	4ba0      	ldr	r3, [pc, #640]	; (8002f70 <FastShow+0x2a0>)
 8002cf0:	617b      	str	r3, [r7, #20]
 8002cf2:	4ba0      	ldr	r3, [pc, #640]	; (8002f74 <FastShow+0x2a4>)
 8002cf4:	613b      	str	r3, [r7, #16]
 8002cf6:	4b9b      	ldr	r3, [pc, #620]	; (8002f64 <FastShow+0x294>)
 8002cf8:	699a      	ldr	r2, [r3, #24]
 8002cfa:	4b9f      	ldr	r3, [pc, #636]	; (8002f78 <FastShow+0x2a8>)
 8002cfc:	885b      	ldrh	r3, [r3, #2]
 8002cfe:	041b      	lsls	r3, r3, #16
 8002d00:	141b      	asrs	r3, r3, #16
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	18d3      	adds	r3, r2, r3
 8002d06:	60fb      	str	r3, [r7, #12]
 8002d08:	4b9b      	ldr	r3, [pc, #620]	; (8002f78 <FastShow+0x2a8>)
 8002d0a:	8a1b      	ldrh	r3, [r3, #16]
 8002d0c:	005a      	lsls	r2, r3, #1
 8002d0e:	4b9b      	ldr	r3, [pc, #620]	; (8002f7c <FastShow+0x2ac>)
 8002d10:	18d2      	adds	r2, r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d806      	bhi.n	8002d26 <FastShow+0x56>
 8002d18:	4b97      	ldr	r3, [pc, #604]	; (8002f78 <FastShow+0x2a8>)
 8002d1a:	8a1b      	ldrh	r3, [r3, #16]
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	425b      	negs	r3, r3
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	18d3      	adds	r3, r2, r3
 8002d24:	60fb      	str	r3, [r7, #12]
 8002d26:	1c3b      	adds	r3, r7, #0
 8002d28:	330a      	adds	r3, #10
 8002d2a:	4a93      	ldr	r2, [pc, #588]	; (8002f78 <FastShow+0x2a8>)
 8002d2c:	88d2      	ldrh	r2, [r2, #6]
 8002d2e:	801a      	strh	r2, [r3, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	881a      	ldrh	r2, [r3, #0]
 8002d34:	1c3b      	adds	r3, r7, #0
 8002d36:	330a      	adds	r3, #10
 8002d38:	881b      	ldrh	r3, [r3, #0]
 8002d3a:	18d3      	adds	r3, r2, r3
 8002d3c:	041b      	lsls	r3, r3, #16
 8002d3e:	0c1a      	lsrs	r2, r3, #16
 8002d40:	1c3b      	adds	r3, r7, #0
 8002d42:	331a      	adds	r3, #26
 8002d44:	801a      	strh	r2, [r3, #0]
 8002d46:	1c3b      	adds	r3, r7, #0
 8002d48:	331a      	adds	r3, #26
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	5e5a      	ldrsh	r2, [r3, r1]
 8002d4e:	4b8c      	ldr	r3, [pc, #560]	; (8002f80 <FastShow+0x2b0>)
 8002d50:	429a      	cmp	r2, r3
 8002d52:	dd03      	ble.n	8002d5c <FastShow+0x8c>
 8002d54:	1c3b      	adds	r3, r7, #0
 8002d56:	331a      	adds	r3, #26
 8002d58:	4a89      	ldr	r2, [pc, #548]	; (8002f80 <FastShow+0x2b0>)
 8002d5a:	801a      	strh	r2, [r3, #0]
 8002d5c:	1c3b      	adds	r3, r7, #0
 8002d5e:	331a      	adds	r3, #26
 8002d60:	2100      	movs	r1, #0
 8002d62:	5e5a      	ldrsh	r2, [r3, r1]
 8002d64:	4b87      	ldr	r3, [pc, #540]	; (8002f84 <FastShow+0x2b4>)
 8002d66:	429a      	cmp	r2, r3
 8002d68:	dc03      	bgt.n	8002d72 <FastShow+0xa2>
 8002d6a:	1c3b      	adds	r3, r7, #0
 8002d6c:	331a      	adds	r3, #26
 8002d6e:	4a86      	ldr	r2, [pc, #536]	; (8002f88 <FastShow+0x2b8>)
 8002d70:	801a      	strh	r2, [r3, #0]
 8002d72:	1c3b      	adds	r3, r7, #0
 8002d74:	331e      	adds	r3, #30
 8002d76:	220b      	movs	r2, #11
 8002d78:	801a      	strh	r2, [r3, #0]
 8002d7a:	e080      	b.n	8002e7e <FastShow+0x1ae>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	881a      	ldrh	r2, [r3, #0]
 8002d80:	1c3b      	adds	r3, r7, #0
 8002d82:	331c      	adds	r3, #28
 8002d84:	801a      	strh	r2, [r3, #0]
 8002d86:	1c3b      	adds	r3, r7, #0
 8002d88:	331c      	adds	r3, #28
 8002d8a:	881a      	ldrh	r2, [r3, #0]
 8002d8c:	1c3b      	adds	r3, r7, #0
 8002d8e:	330a      	adds	r3, #10
 8002d90:	881b      	ldrh	r3, [r3, #0]
 8002d92:	18d3      	adds	r3, r2, r3
 8002d94:	041b      	lsls	r3, r3, #16
 8002d96:	0c1a      	lsrs	r2, r3, #16
 8002d98:	1c3b      	adds	r3, r7, #0
 8002d9a:	331c      	adds	r3, #28
 8002d9c:	801a      	strh	r2, [r3, #0]
 8002d9e:	1c3b      	adds	r3, r7, #0
 8002da0:	331c      	adds	r3, #28
 8002da2:	2100      	movs	r1, #0
 8002da4:	5e5a      	ldrsh	r2, [r3, r1]
 8002da6:	4b76      	ldr	r3, [pc, #472]	; (8002f80 <FastShow+0x2b0>)
 8002da8:	429a      	cmp	r2, r3
 8002daa:	dd03      	ble.n	8002db4 <FastShow+0xe4>
 8002dac:	1c3b      	adds	r3, r7, #0
 8002dae:	331c      	adds	r3, #28
 8002db0:	4a73      	ldr	r2, [pc, #460]	; (8002f80 <FastShow+0x2b0>)
 8002db2:	801a      	strh	r2, [r3, #0]
 8002db4:	1c3b      	adds	r3, r7, #0
 8002db6:	331c      	adds	r3, #28
 8002db8:	2100      	movs	r1, #0
 8002dba:	5e5a      	ldrsh	r2, [r3, r1]
 8002dbc:	4b71      	ldr	r3, [pc, #452]	; (8002f84 <FastShow+0x2b4>)
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	dc03      	bgt.n	8002dca <FastShow+0xfa>
 8002dc2:	1c3b      	adds	r3, r7, #0
 8002dc4:	331c      	adds	r3, #28
 8002dc6:	4a70      	ldr	r2, [pc, #448]	; (8002f88 <FastShow+0x2b8>)
 8002dc8:	801a      	strh	r2, [r3, #0]
 8002dca:	1c3c      	adds	r4, r7, #0
 8002dcc:	3408      	adds	r4, #8
 8002dce:	1c3b      	adds	r3, r7, #0
 8002dd0:	331c      	adds	r3, #28
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	5e5a      	ldrsh	r2, [r3, r1]
 8002dd6:	1c3b      	adds	r3, r7, #0
 8002dd8:	331a      	adds	r3, #26
 8002dda:	2100      	movs	r1, #0
 8002ddc:	5e5b      	ldrsh	r3, [r3, r1]
 8002dde:	1c10      	adds	r0, r2, #0
 8002de0:	1c19      	adds	r1, r3, #0
 8002de2:	f7fd fd4b 	bl	800087c <Min>
 8002de6:	1c03      	adds	r3, r0, #0
 8002de8:	8023      	strh	r3, [r4, #0]
 8002dea:	1dbc      	adds	r4, r7, #6
 8002dec:	1c3b      	adds	r3, r7, #0
 8002dee:	331c      	adds	r3, #28
 8002df0:	2100      	movs	r1, #0
 8002df2:	5e5a      	ldrsh	r2, [r3, r1]
 8002df4:	1c3b      	adds	r3, r7, #0
 8002df6:	331a      	adds	r3, #26
 8002df8:	2100      	movs	r1, #0
 8002dfa:	5e5b      	ldrsh	r3, [r3, r1]
 8002dfc:	1c10      	adds	r0, r2, #0
 8002dfe:	1c19      	adds	r1, r3, #0
 8002e00:	f7fd fd5a 	bl	80008b8 <Max>
 8002e04:	1c03      	adds	r3, r0, #0
 8002e06:	8023      	strh	r3, [r4, #0]
 8002e08:	1c3b      	adds	r3, r7, #0
 8002e0a:	331a      	adds	r3, #26
 8002e0c:	1c3a      	adds	r2, r7, #0
 8002e0e:	321c      	adds	r2, #28
 8002e10:	8812      	ldrh	r2, [r2, #0]
 8002e12:	801a      	strh	r2, [r3, #0]
 8002e14:	1dbb      	adds	r3, r7, #6
 8002e16:	881b      	ldrh	r3, [r3, #0]
 8002e18:	061b      	lsls	r3, r3, #24
 8002e1a:	0e1b      	lsrs	r3, r3, #24
 8002e1c:	2275      	movs	r2, #117	; 0x75
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	061b      	lsls	r3, r3, #24
 8002e22:	0e1a      	lsrs	r2, r3, #24
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	701a      	strb	r2, [r3, #0]
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	617b      	str	r3, [r7, #20]
 8002e2e:	1dbb      	adds	r3, r7, #6
 8002e30:	881b      	ldrh	r3, [r3, #0]
 8002e32:	061b      	lsls	r3, r3, #24
 8002e34:	0e1a      	lsrs	r2, r3, #24
 8002e36:	1c3b      	adds	r3, r7, #0
 8002e38:	3308      	adds	r3, #8
 8002e3a:	881b      	ldrh	r3, [r3, #0]
 8002e3c:	061b      	lsls	r3, r3, #24
 8002e3e:	0e1b      	lsrs	r3, r3, #24
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	061b      	lsls	r3, r3, #24
 8002e44:	0e1b      	lsrs	r3, r3, #24
 8002e46:	3301      	adds	r3, #1
 8002e48:	061b      	lsls	r3, r3, #24
 8002e4a:	0e1a      	lsrs	r2, r3, #24
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	701a      	strb	r2, [r3, #0]
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	3301      	adds	r3, #1
 8002e54:	613b      	str	r3, [r7, #16]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	3302      	adds	r3, #2
 8002e5a:	60fb      	str	r3, [r7, #12]
 8002e5c:	4b46      	ldr	r3, [pc, #280]	; (8002f78 <FastShow+0x2a8>)
 8002e5e:	8a1b      	ldrh	r3, [r3, #16]
 8002e60:	005a      	lsls	r2, r3, #1
 8002e62:	4b46      	ldr	r3, [pc, #280]	; (8002f7c <FastShow+0x2ac>)
 8002e64:	18d2      	adds	r2, r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d801      	bhi.n	8002e70 <FastShow+0x1a0>
 8002e6c:	4b43      	ldr	r3, [pc, #268]	; (8002f7c <FastShow+0x2ac>)
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	1c3b      	adds	r3, r7, #0
 8002e72:	331e      	adds	r3, #30
 8002e74:	1c3a      	adds	r2, r7, #0
 8002e76:	321e      	adds	r2, #30
 8002e78:	8812      	ldrh	r2, [r2, #0]
 8002e7a:	3201      	adds	r2, #1
 8002e7c:	801a      	strh	r2, [r3, #0]
 8002e7e:	1c3b      	adds	r3, r7, #0
 8002e80:	331e      	adds	r3, #30
 8002e82:	881a      	ldrh	r2, [r3, #0]
 8002e84:	4b41      	ldr	r3, [pc, #260]	; (8002f8c <FastShow+0x2bc>)
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d800      	bhi.n	8002e8c <FastShow+0x1bc>
 8002e8a:	e777      	b.n	8002d7c <FastShow+0xac>
 8002e8c:	4b40      	ldr	r3, [pc, #256]	; (8002f90 <FastShow+0x2c0>)
 8002e8e:	881b      	ldrh	r3, [r3, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d016      	beq.n	8002ec2 <FastShow+0x1f2>
 8002e94:	4b3e      	ldr	r3, [pc, #248]	; (8002f90 <FastShow+0x2c0>)
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	041b      	lsls	r3, r3, #16
 8002e9c:	0c1a      	lsrs	r2, r3, #16
 8002e9e:	4b3c      	ldr	r3, [pc, #240]	; (8002f90 <FastShow+0x2c0>)
 8002ea0:	801a      	strh	r2, [r3, #0]
 8002ea2:	4b3b      	ldr	r3, [pc, #236]	; (8002f90 <FastShow+0x2c0>)
 8002ea4:	881b      	ldrh	r3, [r3, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10b      	bne.n	8002ec2 <FastShow+0x1f2>
 8002eaa:	4b2e      	ldr	r3, [pc, #184]	; (8002f64 <FastShow+0x294>)
 8002eac:	881b      	ldrh	r3, [r3, #0]
 8002eae:	2210      	movs	r2, #16
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	041b      	lsls	r3, r3, #16
 8002eb4:	0c1a      	lsrs	r2, r3, #16
 8002eb6:	4b2b      	ldr	r3, [pc, #172]	; (8002f64 <FastShow+0x294>)
 8002eb8:	801a      	strh	r2, [r3, #0]
 8002eba:	4b36      	ldr	r3, [pc, #216]	; (8002f94 <FastShow+0x2c4>)
 8002ebc:	22fa      	movs	r2, #250	; 0xfa
 8002ebe:	0052      	lsls	r2, r2, #1
 8002ec0:	801a      	strh	r2, [r3, #0]
 8002ec2:	2000      	movs	r0, #0
 8002ec4:	f000 f86e 	bl	8002fa4 <FastDraw>
 8002ec8:	f7ff fe30 	bl	8002b2c <Grid>
 8002ecc:	4b25      	ldr	r3, [pc, #148]	; (8002f64 <FastShow+0x294>)
 8002ece:	881b      	ldrh	r3, [r3, #0]
 8002ed0:	2240      	movs	r2, #64	; 0x40
 8002ed2:	4053      	eors	r3, r2
 8002ed4:	041b      	lsls	r3, r3, #16
 8002ed6:	0c1a      	lsrs	r2, r3, #16
 8002ed8:	4b22      	ldr	r3, [pc, #136]	; (8002f64 <FastShow+0x294>)
 8002eda:	801a      	strh	r2, [r3, #0]
 8002edc:	4b2e      	ldr	r3, [pc, #184]	; (8002f98 <FastShow+0x2c8>)
 8002ede:	1c18      	adds	r0, r3, #0
 8002ee0:	f000 f860 	bl	8002fa4 <FastDraw>
 8002ee4:	4b2b      	ldr	r3, [pc, #172]	; (8002f94 <FastShow+0x2c4>)
 8002ee6:	881b      	ldrh	r3, [r3, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d02a      	beq.n	8002f42 <FastShow+0x272>
 8002eec:	4b29      	ldr	r3, [pc, #164]	; (8002f94 <FastShow+0x2c4>)
 8002eee:	881b      	ldrh	r3, [r3, #0]
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	041b      	lsls	r3, r3, #16
 8002ef4:	0c1a      	lsrs	r2, r3, #16
 8002ef6:	4b27      	ldr	r3, [pc, #156]	; (8002f94 <FastShow+0x2c4>)
 8002ef8:	801a      	strh	r2, [r3, #0]
 8002efa:	4b26      	ldr	r3, [pc, #152]	; (8002f94 <FastShow+0x2c4>)
 8002efc:	881b      	ldrh	r3, [r3, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d11f      	bne.n	8002f42 <FastShow+0x272>
 8002f02:	4b18      	ldr	r3, [pc, #96]	; (8002f64 <FastShow+0x294>)
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	2210      	movs	r2, #16
 8002f08:	4393      	bics	r3, r2
 8002f0a:	041b      	lsls	r3, r3, #16
 8002f0c:	0c1a      	lsrs	r2, r3, #16
 8002f0e:	4b15      	ldr	r3, [pc, #84]	; (8002f64 <FastShow+0x294>)
 8002f10:	801a      	strh	r2, [r3, #0]
 8002f12:	2300      	movs	r3, #0
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	4b21      	ldr	r3, [pc, #132]	; (8002f9c <FastShow+0x2cc>)
 8002f18:	9301      	str	r3, [sp, #4]
 8002f1a:	200b      	movs	r0, #11
 8002f1c:	21cc      	movs	r1, #204	; 0xcc
 8002f1e:	2200      	movs	r2, #0
 8002f20:	2300      	movs	r3, #0
 8002f22:	f001 ff27 	bl	8004d74 <PutcGenic>
 8002f26:	2300      	movs	r3, #0
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	4b1d      	ldr	r3, [pc, #116]	; (8002fa0 <FastShow+0x2d0>)
 8002f2c:	9301      	str	r3, [sp, #4]
 8002f2e:	20c4      	movs	r0, #196	; 0xc4
 8002f30:	21cd      	movs	r1, #205	; 0xcd
 8002f32:	2200      	movs	r2, #0
 8002f34:	2300      	movs	r3, #0
 8002f36:	f001 ff1d 	bl	8004d74 <PutcGenic>
 8002f3a:	4b15      	ldr	r3, [pc, #84]	; (8002f90 <FastShow+0x2c0>)
 8002f3c:	22fa      	movs	r2, #250	; 0xfa
 8002f3e:	0092      	lsls	r2, r2, #2
 8002f40:	801a      	strh	r2, [r3, #0]
 8002f42:	4b13      	ldr	r3, [pc, #76]	; (8002f90 <FastShow+0x2c0>)
 8002f44:	881b      	ldrh	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d107      	bne.n	8002f5a <FastShow+0x28a>
 8002f4a:	4b12      	ldr	r3, [pc, #72]	; (8002f94 <FastShow+0x2c4>)
 8002f4c:	881b      	ldrh	r3, [r3, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d103      	bne.n	8002f5a <FastShow+0x28a>
 8002f52:	4b0f      	ldr	r3, [pc, #60]	; (8002f90 <FastShow+0x2c0>)
 8002f54:	22fa      	movs	r2, #250	; 0xfa
 8002f56:	0092      	lsls	r2, r2, #2
 8002f58:	801a      	strh	r2, [r3, #0]
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	b009      	add	sp, #36	; 0x24
 8002f5e:	bc90      	pop	{r4, r7}
 8002f60:	bc01      	pop	{r0}
 8002f62:	4700      	bx	r0
 8002f64:	2000233c 	.word	0x2000233c
 8002f68:	2000248c 	.word	0x2000248c
 8002f6c:	200019dc 	.word	0x200019dc
 8002f70:	200025bc 	.word	0x200025bc
 8002f74:	20002360 	.word	0x20002360
 8002f78:	200009c8 	.word	0x200009c8
 8002f7c:	20001b08 	.word	0x20001b08
 8002f80:	00000863 	.word	0x00000863
 8002f84:	0000079b 	.word	0x0000079b
 8002f88:	0000079c 	.word	0x0000079c
 8002f8c:	00000135 	.word	0x00000135
 8002f90:	200026ec 	.word	0x200026ec
 8002f94:	20002358 	.word	0x20002358
 8002f98:	000007ff 	.word	0x000007ff
 8002f9c:	20000064 	.word	0x20000064
 8002fa0:	20000070 	.word	0x20000070

08002fa4 <FastDraw>:
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b088      	sub	sp, #32
 8002fa8:	af02      	add	r7, sp, #8
 8002faa:	1c02      	adds	r2, r0, #0
 8002fac:	1dbb      	adds	r3, r7, #6
 8002fae:	801a      	strh	r2, [r3, #0]
 8002fb0:	4b47      	ldr	r3, [pc, #284]	; (80030d0 <FastDraw+0x12c>)
 8002fb2:	881b      	ldrh	r3, [r3, #0]
 8002fb4:	1c1a      	adds	r2, r3, #0
 8002fb6:	2340      	movs	r3, #64	; 0x40
 8002fb8:	4013      	ands	r3, r2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d051      	beq.n	8003062 <FastDraw+0xbe>
 8002fbe:	4b45      	ldr	r3, [pc, #276]	; (80030d4 <FastDraw+0x130>)
 8002fc0:	613b      	str	r3, [r7, #16]
 8002fc2:	4b45      	ldr	r3, [pc, #276]	; (80030d8 <FastDraw+0x134>)
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	1c3b      	adds	r3, r7, #0
 8002fc8:	3316      	adds	r3, #22
 8002fca:	220b      	movs	r2, #11
 8002fcc:	801a      	strh	r2, [r3, #0]
 8002fce:	e022      	b.n	8003016 <FastDraw+0x72>
 8002fd0:	1c3b      	adds	r3, r7, #0
 8002fd2:	3316      	adds	r3, #22
 8002fd4:	8819      	ldrh	r1, [r3, #0]
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	1c1a      	adds	r2, r3, #0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	613b      	str	r3, [r7, #16]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	3001      	adds	r0, #1
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	0409      	lsls	r1, r1, #16
 8002fee:	1409      	asrs	r1, r1, #16
 8002ff0:	0412      	lsls	r2, r2, #16
 8002ff2:	1412      	asrs	r2, r2, #16
 8002ff4:	041b      	lsls	r3, r3, #16
 8002ff6:	141b      	asrs	r3, r3, #16
 8002ff8:	1db8      	adds	r0, r7, #6
 8002ffa:	8800      	ldrh	r0, [r0, #0]
 8002ffc:	9000      	str	r0, [sp, #0]
 8002ffe:	1c08      	adds	r0, r1, #0
 8003000:	1c11      	adds	r1, r2, #0
 8003002:	2201      	movs	r2, #1
 8003004:	f001 fe66 	bl	8004cd4 <FillRect>
 8003008:	1c3b      	adds	r3, r7, #0
 800300a:	3316      	adds	r3, #22
 800300c:	1c3a      	adds	r2, r7, #0
 800300e:	3216      	adds	r2, #22
 8003010:	8812      	ldrh	r2, [r2, #0]
 8003012:	3201      	adds	r2, #1
 8003014:	801a      	strh	r2, [r3, #0]
 8003016:	1c3b      	adds	r3, r7, #0
 8003018:	3316      	adds	r3, #22
 800301a:	881a      	ldrh	r2, [r3, #0]
 800301c:	4b2f      	ldr	r3, [pc, #188]	; (80030dc <FastDraw+0x138>)
 800301e:	429a      	cmp	r2, r3
 8003020:	d9d6      	bls.n	8002fd0 <FastDraw+0x2c>
 8003022:	4b2b      	ldr	r3, [pc, #172]	; (80030d0 <FastDraw+0x12c>)
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	1c1a      	adds	r2, r3, #0
 8003028:	2310      	movs	r3, #16
 800302a:	4013      	ands	r3, r2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d04a      	beq.n	80030c6 <FastDraw+0x122>
 8003030:	1dbb      	adds	r3, r7, #6
 8003032:	881b      	ldrh	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d046      	beq.n	80030c6 <FastDraw+0x122>
 8003038:	4b29      	ldr	r3, [pc, #164]	; (80030e0 <FastDraw+0x13c>)
 800303a:	2200      	movs	r2, #0
 800303c:	9200      	str	r2, [sp, #0]
 800303e:	4a29      	ldr	r2, [pc, #164]	; (80030e4 <FastDraw+0x140>)
 8003040:	9201      	str	r2, [sp, #4]
 8003042:	200b      	movs	r0, #11
 8003044:	21cc      	movs	r1, #204	; 0xcc
 8003046:	2200      	movs	r2, #0
 8003048:	f001 fe94 	bl	8004d74 <PutcGenic>
 800304c:	4b24      	ldr	r3, [pc, #144]	; (80030e0 <FastDraw+0x13c>)
 800304e:	2200      	movs	r2, #0
 8003050:	9200      	str	r2, [sp, #0]
 8003052:	4a25      	ldr	r2, [pc, #148]	; (80030e8 <FastDraw+0x144>)
 8003054:	9201      	str	r2, [sp, #4]
 8003056:	20c4      	movs	r0, #196	; 0xc4
 8003058:	21cd      	movs	r1, #205	; 0xcd
 800305a:	2200      	movs	r2, #0
 800305c:	f001 fe8a 	bl	8004d74 <PutcGenic>
 8003060:	e031      	b.n	80030c6 <FastDraw+0x122>
 8003062:	4b22      	ldr	r3, [pc, #136]	; (80030ec <FastDraw+0x148>)
 8003064:	613b      	str	r3, [r7, #16]
 8003066:	4b22      	ldr	r3, [pc, #136]	; (80030f0 <FastDraw+0x14c>)
 8003068:	60fb      	str	r3, [r7, #12]
 800306a:	1c3b      	adds	r3, r7, #0
 800306c:	3316      	adds	r3, #22
 800306e:	220b      	movs	r2, #11
 8003070:	801a      	strh	r2, [r3, #0]
 8003072:	e022      	b.n	80030ba <FastDraw+0x116>
 8003074:	1c3b      	adds	r3, r7, #0
 8003076:	3316      	adds	r3, #22
 8003078:	8819      	ldrh	r1, [r3, #0]
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	1c1a      	adds	r2, r3, #0
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	3301      	adds	r3, #1
 8003084:	613b      	str	r3, [r7, #16]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	3001      	adds	r0, #1
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	0409      	lsls	r1, r1, #16
 8003092:	1409      	asrs	r1, r1, #16
 8003094:	0412      	lsls	r2, r2, #16
 8003096:	1412      	asrs	r2, r2, #16
 8003098:	041b      	lsls	r3, r3, #16
 800309a:	141b      	asrs	r3, r3, #16
 800309c:	1db8      	adds	r0, r7, #6
 800309e:	8800      	ldrh	r0, [r0, #0]
 80030a0:	9000      	str	r0, [sp, #0]
 80030a2:	1c08      	adds	r0, r1, #0
 80030a4:	1c11      	adds	r1, r2, #0
 80030a6:	2201      	movs	r2, #1
 80030a8:	f001 fe14 	bl	8004cd4 <FillRect>
 80030ac:	1c3b      	adds	r3, r7, #0
 80030ae:	3316      	adds	r3, #22
 80030b0:	1c3a      	adds	r2, r7, #0
 80030b2:	3216      	adds	r2, #22
 80030b4:	8812      	ldrh	r2, [r2, #0]
 80030b6:	3201      	adds	r2, #1
 80030b8:	801a      	strh	r2, [r3, #0]
 80030ba:	1c3b      	adds	r3, r7, #0
 80030bc:	3316      	adds	r3, #22
 80030be:	881a      	ldrh	r2, [r3, #0]
 80030c0:	4b06      	ldr	r3, [pc, #24]	; (80030dc <FastDraw+0x138>)
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d9d6      	bls.n	8003074 <FastDraw+0xd0>
 80030c6:	46bd      	mov	sp, r7
 80030c8:	b006      	add	sp, #24
 80030ca:	bc80      	pop	{r7}
 80030cc:	bc01      	pop	{r0}
 80030ce:	4700      	bx	r0
 80030d0:	2000233c 	.word	0x2000233c
 80030d4:	200025bc 	.word	0x200025bc
 80030d8:	20002360 	.word	0x20002360
 80030dc:	00000135 	.word	0x00000135
 80030e0:	00005acb 	.word	0x00005acb
 80030e4:	20000064 	.word	0x20000064
 80030e8:	20000070 	.word	0x20000070
 80030ec:	2000248c 	.word	0x2000248c
 80030f0:	200019dc 	.word	0x200019dc

080030f4 <TIM1_CC_IRQHandler>:
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	4b51      	ldr	r3, [pc, #324]	; (8003240 <TIM1_CC_IRQHandler+0x14c>)
 80030fa:	8a1b      	ldrh	r3, [r3, #16]
 80030fc:	041b      	lsls	r3, r3, #16
 80030fe:	0c1b      	lsrs	r3, r3, #16
 8003100:	1c1a      	adds	r2, r3, #0
 8003102:	2302      	movs	r3, #2
 8003104:	4013      	ands	r3, r2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d05d      	beq.n	80031c6 <TIM1_CC_IRQHandler+0xd2>
 800310a:	4b4d      	ldr	r3, [pc, #308]	; (8003240 <TIM1_CC_IRQHandler+0x14c>)
 800310c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800310e:	041b      	lsls	r3, r3, #16
 8003110:	0c1a      	lsrs	r2, r3, #16
 8003112:	4b4c      	ldr	r3, [pc, #304]	; (8003244 <TIM1_CC_IRQHandler+0x150>)
 8003114:	821a      	strh	r2, [r3, #16]
 8003116:	4b4a      	ldr	r3, [pc, #296]	; (8003240 <TIM1_CC_IRQHandler+0x14c>)
 8003118:	4a49      	ldr	r2, [pc, #292]	; (8003240 <TIM1_CC_IRQHandler+0x14c>)
 800311a:	8992      	ldrh	r2, [r2, #12]
 800311c:	0412      	lsls	r2, r2, #16
 800311e:	0c12      	lsrs	r2, r2, #16
 8003120:	2102      	movs	r1, #2
 8003122:	438a      	bics	r2, r1
 8003124:	0412      	lsls	r2, r2, #16
 8003126:	0c12      	lsrs	r2, r2, #16
 8003128:	819a      	strh	r2, [r3, #12]
 800312a:	4b45      	ldr	r3, [pc, #276]	; (8003240 <TIM1_CC_IRQHandler+0x14c>)
 800312c:	4a44      	ldr	r2, [pc, #272]	; (8003240 <TIM1_CC_IRQHandler+0x14c>)
 800312e:	8c12      	ldrh	r2, [r2, #32]
 8003130:	0412      	lsls	r2, r2, #16
 8003132:	0c12      	lsrs	r2, r2, #16
 8003134:	2101      	movs	r1, #1
 8003136:	438a      	bics	r2, r1
 8003138:	0412      	lsls	r2, r2, #16
 800313a:	0c12      	lsrs	r2, r2, #16
 800313c:	841a      	strh	r2, [r3, #32]
 800313e:	4b40      	ldr	r3, [pc, #256]	; (8003240 <TIM1_CC_IRQHandler+0x14c>)
 8003140:	4a40      	ldr	r2, [pc, #256]	; (8003244 <TIM1_CC_IRQHandler+0x150>)
 8003142:	8a11      	ldrh	r1, [r2, #16]
 8003144:	4a40      	ldr	r2, [pc, #256]	; (8003248 <TIM1_CC_IRQHandler+0x154>)
 8003146:	8a10      	ldrh	r0, [r2, #16]
 8003148:	4a3f      	ldr	r2, [pc, #252]	; (8003248 <TIM1_CC_IRQHandler+0x154>)
 800314a:	89d2      	ldrh	r2, [r2, #14]
 800314c:	0412      	lsls	r2, r2, #16
 800314e:	0c12      	lsrs	r2, r2, #16
 8003150:	1a82      	subs	r2, r0, r2
 8003152:	0412      	lsls	r2, r2, #16
 8003154:	0c12      	lsrs	r2, r2, #16
 8003156:	188a      	adds	r2, r1, r2
 8003158:	0412      	lsls	r2, r2, #16
 800315a:	0c12      	lsrs	r2, r2, #16
 800315c:	871a      	strh	r2, [r3, #56]	; 0x38
 800315e:	4b38      	ldr	r3, [pc, #224]	; (8003240 <TIM1_CC_IRQHandler+0x14c>)
 8003160:	4a37      	ldr	r2, [pc, #220]	; (8003240 <TIM1_CC_IRQHandler+0x14c>)
 8003162:	8a12      	ldrh	r2, [r2, #16]
 8003164:	0412      	lsls	r2, r2, #16
 8003166:	0c12      	lsrs	r2, r2, #16
 8003168:	2104      	movs	r1, #4
 800316a:	438a      	bics	r2, r1
 800316c:	0412      	lsls	r2, r2, #16
 800316e:	0c12      	lsrs	r2, r2, #16
 8003170:	821a      	strh	r2, [r3, #16]
 8003172:	4b35      	ldr	r3, [pc, #212]	; (8003248 <TIM1_CC_IRQHandler+0x154>)
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	061b      	lsls	r3, r3, #24
 8003178:	161b      	asrs	r3, r3, #24
 800317a:	2b0d      	cmp	r3, #13
 800317c:	dc03      	bgt.n	8003186 <TIM1_CC_IRQHandler+0x92>
 800317e:	4b32      	ldr	r3, [pc, #200]	; (8003248 <TIM1_CC_IRQHandler+0x154>)
 8003180:	7a9b      	ldrb	r3, [r3, #10]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d009      	beq.n	800319a <TIM1_CC_IRQHandler+0xa6>
 8003186:	4b2e      	ldr	r3, [pc, #184]	; (8003240 <TIM1_CC_IRQHandler+0x14c>)
 8003188:	4a2d      	ldr	r2, [pc, #180]	; (8003240 <TIM1_CC_IRQHandler+0x14c>)
 800318a:	8992      	ldrh	r2, [r2, #12]
 800318c:	0412      	lsls	r2, r2, #16
 800318e:	0c12      	lsrs	r2, r2, #16
 8003190:	2104      	movs	r1, #4
 8003192:	430a      	orrs	r2, r1
 8003194:	0412      	lsls	r2, r2, #16
 8003196:	0c12      	lsrs	r2, r2, #16
 8003198:	819a      	strh	r2, [r3, #12]
 800319a:	4b2a      	ldr	r3, [pc, #168]	; (8003244 <TIM1_CC_IRQHandler+0x150>)
 800319c:	881b      	ldrh	r3, [r3, #0]
 800319e:	2202      	movs	r2, #2
 80031a0:	4313      	orrs	r3, r2
 80031a2:	041b      	lsls	r3, r3, #16
 80031a4:	0c1a      	lsrs	r2, r3, #16
 80031a6:	4b27      	ldr	r3, [pc, #156]	; (8003244 <TIM1_CC_IRQHandler+0x150>)
 80031a8:	801a      	strh	r2, [r3, #0]
 80031aa:	4b25      	ldr	r3, [pc, #148]	; (8003240 <TIM1_CC_IRQHandler+0x14c>)
 80031ac:	4a24      	ldr	r2, [pc, #144]	; (8003240 <TIM1_CC_IRQHandler+0x14c>)
 80031ae:	8a12      	ldrh	r2, [r2, #16]
 80031b0:	0412      	lsls	r2, r2, #16
 80031b2:	0c12      	lsrs	r2, r2, #16
 80031b4:	2102      	movs	r1, #2
 80031b6:	438a      	bics	r2, r1
 80031b8:	0412      	lsls	r2, r2, #16
 80031ba:	0c12      	lsrs	r2, r2, #16
 80031bc:	821a      	strh	r2, [r3, #16]
 80031be:	4b23      	ldr	r3, [pc, #140]	; (800324c <TIM1_CC_IRQHandler+0x158>)
 80031c0:	2280      	movs	r2, #128	; 0x80
 80031c2:	0212      	lsls	r2, r2, #8
 80031c4:	615a      	str	r2, [r3, #20]
 80031c6:	4b1e      	ldr	r3, [pc, #120]	; (8003240 <TIM1_CC_IRQHandler+0x14c>)
 80031c8:	8a1b      	ldrh	r3, [r3, #16]
 80031ca:	041b      	lsls	r3, r3, #16
 80031cc:	0c1b      	lsrs	r3, r3, #16
 80031ce:	1c1a      	adds	r2, r3, #0
 80031d0:	2304      	movs	r3, #4
 80031d2:	4013      	ands	r3, r2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d02f      	beq.n	8003238 <TIM1_CC_IRQHandler+0x144>
 80031d8:	4b1d      	ldr	r3, [pc, #116]	; (8003250 <TIM1_CC_IRQHandler+0x15c>)
 80031da:	4a1d      	ldr	r2, [pc, #116]	; (8003250 <TIM1_CC_IRQHandler+0x15c>)
 80031dc:	6812      	ldr	r2, [r2, #0]
 80031de:	2101      	movs	r1, #1
 80031e0:	438a      	bics	r2, r1
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	4b16      	ldr	r3, [pc, #88]	; (8003240 <TIM1_CC_IRQHandler+0x14c>)
 80031e6:	4a16      	ldr	r2, [pc, #88]	; (8003240 <TIM1_CC_IRQHandler+0x14c>)
 80031e8:	8a12      	ldrh	r2, [r2, #16]
 80031ea:	0412      	lsls	r2, r2, #16
 80031ec:	0c12      	lsrs	r2, r2, #16
 80031ee:	2104      	movs	r1, #4
 80031f0:	438a      	bics	r2, r1
 80031f2:	0412      	lsls	r2, r2, #16
 80031f4:	0c12      	lsrs	r2, r2, #16
 80031f6:	821a      	strh	r2, [r3, #16]
 80031f8:	4b11      	ldr	r3, [pc, #68]	; (8003240 <TIM1_CC_IRQHandler+0x14c>)
 80031fa:	4a11      	ldr	r2, [pc, #68]	; (8003240 <TIM1_CC_IRQHandler+0x14c>)
 80031fc:	8992      	ldrh	r2, [r2, #12]
 80031fe:	0412      	lsls	r2, r2, #16
 8003200:	0c12      	lsrs	r2, r2, #16
 8003202:	2104      	movs	r1, #4
 8003204:	438a      	bics	r2, r1
 8003206:	0412      	lsls	r2, r2, #16
 8003208:	0c12      	lsrs	r2, r2, #16
 800320a:	819a      	strh	r2, [r3, #12]
 800320c:	2380      	movs	r3, #128	; 0x80
 800320e:	05db      	lsls	r3, r3, #23
 8003210:	2280      	movs	r2, #128	; 0x80
 8003212:	05d2      	lsls	r2, r2, #23
 8003214:	8812      	ldrh	r2, [r2, #0]
 8003216:	0412      	lsls	r2, r2, #16
 8003218:	0c12      	lsrs	r2, r2, #16
 800321a:	2101      	movs	r1, #1
 800321c:	438a      	bics	r2, r1
 800321e:	0412      	lsls	r2, r2, #16
 8003220:	0c12      	lsrs	r2, r2, #16
 8003222:	801a      	strh	r2, [r3, #0]
 8003224:	f7fd fe00 	bl	8000e28 <ProcCapture>
 8003228:	4b06      	ldr	r3, [pc, #24]	; (8003244 <TIM1_CC_IRQHandler+0x150>)
 800322a:	881b      	ldrh	r3, [r3, #0]
 800322c:	2201      	movs	r2, #1
 800322e:	4313      	orrs	r3, r2
 8003230:	041b      	lsls	r3, r3, #16
 8003232:	0c1a      	lsrs	r2, r3, #16
 8003234:	4b03      	ldr	r3, [pc, #12]	; (8003244 <TIM1_CC_IRQHandler+0x150>)
 8003236:	801a      	strh	r2, [r3, #0]
 8003238:	46bd      	mov	sp, r7
 800323a:	bc80      	pop	{r7}
 800323c:	bc01      	pop	{r0}
 800323e:	4700      	bx	r0
 8003240:	40012c00 	.word	0x40012c00
 8003244:	2000233c 	.word	0x2000233c
 8003248:	200009c8 	.word	0x200009c8
 800324c:	40010800 	.word	0x40010800
 8003250:	40020008 	.word	0x40020008

08003254 <ADC1_2_IRQHandler>:
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
 8003258:	4b1d      	ldr	r3, [pc, #116]	; (80032d0 <ADC1_2_IRQHandler+0x7c>)
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	2302      	movs	r3, #2
 800325e:	4013      	ands	r3, r2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d030      	beq.n	80032c6 <ADC1_2_IRQHandler+0x72>
 8003264:	4b1a      	ldr	r3, [pc, #104]	; (80032d0 <ADC1_2_IRQHandler+0x7c>)
 8003266:	4a1a      	ldr	r2, [pc, #104]	; (80032d0 <ADC1_2_IRQHandler+0x7c>)
 8003268:	6812      	ldr	r2, [r2, #0]
 800326a:	2102      	movs	r1, #2
 800326c:	438a      	bics	r2, r1
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	4b18      	ldr	r3, [pc, #96]	; (80032d4 <ADC1_2_IRQHandler+0x80>)
 8003272:	695a      	ldr	r2, [r3, #20]
 8003274:	4b16      	ldr	r3, [pc, #88]	; (80032d0 <ADC1_2_IRQHandler+0x7c>)
 8003276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003278:	041b      	lsls	r3, r3, #16
 800327a:	0c1b      	lsrs	r3, r3, #16
 800327c:	8013      	strh	r3, [r2, #0]
 800327e:	4b15      	ldr	r3, [pc, #84]	; (80032d4 <ADC1_2_IRQHandler+0x80>)
 8003280:	695a      	ldr	r2, [r3, #20]
 8003282:	4b15      	ldr	r3, [pc, #84]	; (80032d8 <ADC1_2_IRQHandler+0x84>)
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	4b13      	ldr	r3, [pc, #76]	; (80032d4 <ADC1_2_IRQHandler+0x80>)
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	1c9a      	adds	r2, r3, #2
 800328c:	4b11      	ldr	r3, [pc, #68]	; (80032d4 <ADC1_2_IRQHandler+0x80>)
 800328e:	615a      	str	r2, [r3, #20]
 8003290:	4b10      	ldr	r3, [pc, #64]	; (80032d4 <ADC1_2_IRQHandler+0x80>)
 8003292:	695a      	ldr	r2, [r3, #20]
 8003294:	4b11      	ldr	r3, [pc, #68]	; (80032dc <ADC1_2_IRQHandler+0x88>)
 8003296:	68d9      	ldr	r1, [r3, #12]
 8003298:	4b11      	ldr	r3, [pc, #68]	; (80032e0 <ADC1_2_IRQHandler+0x8c>)
 800329a:	8a1b      	ldrh	r3, [r3, #16]
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	18cb      	adds	r3, r1, r3
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d308      	bcc.n	80032b6 <ADC1_2_IRQHandler+0x62>
 80032a4:	4b0b      	ldr	r3, [pc, #44]	; (80032d4 <ADC1_2_IRQHandler+0x80>)
 80032a6:	695a      	ldr	r2, [r3, #20]
 80032a8:	4b0d      	ldr	r3, [pc, #52]	; (80032e0 <ADC1_2_IRQHandler+0x8c>)
 80032aa:	8a1b      	ldrh	r3, [r3, #16]
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	425b      	negs	r3, r3
 80032b0:	18d2      	adds	r2, r2, r3
 80032b2:	4b08      	ldr	r3, [pc, #32]	; (80032d4 <ADC1_2_IRQHandler+0x80>)
 80032b4:	615a      	str	r2, [r3, #20]
 80032b6:	4b07      	ldr	r3, [pc, #28]	; (80032d4 <ADC1_2_IRQHandler+0x80>)
 80032b8:	881b      	ldrh	r3, [r3, #0]
 80032ba:	2208      	movs	r2, #8
 80032bc:	4313      	orrs	r3, r2
 80032be:	041b      	lsls	r3, r3, #16
 80032c0:	0c1a      	lsrs	r2, r3, #16
 80032c2:	4b04      	ldr	r3, [pc, #16]	; (80032d4 <ADC1_2_IRQHandler+0x80>)
 80032c4:	801a      	strh	r2, [r3, #0]
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bc80      	pop	{r7}
 80032ca:	bc01      	pop	{r0}
 80032cc:	4700      	bx	r0
 80032ce:	46c0      	nop			; (mov r8, r8)
 80032d0:	40012400 	.word	0x40012400
 80032d4:	2000233c 	.word	0x2000233c
 80032d8:	2000235c 	.word	0x2000235c
 80032dc:	40020008 	.word	0x40020008
 80032e0:	200009c8 	.word	0x200009c8

080032e4 <DMA1_Channel1_IRQHandler>:
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	4b1f      	ldr	r3, [pc, #124]	; (8003368 <DMA1_Channel1_IRQHandler+0x84>)
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	2302      	movs	r3, #2
 80032ee:	4013      	ands	r3, r2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d005      	beq.n	8003300 <DMA1_Channel1_IRQHandler+0x1c>
 80032f4:	4b1c      	ldr	r3, [pc, #112]	; (8003368 <DMA1_Channel1_IRQHandler+0x84>)
 80032f6:	4a1c      	ldr	r2, [pc, #112]	; (8003368 <DMA1_Channel1_IRQHandler+0x84>)
 80032f8:	6852      	ldr	r2, [r2, #4]
 80032fa:	2102      	movs	r1, #2
 80032fc:	430a      	orrs	r2, r1
 80032fe:	605a      	str	r2, [r3, #4]
 8003300:	4b19      	ldr	r3, [pc, #100]	; (8003368 <DMA1_Channel1_IRQHandler+0x84>)
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	2304      	movs	r3, #4
 8003306:	4013      	ands	r3, r2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d029      	beq.n	8003360 <DMA1_Channel1_IRQHandler+0x7c>
 800330c:	4b17      	ldr	r3, [pc, #92]	; (800336c <DMA1_Channel1_IRQHandler+0x88>)
 800330e:	4a17      	ldr	r2, [pc, #92]	; (800336c <DMA1_Channel1_IRQHandler+0x88>)
 8003310:	8a12      	ldrh	r2, [r2, #16]
 8003312:	0412      	lsls	r2, r2, #16
 8003314:	0c11      	lsrs	r1, r2, #16
 8003316:	4a16      	ldr	r2, [pc, #88]	; (8003370 <DMA1_Channel1_IRQHandler+0x8c>)
 8003318:	400a      	ands	r2, r1
 800331a:	0412      	lsls	r2, r2, #16
 800331c:	0c12      	lsrs	r2, r2, #16
 800331e:	821a      	strh	r2, [r3, #16]
 8003320:	4b11      	ldr	r3, [pc, #68]	; (8003368 <DMA1_Channel1_IRQHandler+0x84>)
 8003322:	4a11      	ldr	r2, [pc, #68]	; (8003368 <DMA1_Channel1_IRQHandler+0x84>)
 8003324:	6852      	ldr	r2, [r2, #4]
 8003326:	2104      	movs	r1, #4
 8003328:	430a      	orrs	r2, r1
 800332a:	605a      	str	r2, [r3, #4]
 800332c:	4b11      	ldr	r3, [pc, #68]	; (8003374 <DMA1_Channel1_IRQHandler+0x90>)
 800332e:	4a11      	ldr	r2, [pc, #68]	; (8003374 <DMA1_Channel1_IRQHandler+0x90>)
 8003330:	6812      	ldr	r2, [r2, #0]
 8003332:	2104      	movs	r1, #4
 8003334:	438a      	bics	r2, r1
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	4b0c      	ldr	r3, [pc, #48]	; (800336c <DMA1_Channel1_IRQHandler+0x88>)
 800333a:	4a0c      	ldr	r2, [pc, #48]	; (800336c <DMA1_Channel1_IRQHandler+0x88>)
 800333c:	8992      	ldrh	r2, [r2, #12]
 800333e:	0412      	lsls	r2, r2, #16
 8003340:	0c12      	lsrs	r2, r2, #16
 8003342:	2102      	movs	r1, #2
 8003344:	430a      	orrs	r2, r1
 8003346:	0412      	lsls	r2, r2, #16
 8003348:	0c12      	lsrs	r2, r2, #16
 800334a:	819a      	strh	r2, [r3, #12]
 800334c:	4b07      	ldr	r3, [pc, #28]	; (800336c <DMA1_Channel1_IRQHandler+0x88>)
 800334e:	4a07      	ldr	r2, [pc, #28]	; (800336c <DMA1_Channel1_IRQHandler+0x88>)
 8003350:	8c12      	ldrh	r2, [r2, #32]
 8003352:	0412      	lsls	r2, r2, #16
 8003354:	0c12      	lsrs	r2, r2, #16
 8003356:	2101      	movs	r1, #1
 8003358:	430a      	orrs	r2, r1
 800335a:	0412      	lsls	r2, r2, #16
 800335c:	0c12      	lsrs	r2, r2, #16
 800335e:	841a      	strh	r2, [r3, #32]
 8003360:	46bd      	mov	sp, r7
 8003362:	bc80      	pop	{r7}
 8003364:	bc01      	pop	{r0}
 8003366:	4700      	bx	r0
 8003368:	40020000 	.word	0x40020000
 800336c:	40012c00 	.word	0x40012c00
 8003370:	fffffdfd 	.word	0xfffffdfd
 8003374:	40020008 	.word	0x40020008

08003378 <DeadLoop>:
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
 800337c:	e7fe      	b.n	800337c <DeadLoop+0x4>
 800337e:	46c0      	nop			; (mov r8, r8)

08003380 <__udivsi3>:
 8003380:	2900      	cmp	r1, #0
 8003382:	d002      	beq.n	800338a <__udivsi3+0xa>
 8003384:	fbb0 f0f1 	udiv	r0, r0, r1
 8003388:	4770      	bx	lr
 800338a:	b108      	cbz	r0, 8003390 <__udivsi3+0x10>
 800338c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003390:	f000 b808 	b.w	80033a4 <__aeabi_idiv0>

08003394 <__aeabi_uidivmod>:
 8003394:	2900      	cmp	r1, #0
 8003396:	d0f8      	beq.n	800338a <__udivsi3+0xa>
 8003398:	4602      	mov	r2, r0
 800339a:	fbb0 f0f1 	udiv	r0, r0, r1
 800339e:	fb00 2111 	mls	r1, r0, r1, r2
 80033a2:	4770      	bx	lr

080033a4 <__aeabi_idiv0>:
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop

080033a8 <__aeabi_drsub>:
 80033a8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80033ac:	e002      	b.n	80033b4 <__adddf3>
 80033ae:	bf00      	nop

080033b0 <__aeabi_dsub>:
 80033b0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080033b4 <__adddf3>:
 80033b4:	b530      	push	{r4, r5, lr}
 80033b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80033ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80033be:	ea94 0f05 	teq	r4, r5
 80033c2:	bf08      	it	eq
 80033c4:	ea90 0f02 	teqeq	r0, r2
 80033c8:	bf1f      	itttt	ne
 80033ca:	ea54 0c00 	orrsne.w	ip, r4, r0
 80033ce:	ea55 0c02 	orrsne.w	ip, r5, r2
 80033d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80033d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80033da:	f000 80e2 	beq.w	80035a2 <__adddf3+0x1ee>
 80033de:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80033e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80033e6:	bfb8      	it	lt
 80033e8:	426d      	neglt	r5, r5
 80033ea:	dd0c      	ble.n	8003406 <__adddf3+0x52>
 80033ec:	442c      	add	r4, r5
 80033ee:	ea80 0202 	eor.w	r2, r0, r2
 80033f2:	ea81 0303 	eor.w	r3, r1, r3
 80033f6:	ea82 0000 	eor.w	r0, r2, r0
 80033fa:	ea83 0101 	eor.w	r1, r3, r1
 80033fe:	ea80 0202 	eor.w	r2, r0, r2
 8003402:	ea81 0303 	eor.w	r3, r1, r3
 8003406:	2d36      	cmp	r5, #54	; 0x36
 8003408:	bf88      	it	hi
 800340a:	bd30      	pophi	{r4, r5, pc}
 800340c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8003410:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8003414:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8003418:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800341c:	d002      	beq.n	8003424 <__adddf3+0x70>
 800341e:	4240      	negs	r0, r0
 8003420:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003424:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8003428:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800342c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8003430:	d002      	beq.n	8003438 <__adddf3+0x84>
 8003432:	4252      	negs	r2, r2
 8003434:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8003438:	ea94 0f05 	teq	r4, r5
 800343c:	f000 80a7 	beq.w	800358e <__adddf3+0x1da>
 8003440:	f1a4 0401 	sub.w	r4, r4, #1
 8003444:	f1d5 0e20 	rsbs	lr, r5, #32
 8003448:	db0d      	blt.n	8003466 <__adddf3+0xb2>
 800344a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800344e:	fa22 f205 	lsr.w	r2, r2, r5
 8003452:	1880      	adds	r0, r0, r2
 8003454:	f141 0100 	adc.w	r1, r1, #0
 8003458:	fa03 f20e 	lsl.w	r2, r3, lr
 800345c:	1880      	adds	r0, r0, r2
 800345e:	fa43 f305 	asr.w	r3, r3, r5
 8003462:	4159      	adcs	r1, r3
 8003464:	e00e      	b.n	8003484 <__adddf3+0xd0>
 8003466:	f1a5 0520 	sub.w	r5, r5, #32
 800346a:	f10e 0e20 	add.w	lr, lr, #32
 800346e:	2a01      	cmp	r2, #1
 8003470:	fa03 fc0e 	lsl.w	ip, r3, lr
 8003474:	bf28      	it	cs
 8003476:	f04c 0c02 	orrcs.w	ip, ip, #2
 800347a:	fa43 f305 	asr.w	r3, r3, r5
 800347e:	18c0      	adds	r0, r0, r3
 8003480:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8003484:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003488:	d507      	bpl.n	800349a <__adddf3+0xe6>
 800348a:	f04f 0e00 	mov.w	lr, #0
 800348e:	f1dc 0c00 	rsbs	ip, ip, #0
 8003492:	eb7e 0000 	sbcs.w	r0, lr, r0
 8003496:	eb6e 0101 	sbc.w	r1, lr, r1
 800349a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800349e:	d31b      	bcc.n	80034d8 <__adddf3+0x124>
 80034a0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80034a4:	d30c      	bcc.n	80034c0 <__adddf3+0x10c>
 80034a6:	0849      	lsrs	r1, r1, #1
 80034a8:	ea5f 0030 	movs.w	r0, r0, rrx
 80034ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80034b0:	f104 0401 	add.w	r4, r4, #1
 80034b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80034b8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80034bc:	f080 809a 	bcs.w	80035f4 <__adddf3+0x240>
 80034c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80034c4:	bf08      	it	eq
 80034c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80034ca:	f150 0000 	adcs.w	r0, r0, #0
 80034ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80034d2:	ea41 0105 	orr.w	r1, r1, r5
 80034d6:	bd30      	pop	{r4, r5, pc}
 80034d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80034dc:	4140      	adcs	r0, r0
 80034de:	eb41 0101 	adc.w	r1, r1, r1
 80034e2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80034e6:	f1a4 0401 	sub.w	r4, r4, #1
 80034ea:	d1e9      	bne.n	80034c0 <__adddf3+0x10c>
 80034ec:	f091 0f00 	teq	r1, #0
 80034f0:	bf04      	itt	eq
 80034f2:	4601      	moveq	r1, r0
 80034f4:	2000      	moveq	r0, #0
 80034f6:	fab1 f381 	clz	r3, r1
 80034fa:	bf08      	it	eq
 80034fc:	3320      	addeq	r3, #32
 80034fe:	f1a3 030b 	sub.w	r3, r3, #11
 8003502:	f1b3 0220 	subs.w	r2, r3, #32
 8003506:	da0c      	bge.n	8003522 <__adddf3+0x16e>
 8003508:	320c      	adds	r2, #12
 800350a:	dd08      	ble.n	800351e <__adddf3+0x16a>
 800350c:	f102 0c14 	add.w	ip, r2, #20
 8003510:	f1c2 020c 	rsb	r2, r2, #12
 8003514:	fa01 f00c 	lsl.w	r0, r1, ip
 8003518:	fa21 f102 	lsr.w	r1, r1, r2
 800351c:	e00c      	b.n	8003538 <__adddf3+0x184>
 800351e:	f102 0214 	add.w	r2, r2, #20
 8003522:	bfd8      	it	le
 8003524:	f1c2 0c20 	rsble	ip, r2, #32
 8003528:	fa01 f102 	lsl.w	r1, r1, r2
 800352c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8003530:	bfdc      	itt	le
 8003532:	ea41 010c 	orrle.w	r1, r1, ip
 8003536:	4090      	lslle	r0, r2
 8003538:	1ae4      	subs	r4, r4, r3
 800353a:	bfa2      	ittt	ge
 800353c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8003540:	4329      	orrge	r1, r5
 8003542:	bd30      	popge	{r4, r5, pc}
 8003544:	ea6f 0404 	mvn.w	r4, r4
 8003548:	3c1f      	subs	r4, #31
 800354a:	da1c      	bge.n	8003586 <__adddf3+0x1d2>
 800354c:	340c      	adds	r4, #12
 800354e:	dc0e      	bgt.n	800356e <__adddf3+0x1ba>
 8003550:	f104 0414 	add.w	r4, r4, #20
 8003554:	f1c4 0220 	rsb	r2, r4, #32
 8003558:	fa20 f004 	lsr.w	r0, r0, r4
 800355c:	fa01 f302 	lsl.w	r3, r1, r2
 8003560:	ea40 0003 	orr.w	r0, r0, r3
 8003564:	fa21 f304 	lsr.w	r3, r1, r4
 8003568:	ea45 0103 	orr.w	r1, r5, r3
 800356c:	bd30      	pop	{r4, r5, pc}
 800356e:	f1c4 040c 	rsb	r4, r4, #12
 8003572:	f1c4 0220 	rsb	r2, r4, #32
 8003576:	fa20 f002 	lsr.w	r0, r0, r2
 800357a:	fa01 f304 	lsl.w	r3, r1, r4
 800357e:	ea40 0003 	orr.w	r0, r0, r3
 8003582:	4629      	mov	r1, r5
 8003584:	bd30      	pop	{r4, r5, pc}
 8003586:	fa21 f004 	lsr.w	r0, r1, r4
 800358a:	4629      	mov	r1, r5
 800358c:	bd30      	pop	{r4, r5, pc}
 800358e:	f094 0f00 	teq	r4, #0
 8003592:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8003596:	bf06      	itte	eq
 8003598:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800359c:	3401      	addeq	r4, #1
 800359e:	3d01      	subne	r5, #1
 80035a0:	e74e      	b.n	8003440 <__adddf3+0x8c>
 80035a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80035a6:	bf18      	it	ne
 80035a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80035ac:	d029      	beq.n	8003602 <__adddf3+0x24e>
 80035ae:	ea94 0f05 	teq	r4, r5
 80035b2:	bf08      	it	eq
 80035b4:	ea90 0f02 	teqeq	r0, r2
 80035b8:	d005      	beq.n	80035c6 <__adddf3+0x212>
 80035ba:	ea54 0c00 	orrs.w	ip, r4, r0
 80035be:	bf04      	itt	eq
 80035c0:	4619      	moveq	r1, r3
 80035c2:	4610      	moveq	r0, r2
 80035c4:	bd30      	pop	{r4, r5, pc}
 80035c6:	ea91 0f03 	teq	r1, r3
 80035ca:	bf1e      	ittt	ne
 80035cc:	2100      	movne	r1, #0
 80035ce:	2000      	movne	r0, #0
 80035d0:	bd30      	popne	{r4, r5, pc}
 80035d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80035d6:	d105      	bne.n	80035e4 <__adddf3+0x230>
 80035d8:	0040      	lsls	r0, r0, #1
 80035da:	4149      	adcs	r1, r1
 80035dc:	bf28      	it	cs
 80035de:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80035e2:	bd30      	pop	{r4, r5, pc}
 80035e4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80035e8:	bf3c      	itt	cc
 80035ea:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80035ee:	bd30      	popcc	{r4, r5, pc}
 80035f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80035f4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80035f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80035fc:	f04f 0000 	mov.w	r0, #0
 8003600:	bd30      	pop	{r4, r5, pc}
 8003602:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8003606:	bf1a      	itte	ne
 8003608:	4619      	movne	r1, r3
 800360a:	4610      	movne	r0, r2
 800360c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8003610:	bf1c      	itt	ne
 8003612:	460b      	movne	r3, r1
 8003614:	4602      	movne	r2, r0
 8003616:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800361a:	bf06      	itte	eq
 800361c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8003620:	ea91 0f03 	teqeq	r1, r3
 8003624:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8003628:	bd30      	pop	{r4, r5, pc}
 800362a:	bf00      	nop

0800362c <__aeabi_ui2d>:
 800362c:	f090 0f00 	teq	r0, #0
 8003630:	bf04      	itt	eq
 8003632:	2100      	moveq	r1, #0
 8003634:	4770      	bxeq	lr
 8003636:	b530      	push	{r4, r5, lr}
 8003638:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800363c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003640:	f04f 0500 	mov.w	r5, #0
 8003644:	f04f 0100 	mov.w	r1, #0
 8003648:	e750      	b.n	80034ec <__adddf3+0x138>
 800364a:	bf00      	nop

0800364c <__aeabi_i2d>:
 800364c:	f090 0f00 	teq	r0, #0
 8003650:	bf04      	itt	eq
 8003652:	2100      	moveq	r1, #0
 8003654:	4770      	bxeq	lr
 8003656:	b530      	push	{r4, r5, lr}
 8003658:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800365c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003660:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8003664:	bf48      	it	mi
 8003666:	4240      	negmi	r0, r0
 8003668:	f04f 0100 	mov.w	r1, #0
 800366c:	e73e      	b.n	80034ec <__adddf3+0x138>
 800366e:	bf00      	nop

08003670 <__aeabi_f2d>:
 8003670:	0042      	lsls	r2, r0, #1
 8003672:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8003676:	ea4f 0131 	mov.w	r1, r1, rrx
 800367a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800367e:	bf1f      	itttt	ne
 8003680:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8003684:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8003688:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800368c:	4770      	bxne	lr
 800368e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8003692:	bf08      	it	eq
 8003694:	4770      	bxeq	lr
 8003696:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800369a:	bf04      	itt	eq
 800369c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80036a0:	4770      	bxeq	lr
 80036a2:	b530      	push	{r4, r5, lr}
 80036a4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80036a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80036ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80036b0:	e71c      	b.n	80034ec <__adddf3+0x138>
 80036b2:	bf00      	nop

080036b4 <__aeabi_ul2d>:
 80036b4:	ea50 0201 	orrs.w	r2, r0, r1
 80036b8:	bf08      	it	eq
 80036ba:	4770      	bxeq	lr
 80036bc:	b530      	push	{r4, r5, lr}
 80036be:	f04f 0500 	mov.w	r5, #0
 80036c2:	e00a      	b.n	80036da <__aeabi_l2d+0x16>

080036c4 <__aeabi_l2d>:
 80036c4:	ea50 0201 	orrs.w	r2, r0, r1
 80036c8:	bf08      	it	eq
 80036ca:	4770      	bxeq	lr
 80036cc:	b530      	push	{r4, r5, lr}
 80036ce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80036d2:	d502      	bpl.n	80036da <__aeabi_l2d+0x16>
 80036d4:	4240      	negs	r0, r0
 80036d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80036da:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80036de:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80036e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80036e6:	f43f aed8 	beq.w	800349a <__adddf3+0xe6>
 80036ea:	f04f 0203 	mov.w	r2, #3
 80036ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80036f2:	bf18      	it	ne
 80036f4:	3203      	addne	r2, #3
 80036f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80036fa:	bf18      	it	ne
 80036fc:	3203      	addne	r2, #3
 80036fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8003702:	f1c2 0320 	rsb	r3, r2, #32
 8003706:	fa00 fc03 	lsl.w	ip, r0, r3
 800370a:	fa20 f002 	lsr.w	r0, r0, r2
 800370e:	fa01 fe03 	lsl.w	lr, r1, r3
 8003712:	ea40 000e 	orr.w	r0, r0, lr
 8003716:	fa21 f102 	lsr.w	r1, r1, r2
 800371a:	4414      	add	r4, r2
 800371c:	e6bd      	b.n	800349a <__adddf3+0xe6>
 800371e:	bf00      	nop

08003720 <__aeabi_dmul>:
 8003720:	b570      	push	{r4, r5, r6, lr}
 8003722:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8003726:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800372a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800372e:	bf1d      	ittte	ne
 8003730:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8003734:	ea94 0f0c 	teqne	r4, ip
 8003738:	ea95 0f0c 	teqne	r5, ip
 800373c:	f000 f8de 	bleq	80038fc <__aeabi_dmul+0x1dc>
 8003740:	442c      	add	r4, r5
 8003742:	ea81 0603 	eor.w	r6, r1, r3
 8003746:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800374a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800374e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8003752:	bf18      	it	ne
 8003754:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8003758:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800375c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003760:	d038      	beq.n	80037d4 <__aeabi_dmul+0xb4>
 8003762:	fba0 ce02 	umull	ip, lr, r0, r2
 8003766:	f04f 0500 	mov.w	r5, #0
 800376a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800376e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8003772:	fbe0 e503 	umlal	lr, r5, r0, r3
 8003776:	f04f 0600 	mov.w	r6, #0
 800377a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800377e:	f09c 0f00 	teq	ip, #0
 8003782:	bf18      	it	ne
 8003784:	f04e 0e01 	orrne.w	lr, lr, #1
 8003788:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800378c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8003790:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8003794:	d204      	bcs.n	80037a0 <__aeabi_dmul+0x80>
 8003796:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800379a:	416d      	adcs	r5, r5
 800379c:	eb46 0606 	adc.w	r6, r6, r6
 80037a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80037a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80037a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80037ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80037b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80037b4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80037b8:	bf88      	it	hi
 80037ba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80037be:	d81e      	bhi.n	80037fe <__aeabi_dmul+0xde>
 80037c0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80037c4:	bf08      	it	eq
 80037c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80037ca:	f150 0000 	adcs.w	r0, r0, #0
 80037ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80037d2:	bd70      	pop	{r4, r5, r6, pc}
 80037d4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80037d8:	ea46 0101 	orr.w	r1, r6, r1
 80037dc:	ea40 0002 	orr.w	r0, r0, r2
 80037e0:	ea81 0103 	eor.w	r1, r1, r3
 80037e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80037e8:	bfc2      	ittt	gt
 80037ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80037ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80037f2:	bd70      	popgt	{r4, r5, r6, pc}
 80037f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80037f8:	f04f 0e00 	mov.w	lr, #0
 80037fc:	3c01      	subs	r4, #1
 80037fe:	f300 80ab 	bgt.w	8003958 <__aeabi_dmul+0x238>
 8003802:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8003806:	bfde      	ittt	le
 8003808:	2000      	movle	r0, #0
 800380a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800380e:	bd70      	pople	{r4, r5, r6, pc}
 8003810:	f1c4 0400 	rsb	r4, r4, #0
 8003814:	3c20      	subs	r4, #32
 8003816:	da35      	bge.n	8003884 <__aeabi_dmul+0x164>
 8003818:	340c      	adds	r4, #12
 800381a:	dc1b      	bgt.n	8003854 <__aeabi_dmul+0x134>
 800381c:	f104 0414 	add.w	r4, r4, #20
 8003820:	f1c4 0520 	rsb	r5, r4, #32
 8003824:	fa00 f305 	lsl.w	r3, r0, r5
 8003828:	fa20 f004 	lsr.w	r0, r0, r4
 800382c:	fa01 f205 	lsl.w	r2, r1, r5
 8003830:	ea40 0002 	orr.w	r0, r0, r2
 8003834:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8003838:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800383c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8003840:	fa21 f604 	lsr.w	r6, r1, r4
 8003844:	eb42 0106 	adc.w	r1, r2, r6
 8003848:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800384c:	bf08      	it	eq
 800384e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003852:	bd70      	pop	{r4, r5, r6, pc}
 8003854:	f1c4 040c 	rsb	r4, r4, #12
 8003858:	f1c4 0520 	rsb	r5, r4, #32
 800385c:	fa00 f304 	lsl.w	r3, r0, r4
 8003860:	fa20 f005 	lsr.w	r0, r0, r5
 8003864:	fa01 f204 	lsl.w	r2, r1, r4
 8003868:	ea40 0002 	orr.w	r0, r0, r2
 800386c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003870:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8003874:	f141 0100 	adc.w	r1, r1, #0
 8003878:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800387c:	bf08      	it	eq
 800387e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003882:	bd70      	pop	{r4, r5, r6, pc}
 8003884:	f1c4 0520 	rsb	r5, r4, #32
 8003888:	fa00 f205 	lsl.w	r2, r0, r5
 800388c:	ea4e 0e02 	orr.w	lr, lr, r2
 8003890:	fa20 f304 	lsr.w	r3, r0, r4
 8003894:	fa01 f205 	lsl.w	r2, r1, r5
 8003898:	ea43 0302 	orr.w	r3, r3, r2
 800389c:	fa21 f004 	lsr.w	r0, r1, r4
 80038a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80038a4:	fa21 f204 	lsr.w	r2, r1, r4
 80038a8:	ea20 0002 	bic.w	r0, r0, r2
 80038ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80038b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80038b4:	bf08      	it	eq
 80038b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80038ba:	bd70      	pop	{r4, r5, r6, pc}
 80038bc:	f094 0f00 	teq	r4, #0
 80038c0:	d10f      	bne.n	80038e2 <__aeabi_dmul+0x1c2>
 80038c2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80038c6:	0040      	lsls	r0, r0, #1
 80038c8:	eb41 0101 	adc.w	r1, r1, r1
 80038cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80038d0:	bf08      	it	eq
 80038d2:	3c01      	subeq	r4, #1
 80038d4:	d0f7      	beq.n	80038c6 <__aeabi_dmul+0x1a6>
 80038d6:	ea41 0106 	orr.w	r1, r1, r6
 80038da:	f095 0f00 	teq	r5, #0
 80038de:	bf18      	it	ne
 80038e0:	4770      	bxne	lr
 80038e2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80038e6:	0052      	lsls	r2, r2, #1
 80038e8:	eb43 0303 	adc.w	r3, r3, r3
 80038ec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80038f0:	bf08      	it	eq
 80038f2:	3d01      	subeq	r5, #1
 80038f4:	d0f7      	beq.n	80038e6 <__aeabi_dmul+0x1c6>
 80038f6:	ea43 0306 	orr.w	r3, r3, r6
 80038fa:	4770      	bx	lr
 80038fc:	ea94 0f0c 	teq	r4, ip
 8003900:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8003904:	bf18      	it	ne
 8003906:	ea95 0f0c 	teqne	r5, ip
 800390a:	d00c      	beq.n	8003926 <__aeabi_dmul+0x206>
 800390c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003910:	bf18      	it	ne
 8003912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8003916:	d1d1      	bne.n	80038bc <__aeabi_dmul+0x19c>
 8003918:	ea81 0103 	eor.w	r1, r1, r3
 800391c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003920:	f04f 0000 	mov.w	r0, #0
 8003924:	bd70      	pop	{r4, r5, r6, pc}
 8003926:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800392a:	bf06      	itte	eq
 800392c:	4610      	moveq	r0, r2
 800392e:	4619      	moveq	r1, r3
 8003930:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8003934:	d019      	beq.n	800396a <__aeabi_dmul+0x24a>
 8003936:	ea94 0f0c 	teq	r4, ip
 800393a:	d102      	bne.n	8003942 <__aeabi_dmul+0x222>
 800393c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8003940:	d113      	bne.n	800396a <__aeabi_dmul+0x24a>
 8003942:	ea95 0f0c 	teq	r5, ip
 8003946:	d105      	bne.n	8003954 <__aeabi_dmul+0x234>
 8003948:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800394c:	bf1c      	itt	ne
 800394e:	4610      	movne	r0, r2
 8003950:	4619      	movne	r1, r3
 8003952:	d10a      	bne.n	800396a <__aeabi_dmul+0x24a>
 8003954:	ea81 0103 	eor.w	r1, r1, r3
 8003958:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800395c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8003960:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003964:	f04f 0000 	mov.w	r0, #0
 8003968:	bd70      	pop	{r4, r5, r6, pc}
 800396a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800396e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8003972:	bd70      	pop	{r4, r5, r6, pc}

08003974 <__aeabi_ddiv>:
 8003974:	b570      	push	{r4, r5, r6, lr}
 8003976:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800397a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800397e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8003982:	bf1d      	ittte	ne
 8003984:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8003988:	ea94 0f0c 	teqne	r4, ip
 800398c:	ea95 0f0c 	teqne	r5, ip
 8003990:	f000 f8a7 	bleq	8003ae2 <__aeabi_ddiv+0x16e>
 8003994:	eba4 0405 	sub.w	r4, r4, r5
 8003998:	ea81 0e03 	eor.w	lr, r1, r3
 800399c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80039a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80039a4:	f000 8088 	beq.w	8003ab8 <__aeabi_ddiv+0x144>
 80039a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80039ac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80039b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80039b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80039b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80039bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80039c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80039c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80039c8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80039cc:	429d      	cmp	r5, r3
 80039ce:	bf08      	it	eq
 80039d0:	4296      	cmpeq	r6, r2
 80039d2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80039d6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80039da:	d202      	bcs.n	80039e2 <__aeabi_ddiv+0x6e>
 80039dc:	085b      	lsrs	r3, r3, #1
 80039de:	ea4f 0232 	mov.w	r2, r2, rrx
 80039e2:	1ab6      	subs	r6, r6, r2
 80039e4:	eb65 0503 	sbc.w	r5, r5, r3
 80039e8:	085b      	lsrs	r3, r3, #1
 80039ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80039ee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80039f2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80039f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80039fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80039fe:	bf22      	ittt	cs
 8003a00:	1ab6      	subcs	r6, r6, r2
 8003a02:	4675      	movcs	r5, lr
 8003a04:	ea40 000c 	orrcs.w	r0, r0, ip
 8003a08:	085b      	lsrs	r3, r3, #1
 8003a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8003a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8003a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003a16:	bf22      	ittt	cs
 8003a18:	1ab6      	subcs	r6, r6, r2
 8003a1a:	4675      	movcs	r5, lr
 8003a1c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8003a20:	085b      	lsrs	r3, r3, #1
 8003a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8003a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8003a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003a2e:	bf22      	ittt	cs
 8003a30:	1ab6      	subcs	r6, r6, r2
 8003a32:	4675      	movcs	r5, lr
 8003a34:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8003a38:	085b      	lsrs	r3, r3, #1
 8003a3a:	ea4f 0232 	mov.w	r2, r2, rrx
 8003a3e:	ebb6 0e02 	subs.w	lr, r6, r2
 8003a42:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003a46:	bf22      	ittt	cs
 8003a48:	1ab6      	subcs	r6, r6, r2
 8003a4a:	4675      	movcs	r5, lr
 8003a4c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8003a50:	ea55 0e06 	orrs.w	lr, r5, r6
 8003a54:	d018      	beq.n	8003a88 <__aeabi_ddiv+0x114>
 8003a56:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8003a5a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8003a5e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8003a62:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8003a66:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8003a6a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8003a6e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8003a72:	d1c0      	bne.n	80039f6 <__aeabi_ddiv+0x82>
 8003a74:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003a78:	d10b      	bne.n	8003a92 <__aeabi_ddiv+0x11e>
 8003a7a:	ea41 0100 	orr.w	r1, r1, r0
 8003a7e:	f04f 0000 	mov.w	r0, #0
 8003a82:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8003a86:	e7b6      	b.n	80039f6 <__aeabi_ddiv+0x82>
 8003a88:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003a8c:	bf04      	itt	eq
 8003a8e:	4301      	orreq	r1, r0
 8003a90:	2000      	moveq	r0, #0
 8003a92:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8003a96:	bf88      	it	hi
 8003a98:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8003a9c:	f63f aeaf 	bhi.w	80037fe <__aeabi_dmul+0xde>
 8003aa0:	ebb5 0c03 	subs.w	ip, r5, r3
 8003aa4:	bf04      	itt	eq
 8003aa6:	ebb6 0c02 	subseq.w	ip, r6, r2
 8003aaa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8003aae:	f150 0000 	adcs.w	r0, r0, #0
 8003ab2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003ab6:	bd70      	pop	{r4, r5, r6, pc}
 8003ab8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8003abc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8003ac0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8003ac4:	bfc2      	ittt	gt
 8003ac6:	ebd4 050c 	rsbsgt	r5, r4, ip
 8003aca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8003ace:	bd70      	popgt	{r4, r5, r6, pc}
 8003ad0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003ad4:	f04f 0e00 	mov.w	lr, #0
 8003ad8:	3c01      	subs	r4, #1
 8003ada:	e690      	b.n	80037fe <__aeabi_dmul+0xde>
 8003adc:	ea45 0e06 	orr.w	lr, r5, r6
 8003ae0:	e68d      	b.n	80037fe <__aeabi_dmul+0xde>
 8003ae2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8003ae6:	ea94 0f0c 	teq	r4, ip
 8003aea:	bf08      	it	eq
 8003aec:	ea95 0f0c 	teqeq	r5, ip
 8003af0:	f43f af3b 	beq.w	800396a <__aeabi_dmul+0x24a>
 8003af4:	ea94 0f0c 	teq	r4, ip
 8003af8:	d10a      	bne.n	8003b10 <__aeabi_ddiv+0x19c>
 8003afa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8003afe:	f47f af34 	bne.w	800396a <__aeabi_dmul+0x24a>
 8003b02:	ea95 0f0c 	teq	r5, ip
 8003b06:	f47f af25 	bne.w	8003954 <__aeabi_dmul+0x234>
 8003b0a:	4610      	mov	r0, r2
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	e72c      	b.n	800396a <__aeabi_dmul+0x24a>
 8003b10:	ea95 0f0c 	teq	r5, ip
 8003b14:	d106      	bne.n	8003b24 <__aeabi_ddiv+0x1b0>
 8003b16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8003b1a:	f43f aefd 	beq.w	8003918 <__aeabi_dmul+0x1f8>
 8003b1e:	4610      	mov	r0, r2
 8003b20:	4619      	mov	r1, r3
 8003b22:	e722      	b.n	800396a <__aeabi_dmul+0x24a>
 8003b24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003b28:	bf18      	it	ne
 8003b2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8003b2e:	f47f aec5 	bne.w	80038bc <__aeabi_dmul+0x19c>
 8003b32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8003b36:	f47f af0d 	bne.w	8003954 <__aeabi_dmul+0x234>
 8003b3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8003b3e:	f47f aeeb 	bne.w	8003918 <__aeabi_dmul+0x1f8>
 8003b42:	e712      	b.n	800396a <__aeabi_dmul+0x24a>

08003b44 <__aeabi_d2iz>:
 8003b44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8003b48:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8003b4c:	d215      	bcs.n	8003b7a <__aeabi_d2iz+0x36>
 8003b4e:	d511      	bpl.n	8003b74 <__aeabi_d2iz+0x30>
 8003b50:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8003b54:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8003b58:	d912      	bls.n	8003b80 <__aeabi_d2iz+0x3c>
 8003b5a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8003b5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b62:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8003b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8003b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8003b6e:	bf18      	it	ne
 8003b70:	4240      	negne	r0, r0
 8003b72:	4770      	bx	lr
 8003b74:	f04f 0000 	mov.w	r0, #0
 8003b78:	4770      	bx	lr
 8003b7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8003b7e:	d105      	bne.n	8003b8c <__aeabi_d2iz+0x48>
 8003b80:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8003b84:	bf08      	it	eq
 8003b86:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8003b8a:	4770      	bx	lr
 8003b8c:	f04f 0000 	mov.w	r0, #0
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop

08003b94 <__aeabi_d2f>:
 8003b94:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8003b98:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8003b9c:	bf24      	itt	cs
 8003b9e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8003ba2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8003ba6:	d90d      	bls.n	8003bc4 <__aeabi_d2f+0x30>
 8003ba8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8003bac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8003bb0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8003bb4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8003bb8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8003bbc:	bf08      	it	eq
 8003bbe:	f020 0001 	biceq.w	r0, r0, #1
 8003bc2:	4770      	bx	lr
 8003bc4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8003bc8:	d121      	bne.n	8003c0e <__aeabi_d2f+0x7a>
 8003bca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8003bce:	bfbc      	itt	lt
 8003bd0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8003bd4:	4770      	bxlt	lr
 8003bd6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003bda:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8003bde:	f1c2 0218 	rsb	r2, r2, #24
 8003be2:	f1c2 0c20 	rsb	ip, r2, #32
 8003be6:	fa10 f30c 	lsls.w	r3, r0, ip
 8003bea:	fa20 f002 	lsr.w	r0, r0, r2
 8003bee:	bf18      	it	ne
 8003bf0:	f040 0001 	orrne.w	r0, r0, #1
 8003bf4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8003bf8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8003bfc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8003c00:	ea40 000c 	orr.w	r0, r0, ip
 8003c04:	fa23 f302 	lsr.w	r3, r3, r2
 8003c08:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003c0c:	e7cc      	b.n	8003ba8 <__aeabi_d2f+0x14>
 8003c0e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8003c12:	d107      	bne.n	8003c24 <__aeabi_d2f+0x90>
 8003c14:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8003c18:	bf1e      	ittt	ne
 8003c1a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8003c1e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8003c22:	4770      	bxne	lr
 8003c24:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8003c28:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8003c2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop

08003c34 <__aeabi_frsub>:
 8003c34:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8003c38:	e002      	b.n	8003c40 <__addsf3>
 8003c3a:	bf00      	nop

08003c3c <__aeabi_fsub>:
 8003c3c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08003c40 <__addsf3>:
 8003c40:	0042      	lsls	r2, r0, #1
 8003c42:	bf1f      	itttt	ne
 8003c44:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8003c48:	ea92 0f03 	teqne	r2, r3
 8003c4c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8003c50:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8003c54:	d06a      	beq.n	8003d2c <__addsf3+0xec>
 8003c56:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8003c5a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8003c5e:	bfc1      	itttt	gt
 8003c60:	18d2      	addgt	r2, r2, r3
 8003c62:	4041      	eorgt	r1, r0
 8003c64:	4048      	eorgt	r0, r1
 8003c66:	4041      	eorgt	r1, r0
 8003c68:	bfb8      	it	lt
 8003c6a:	425b      	neglt	r3, r3
 8003c6c:	2b19      	cmp	r3, #25
 8003c6e:	bf88      	it	hi
 8003c70:	4770      	bxhi	lr
 8003c72:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8003c76:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8003c7a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8003c7e:	bf18      	it	ne
 8003c80:	4240      	negne	r0, r0
 8003c82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8003c86:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8003c8a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8003c8e:	bf18      	it	ne
 8003c90:	4249      	negne	r1, r1
 8003c92:	ea92 0f03 	teq	r2, r3
 8003c96:	d03f      	beq.n	8003d18 <__addsf3+0xd8>
 8003c98:	f1a2 0201 	sub.w	r2, r2, #1
 8003c9c:	fa41 fc03 	asr.w	ip, r1, r3
 8003ca0:	eb10 000c 	adds.w	r0, r0, ip
 8003ca4:	f1c3 0320 	rsb	r3, r3, #32
 8003ca8:	fa01 f103 	lsl.w	r1, r1, r3
 8003cac:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8003cb0:	d502      	bpl.n	8003cb8 <__addsf3+0x78>
 8003cb2:	4249      	negs	r1, r1
 8003cb4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8003cb8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8003cbc:	d313      	bcc.n	8003ce6 <__addsf3+0xa6>
 8003cbe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003cc2:	d306      	bcc.n	8003cd2 <__addsf3+0x92>
 8003cc4:	0840      	lsrs	r0, r0, #1
 8003cc6:	ea4f 0131 	mov.w	r1, r1, rrx
 8003cca:	f102 0201 	add.w	r2, r2, #1
 8003cce:	2afe      	cmp	r2, #254	; 0xfe
 8003cd0:	d251      	bcs.n	8003d76 <__addsf3+0x136>
 8003cd2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8003cd6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8003cda:	bf08      	it	eq
 8003cdc:	f020 0001 	biceq.w	r0, r0, #1
 8003ce0:	ea40 0003 	orr.w	r0, r0, r3
 8003ce4:	4770      	bx	lr
 8003ce6:	0049      	lsls	r1, r1, #1
 8003ce8:	eb40 0000 	adc.w	r0, r0, r0
 8003cec:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8003cf0:	f1a2 0201 	sub.w	r2, r2, #1
 8003cf4:	d1ed      	bne.n	8003cd2 <__addsf3+0x92>
 8003cf6:	fab0 fc80 	clz	ip, r0
 8003cfa:	f1ac 0c08 	sub.w	ip, ip, #8
 8003cfe:	ebb2 020c 	subs.w	r2, r2, ip
 8003d02:	fa00 f00c 	lsl.w	r0, r0, ip
 8003d06:	bfaa      	itet	ge
 8003d08:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8003d0c:	4252      	neglt	r2, r2
 8003d0e:	4318      	orrge	r0, r3
 8003d10:	bfbc      	itt	lt
 8003d12:	40d0      	lsrlt	r0, r2
 8003d14:	4318      	orrlt	r0, r3
 8003d16:	4770      	bx	lr
 8003d18:	f092 0f00 	teq	r2, #0
 8003d1c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8003d20:	bf06      	itte	eq
 8003d22:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8003d26:	3201      	addeq	r2, #1
 8003d28:	3b01      	subne	r3, #1
 8003d2a:	e7b5      	b.n	8003c98 <__addsf3+0x58>
 8003d2c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8003d30:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8003d34:	bf18      	it	ne
 8003d36:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8003d3a:	d021      	beq.n	8003d80 <__addsf3+0x140>
 8003d3c:	ea92 0f03 	teq	r2, r3
 8003d40:	d004      	beq.n	8003d4c <__addsf3+0x10c>
 8003d42:	f092 0f00 	teq	r2, #0
 8003d46:	bf08      	it	eq
 8003d48:	4608      	moveq	r0, r1
 8003d4a:	4770      	bx	lr
 8003d4c:	ea90 0f01 	teq	r0, r1
 8003d50:	bf1c      	itt	ne
 8003d52:	2000      	movne	r0, #0
 8003d54:	4770      	bxne	lr
 8003d56:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8003d5a:	d104      	bne.n	8003d66 <__addsf3+0x126>
 8003d5c:	0040      	lsls	r0, r0, #1
 8003d5e:	bf28      	it	cs
 8003d60:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8003d64:	4770      	bx	lr
 8003d66:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8003d6a:	bf3c      	itt	cc
 8003d6c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8003d70:	4770      	bxcc	lr
 8003d72:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8003d76:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8003d7a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8003d7e:	4770      	bx	lr
 8003d80:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8003d84:	bf16      	itet	ne
 8003d86:	4608      	movne	r0, r1
 8003d88:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8003d8c:	4601      	movne	r1, r0
 8003d8e:	0242      	lsls	r2, r0, #9
 8003d90:	bf06      	itte	eq
 8003d92:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8003d96:	ea90 0f01 	teqeq	r0, r1
 8003d9a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8003d9e:	4770      	bx	lr

08003da0 <__aeabi_ui2f>:
 8003da0:	f04f 0300 	mov.w	r3, #0
 8003da4:	e004      	b.n	8003db0 <__aeabi_i2f+0x8>
 8003da6:	bf00      	nop

08003da8 <__aeabi_i2f>:
 8003da8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8003dac:	bf48      	it	mi
 8003dae:	4240      	negmi	r0, r0
 8003db0:	ea5f 0c00 	movs.w	ip, r0
 8003db4:	bf08      	it	eq
 8003db6:	4770      	bxeq	lr
 8003db8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8003dbc:	4601      	mov	r1, r0
 8003dbe:	f04f 0000 	mov.w	r0, #0
 8003dc2:	e01c      	b.n	8003dfe <__aeabi_l2f+0x2a>

08003dc4 <__aeabi_ul2f>:
 8003dc4:	ea50 0201 	orrs.w	r2, r0, r1
 8003dc8:	bf08      	it	eq
 8003dca:	4770      	bxeq	lr
 8003dcc:	f04f 0300 	mov.w	r3, #0
 8003dd0:	e00a      	b.n	8003de8 <__aeabi_l2f+0x14>
 8003dd2:	bf00      	nop

08003dd4 <__aeabi_l2f>:
 8003dd4:	ea50 0201 	orrs.w	r2, r0, r1
 8003dd8:	bf08      	it	eq
 8003dda:	4770      	bxeq	lr
 8003ddc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8003de0:	d502      	bpl.n	8003de8 <__aeabi_l2f+0x14>
 8003de2:	4240      	negs	r0, r0
 8003de4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003de8:	ea5f 0c01 	movs.w	ip, r1
 8003dec:	bf02      	ittt	eq
 8003dee:	4684      	moveq	ip, r0
 8003df0:	4601      	moveq	r1, r0
 8003df2:	2000      	moveq	r0, #0
 8003df4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8003df8:	bf08      	it	eq
 8003dfa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8003dfe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8003e02:	fabc f28c 	clz	r2, ip
 8003e06:	3a08      	subs	r2, #8
 8003e08:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8003e0c:	db10      	blt.n	8003e30 <__aeabi_l2f+0x5c>
 8003e0e:	fa01 fc02 	lsl.w	ip, r1, r2
 8003e12:	4463      	add	r3, ip
 8003e14:	fa00 fc02 	lsl.w	ip, r0, r2
 8003e18:	f1c2 0220 	rsb	r2, r2, #32
 8003e1c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8003e20:	fa20 f202 	lsr.w	r2, r0, r2
 8003e24:	eb43 0002 	adc.w	r0, r3, r2
 8003e28:	bf08      	it	eq
 8003e2a:	f020 0001 	biceq.w	r0, r0, #1
 8003e2e:	4770      	bx	lr
 8003e30:	f102 0220 	add.w	r2, r2, #32
 8003e34:	fa01 fc02 	lsl.w	ip, r1, r2
 8003e38:	f1c2 0220 	rsb	r2, r2, #32
 8003e3c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8003e40:	fa21 f202 	lsr.w	r2, r1, r2
 8003e44:	eb43 0002 	adc.w	r0, r3, r2
 8003e48:	bf08      	it	eq
 8003e4a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8003e4e:	4770      	bx	lr

08003e50 <__gesf2>:
 8003e50:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8003e54:	e006      	b.n	8003e64 <__cmpsf2+0x4>
 8003e56:	bf00      	nop

08003e58 <__lesf2>:
 8003e58:	f04f 0c01 	mov.w	ip, #1
 8003e5c:	e002      	b.n	8003e64 <__cmpsf2+0x4>
 8003e5e:	bf00      	nop

08003e60 <__cmpsf2>:
 8003e60:	f04f 0c01 	mov.w	ip, #1
 8003e64:	f84d cd04 	str.w	ip, [sp, #-4]!
 8003e68:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8003e6c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8003e70:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8003e74:	bf18      	it	ne
 8003e76:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8003e7a:	d011      	beq.n	8003ea0 <__cmpsf2+0x40>
 8003e7c:	b001      	add	sp, #4
 8003e7e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8003e82:	bf18      	it	ne
 8003e84:	ea90 0f01 	teqne	r0, r1
 8003e88:	bf58      	it	pl
 8003e8a:	ebb2 0003 	subspl.w	r0, r2, r3
 8003e8e:	bf88      	it	hi
 8003e90:	17c8      	asrhi	r0, r1, #31
 8003e92:	bf38      	it	cc
 8003e94:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8003e98:	bf18      	it	ne
 8003e9a:	f040 0001 	orrne.w	r0, r0, #1
 8003e9e:	4770      	bx	lr
 8003ea0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8003ea4:	d102      	bne.n	8003eac <__cmpsf2+0x4c>
 8003ea6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8003eaa:	d105      	bne.n	8003eb8 <__cmpsf2+0x58>
 8003eac:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8003eb0:	d1e4      	bne.n	8003e7c <__cmpsf2+0x1c>
 8003eb2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8003eb6:	d0e1      	beq.n	8003e7c <__cmpsf2+0x1c>
 8003eb8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop

08003ec0 <__aeabi_cfrcmple>:
 8003ec0:	4684      	mov	ip, r0
 8003ec2:	4608      	mov	r0, r1
 8003ec4:	4661      	mov	r1, ip
 8003ec6:	e7ff      	b.n	8003ec8 <__aeabi_cfcmpeq>

08003ec8 <__aeabi_cfcmpeq>:
 8003ec8:	b50f      	push	{r0, r1, r2, r3, lr}
 8003eca:	f7ff ffc9 	bl	8003e60 <__cmpsf2>
 8003ece:	2800      	cmp	r0, #0
 8003ed0:	bf48      	it	mi
 8003ed2:	f110 0f00 	cmnmi.w	r0, #0
 8003ed6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08003ed8 <__aeabi_fcmpeq>:
 8003ed8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003edc:	f7ff fff4 	bl	8003ec8 <__aeabi_cfcmpeq>
 8003ee0:	bf0c      	ite	eq
 8003ee2:	2001      	moveq	r0, #1
 8003ee4:	2000      	movne	r0, #0
 8003ee6:	f85d fb08 	ldr.w	pc, [sp], #8
 8003eea:	bf00      	nop

08003eec <__aeabi_fcmplt>:
 8003eec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003ef0:	f7ff ffea 	bl	8003ec8 <__aeabi_cfcmpeq>
 8003ef4:	bf34      	ite	cc
 8003ef6:	2001      	movcc	r0, #1
 8003ef8:	2000      	movcs	r0, #0
 8003efa:	f85d fb08 	ldr.w	pc, [sp], #8
 8003efe:	bf00      	nop

08003f00 <__aeabi_fcmple>:
 8003f00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003f04:	f7ff ffe0 	bl	8003ec8 <__aeabi_cfcmpeq>
 8003f08:	bf94      	ite	ls
 8003f0a:	2001      	movls	r0, #1
 8003f0c:	2000      	movhi	r0, #0
 8003f0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8003f12:	bf00      	nop

08003f14 <__aeabi_fcmpge>:
 8003f14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003f18:	f7ff ffd2 	bl	8003ec0 <__aeabi_cfrcmple>
 8003f1c:	bf94      	ite	ls
 8003f1e:	2001      	movls	r0, #1
 8003f20:	2000      	movhi	r0, #0
 8003f22:	f85d fb08 	ldr.w	pc, [sp], #8
 8003f26:	bf00      	nop

08003f28 <__aeabi_fcmpgt>:
 8003f28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003f2c:	f7ff ffc8 	bl	8003ec0 <__aeabi_cfrcmple>
 8003f30:	bf34      	ite	cc
 8003f32:	2001      	movcc	r0, #1
 8003f34:	2000      	movcs	r0, #0
 8003f36:	f85d fb08 	ldr.w	pc, [sp], #8
 8003f3a:	bf00      	nop

08003f3c <__aeabi_f2uiz>:
 8003f3c:	0042      	lsls	r2, r0, #1
 8003f3e:	d20e      	bcs.n	8003f5e <__aeabi_f2uiz+0x22>
 8003f40:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8003f44:	d30b      	bcc.n	8003f5e <__aeabi_f2uiz+0x22>
 8003f46:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8003f4a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8003f4e:	d409      	bmi.n	8003f64 <__aeabi_f2uiz+0x28>
 8003f50:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8003f54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f58:	fa23 f002 	lsr.w	r0, r3, r2
 8003f5c:	4770      	bx	lr
 8003f5e:	f04f 0000 	mov.w	r0, #0
 8003f62:	4770      	bx	lr
 8003f64:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8003f68:	d101      	bne.n	8003f6e <__aeabi_f2uiz+0x32>
 8003f6a:	0242      	lsls	r2, r0, #9
 8003f6c:	d102      	bne.n	8003f74 <__aeabi_f2uiz+0x38>
 8003f6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f72:	4770      	bx	lr
 8003f74:	f04f 0000 	mov.w	r0, #0
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop

08003f7c <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
 8003f7c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003f7e:	e003      	b.n	8003f88 <LoopCopyDataInit>

08003f80 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003f80:	4b0a      	ldr	r3, [pc, #40]	; (8003fac <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
 8003f82:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003f84:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003f86:	3104      	adds	r1, #4

08003f88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
 8003f88:	4809      	ldr	r0, [pc, #36]	; (8003fb0 <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
 8003f8a:	4b0a      	ldr	r3, [pc, #40]	; (8003fb4 <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
 8003f8c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003f8e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003f90:	d3f6      	bcc.n	8003f80 <CopyDataInit>
	ldr	r2, =_sbss
 8003f92:	4a09      	ldr	r2, [pc, #36]	; (8003fb8 <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
 8003f94:	e002      	b.n	8003f9c <LoopFillZerobss>

08003f96 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
 8003f96:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003f98:	f842 3b04 	str.w	r3, [r2], #4

08003f9c <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
 8003f9c:	4b07      	ldr	r3, [pc, #28]	; (8003fbc <LoopFillZerobss+0x20>)
	cmp	r2, r3
 8003f9e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003fa0:	d3f9      	bcc.n	8003f96 <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
 8003fa2:	f001 fe75 	bl	8005c90 <SystemInit>
/* Call the application's entry point.*/
	bl	main
 8003fa6:	f000 f80d 	bl	8003fc4 <main>
	bx	lr    
 8003faa:	4770      	bx	lr
	ldr	r3, =_sidata
 8003fac:	080080cc 	.word	0x080080cc
	ldr	r0, =_sdata
 8003fb0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003fb4:	20000180 	.word	0x20000180
	ldr	r2, =_sbss
 8003fb8:	20000180 	.word	0x20000180
	ldr	r3, = _ebss
 8003fbc:	200026f0 	.word	0x200026f0

08003fc0 <CAN1_RX1_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003fc0:	e7fe      	b.n	8003fc0 <CAN1_RX1_IRQHandler>
	...

08003fc4 <main>:
#include	"libdso138.h"

#include 	"UserCode.h"

int main (void)
{
 8003fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 U16 tmp1, tmp2;
 
 Clock_Init();
 8003fc8:	4b46      	ldr	r3, [pc, #280]	; (80040e4 <main+0x120>)
{
 8003fca:	b083      	sub	sp, #12
 Clock_Init();
 8003fcc:	4798      	blx	r3
 
 Port_Init();
 8003fce:	4b46      	ldr	r3, [pc, #280]	; (80040e8 <main+0x124>)
 8003fd0:	4798      	blx	r3

 // Check SW4 pin. If the pin is read LOW enter TEST mode
 tmp1 = ((PB_Port & PB_Bits) | ~PB_Bits);
 8003fd2:	4b46      	ldr	r3, [pc, #280]	; (80040ec <main+0x128>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 if(!BitTest(tmp1, 0x8000)) {
 8003fd6:	0419      	lsls	r1, r3, #16
 8003fd8:	d401      	bmi.n	8003fde <main+0x1a>
	// Enter TEST mode
	TestMode();
 8003fda:	4b45      	ldr	r3, [pc, #276]	; (80040f0 <main+0x12c>)
 8003fdc:	4798      	blx	r3
 ADC2_Init();
 
 AppInit();  
 
 tmp1 = clBlack;
 PutsGenic(24, 120, (U8 *)"FW: 113-13801-037", clWhite, tmp1, &ASC8X16);
 8003fde:	f04f 0b00 	mov.w	fp, #0
 FLASH_Unlock();
 8003fe2:	4b44      	ldr	r3, [pc, #272]	; (80040f4 <main+0x130>)
 8003fe4:	4798      	blx	r3
 EE_Init();
 8003fe6:	4b44      	ldr	r3, [pc, #272]	; (80040f8 <main+0x134>)
 8003fe8:	4798      	blx	r3
 TFT_Init_Ili9341();
 8003fea:	4b44      	ldr	r3, [pc, #272]	; (80040fc <main+0x138>)
 8003fec:	4798      	blx	r3
 USART1_Init();
 8003fee:	4b44      	ldr	r3, [pc, #272]	; (8004100 <main+0x13c>)
 8003ff0:	4798      	blx	r3
 uputs((U8 *)"Uart1 Ok\n\r", USART1);
 8003ff2:	4944      	ldr	r1, [pc, #272]	; (8004104 <main+0x140>)
 8003ff4:	4844      	ldr	r0, [pc, #272]	; (8004108 <main+0x144>)
 8003ff6:	4b45      	ldr	r3, [pc, #276]	; (800410c <main+0x148>)
 8003ff8:	4798      	blx	r3
 SysTick_Init();
 8003ffa:	4b45      	ldr	r3, [pc, #276]	; (8004110 <main+0x14c>)
 8003ffc:	4798      	blx	r3
 TIM3_Init();
 8003ffe:	4b45      	ldr	r3, [pc, #276]	; (8004114 <main+0x150>)
 8004000:	4798      	blx	r3
 TIM4_Init();
 8004002:	4b45      	ldr	r3, [pc, #276]	; (8004118 <main+0x154>)
 8004004:	4798      	blx	r3
 PutsGenic(24, 120, (U8 *)"FW: 113-13801-037", clWhite, tmp1, &ASC8X16);
 8004006:	4d45      	ldr	r5, [pc, #276]	; (800411c <main+0x158>)
 ADC2_Init();
 8004008:	4b45      	ldr	r3, [pc, #276]	; (8004120 <main+0x15c>)
 800400a:	4798      	blx	r3
 AppInit();  
 800400c:	4b45      	ldr	r3, [pc, #276]	; (8004124 <main+0x160>)
 800400e:	4798      	blx	r3
 PutsGenic(24, 120, (U8 *)"FW: 113-13801-037", clWhite, tmp1, &ASC8X16);
 8004010:	4c45      	ldr	r4, [pc, #276]	; (8004128 <main+0x164>)
 8004012:	e9cd b500 	strd	fp, r5, [sp]
 8004016:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800401a:	4a44      	ldr	r2, [pc, #272]	; (800412c <main+0x168>)
 800401c:	2178      	movs	r1, #120	; 0x78
 800401e:	2018      	movs	r0, #24
 8004020:	47a0      	blx	r4
 PutsGenic(24, 140, (U8 *)LibVersion, clWhite, tmp1, &ASC8X16);
 8004022:	e9cd b500 	strd	fp, r5, [sp]
 8004026:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800402a:	4a41      	ldr	r2, [pc, #260]	; (8004130 <main+0x16c>)
 800402c:	218c      	movs	r1, #140	; 0x8c
 800402e:	2018      	movs	r0, #24
 8004030:	47a0      	blx	r4
 PutsGenic(24, 180, (U8 *)"Booting...", clWhite, tmp1, &ASC8X16);
 8004032:	4a40      	ldr	r2, [pc, #256]	; (8004134 <main+0x170>)
 8004034:	21b4      	movs	r1, #180	; 0xb4
 8004036:	2018      	movs	r0, #24
 8004038:	e9cd b500 	strd	fp, r5, [sp]
 800403c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004040:	47a0      	blx	r4

 // LED blink twice
 LedBlink();
 8004042:	4b3d      	ldr	r3, [pc, #244]	; (8004138 <main+0x174>)
 8004044:	4798      	blx	r3

 NVIC_Configuration();
 8004046:	4b3d      	ldr	r3, [pc, #244]	; (800413c <main+0x178>)
 8004048:	4798      	blx	r3

 Flags = 0;
 800404a:	4b3d      	ldr	r3, [pc, #244]	; (8004140 <main+0x17c>)
		UsrCode();
		}
// --------------------------------------------------------

 	if(GTimeout) {
		GTimeout = 0;
 800404c:	46d9      	mov	r9, fp
 800404e:	f8df 811c 	ldr.w	r8, [pc, #284]	; 800416c <main+0x1a8>
 8004052:	4f3c      	ldr	r7, [pc, #240]	; (8004144 <main+0x180>)
 8004054:	4d3c      	ldr	r5, [pc, #240]	; (8004148 <main+0x184>)
 8004056:	f8df a118 	ldr.w	sl, [pc, #280]	; 8004170 <main+0x1ac>
 800405a:	4c3c      	ldr	r4, [pc, #240]	; (800414c <main+0x188>)
 800405c:	4e3c      	ldr	r6, [pc, #240]	; (8004150 <main+0x18c>)
 Flags = 0;
 800405e:	f8a3 b000 	strh.w	fp, [r3]
 8004062:	e00e      	b.n	8004082 <main+0xbe>
 	if(GTimeout) {
 8004064:	782b      	ldrb	r3, [r5, #0]
 8004066:	b9bb      	cbnz	r3, 8004098 <main+0xd4>
 		}
	
// ============================	


	if(BitTest(Keypad.Flags, (1 << KF_DoKeyScan))) {
 8004068:	8823      	ldrh	r3, [r4, #0]
 800406a:	07da      	lsls	r2, r3, #31
 800406c:	d41a      	bmi.n	80040a4 <main+0xe0>
		BitClr(Keypad.Flags, (1 << KF_DoKeyScan));
		// Do key scan
		KeyScan();
		}

	if(Keypad.KeyCode) {
 800406e:	88e3      	ldrh	r3, [r4, #6]
 8004070:	bb03      	cbnz	r3, 80040b4 <main+0xf0>
		// Process key code
		KeyProc();
		Keypad.KeyCode = 0;
		}

	if(GTimer == 0) {
 8004072:	8833      	ldrh	r3, [r6, #0]
 8004074:	b913      	cbnz	r3, 800407c <main+0xb8>
		if(BitTest(tmp1, DSO_CaptureDone)) {
 8004076:	f01b 0f01 	tst.w	fp, #1
 800407a:	d120      	bne.n	80040be <main+0xfa>
				}
			}
		}

	
	if(BitTest(tmp1, DSO_Rolling)) {
 800407c:	f01b 0f08 	tst.w	fp, #8
 8004080:	d12b      	bne.n	80040da <main+0x116>
 	DsoDisplay();
 8004082:	47c0      	blx	r8
	tmp1 = GetDsoStatus();
 8004084:	47b8      	blx	r7
	if(BitTest(tmp1, DSO_NormalDisplay)) {
 8004086:	f010 0f80 	tst.w	r0, #128	; 0x80
	tmp1 = GetDsoStatus();
 800408a:	4683      	mov	fp, r0
	if(BitTest(tmp1, DSO_NormalDisplay)) {
 800408c:	d0ea      	beq.n	8004064 <main+0xa0>
		UsrCode();
 800408e:	4b31      	ldr	r3, [pc, #196]	; (8004154 <main+0x190>)
 8004090:	4798      	blx	r3
 	if(GTimeout) {
 8004092:	782b      	ldrb	r3, [r5, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d0e7      	beq.n	8004068 <main+0xa4>
		GTimeout = 0;
 8004098:	f885 9000 	strb.w	r9, [r5]
		StartCapture();
 800409c:	47d0      	blx	sl
	if(BitTest(Keypad.Flags, (1 << KF_DoKeyScan))) {
 800409e:	8823      	ldrh	r3, [r4, #0]
 80040a0:	07da      	lsls	r2, r3, #31
 80040a2:	d5e4      	bpl.n	800406e <main+0xaa>
		BitClr(Keypad.Flags, (1 << KF_DoKeyScan));
 80040a4:	f023 0301 	bic.w	r3, r3, #1
 80040a8:	8023      	strh	r3, [r4, #0]
		KeyScan();
 80040aa:	4b2b      	ldr	r3, [pc, #172]	; (8004158 <main+0x194>)
 80040ac:	4798      	blx	r3
	if(Keypad.KeyCode) {
 80040ae:	88e3      	ldrh	r3, [r4, #6]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d0de      	beq.n	8004072 <main+0xae>
		KeyProc();
 80040b4:	4b29      	ldr	r3, [pc, #164]	; (800415c <main+0x198>)
 80040b6:	4798      	blx	r3
		Keypad.KeyCode = 0;
 80040b8:	f8a4 9006 	strh.w	r9, [r4, #6]
 80040bc:	e7d9      	b.n	8004072 <main+0xae>
			UpdateDisp(Disp_Trace);
 80040be:	2004      	movs	r0, #4
 80040c0:	4b27      	ldr	r3, [pc, #156]	; (8004160 <main+0x19c>)
 80040c2:	4798      	blx	r3
			tmp2 = GetTimebase();
 80040c4:	4b27      	ldr	r3, [pc, #156]	; (8004164 <main+0x1a0>)
 80040c6:	4798      	blx	r3
			if(tmp2 <= TB_1ms) {
 80040c8:	b280      	uxth	r0, r0
 80040ca:	2812      	cmp	r0, #18
 80040cc:	d908      	bls.n	80040e0 <main+0x11c>
				GTimer = 40;
 80040ce:	f04f 0328 	mov.w	r3, #40	; 0x28
	if(BitTest(tmp1, DSO_Rolling)) {
 80040d2:	f01b 0f08 	tst.w	fp, #8
				GTimer = 40;
 80040d6:	8033      	strh	r3, [r6, #0]
	if(BitTest(tmp1, DSO_Rolling)) {
 80040d8:	d0d3      	beq.n	8004082 <main+0xbe>
		Rolling();
 80040da:	4b23      	ldr	r3, [pc, #140]	; (8004168 <main+0x1a4>)
 80040dc:	4798      	blx	r3
 80040de:	e7d0      	b.n	8004082 <main+0xbe>
				StartCapture();
 80040e0:	47d0      	blx	sl
 80040e2:	e7cb      	b.n	800407c <main+0xb8>
 80040e4:	08004175 	.word	0x08004175
 80040e8:	080041e1 	.word	0x080041e1
 80040ec:	40010c00 	.word	0x40010c00
 80040f0:	080056d5 	.word	0x080056d5
 80040f4:	08006219 	.word	0x08006219
 80040f8:	08005915 	.word	0x08005915
 80040fc:	080043e5 	.word	0x080043e5
 8004100:	08004245 	.word	0x08004245
 8004104:	40013800 	.word	0x40013800
 8004108:	08006f94 	.word	0x08006f94
 800410c:	080042a9 	.word	0x080042a9
 8004110:	08004371 	.word	0x08004371
 8004114:	080042c9 	.word	0x080042c9
 8004118:	08004319 	.word	0x08004319
 800411c:	20000138 	.word	0x20000138
 8004120:	08004389 	.word	0x08004389
 8004124:	08004ecd 	.word	0x08004ecd
 8004128:	08004e4d 	.word	0x08004e4d
 800412c:	08006fa0 	.word	0x08006fa0
 8004130:	20000000 	.word	0x20000000
 8004134:	08006fb4 	.word	0x08006fb4
 8004138:	08005675 	.word	0x08005675
 800413c:	08004bd5 	.word	0x08004bd5
 8004140:	200001b2 	.word	0x200001b2
 8004144:	080021a5 	.word	0x080021a5
 8004148:	200001aa 	.word	0x200001aa
 800414c:	200001b4 	.word	0x200001b4
 8004150:	200001ac 	.word	0x200001ac
 8004154:	08005c09 	.word	0x08005c09
 8004158:	08005085 	.word	0x08005085
 800415c:	0800560d 	.word	0x0800560d
 8004160:	08002285 	.word	0x08002285
 8004164:	08001f0d 	.word	0x08001f0d
 8004168:	08001d05 	.word	0x08001d05
 800416c:	080022bd 	.word	0x080022bd
 8004170:	08000ae9 	.word	0x08000ae9

08004174 <Clock_Init>:
//-----------------------------------------------------------------------------
// Clock_Init
//-----------------------------------------------------------------------------
//
void	Clock_Init(void)
{
 8004174:	b470      	push	{r4, r5, r6}
			|(0 << CSSON)     	/*!< Clock Security System enable */
			|(1 << PLLON)     		/*!< PLL enable */
			|(0 << PLLRDY);    	/*!< PLL clock ready flag */


 RCC->CIR = (0 << LSIRDYF)     	/*!< LSI Ready Interrupt flag */
 8004176:	2200      	movs	r2, #0
				|(0 << TIM5EN)
				|(1 << TIM4EN)
				|(1 << TIM3EN)
				|(1 << TIM2EN);

 RCC->APB2ENR = (0 << ADC3EN)
 8004178:	f644 613d 	movw	r1, #20029	; 0x4e3d
 RCC->AHBENR = (0 << SDIOEN)
 800417c:	2415      	movs	r4, #21
 RCC->APB1ENR = (0 << DACEN)
 800417e:	2007      	movs	r0, #7
 RCC->CR =  (1 << HSION)  		/*!< Internal High Speed clock enable */
 8004180:	4b13      	ldr	r3, [pc, #76]	; (80041d0 <Clock_Init+0x5c>)
 RCC->CFGR = (0 << SW)     		/*!< SW[1:0] bits (System clock Switch) */
 8004182:	4d14      	ldr	r5, [pc, #80]	; (80041d4 <Clock_Init+0x60>)
 RCC->CR =  (1 << HSION)  		/*!< Internal High Speed clock enable */
 8004184:	4e14      	ldr	r6, [pc, #80]	; (80041d8 <Clock_Init+0x64>)
 8004186:	601e      	str	r6, [r3, #0]
 RCC->CFGR = (0 << SW)     		/*!< SW[1:0] bits (System clock Switch) */
 8004188:	605d      	str	r5, [r3, #4]
 RCC->CR =  (1 << HSION)  		/*!< Internal High Speed clock enable */
 800418a:	4d14      	ldr	r5, [pc, #80]	; (80041dc <Clock_Init+0x68>)
 800418c:	601d      	str	r5, [r3, #0]
 RCC->CIR = (0 << LSIRDYF)     	/*!< LSI Ready Interrupt flag */
 800418e:	609a      	str	r2, [r3, #8]
 RCC->APB2RSTR = (0 << AFIORST) 	/*!< Alternate Function I/O reset */
 8004190:	60da      	str	r2, [r3, #12]
 RCC->APB1RSTR = (0 << TIM2RST) /*!< Timer 2 reset */
 8004192:	611a      	str	r2, [r3, #16]
 RCC->AHBENR = (0 << SDIOEN)
 8004194:	615c      	str	r4, [r3, #20]
 RCC->APB1ENR = (0 << DACEN)
 8004196:	61d8      	str	r0, [r3, #28]
 RCC->APB2ENR = (0 << ADC3EN)
 8004198:	6199      	str	r1, [r3, #24]
				|(1 << IOPCEN)
				|(1 << IOPBEN)
				|(1 << IOPAEN)
				|(1 << AFIOEN);

 RCC->BDCR = 0x00000000;
 800419a:	621a      	str	r2, [r3, #32]
 RCC->CSR = 0x00000000;
 800419c:	625a      	str	r2, [r3, #36]	; 0x24

 // Switch to HSE if it is ready
 if(BitTest(RCC->CR, (1 << HSERDY))) {
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	0391      	lsls	r1, r2, #14
 80041a2:	d507      	bpl.n	80041b4 <Clock_Init+0x40>
	RCC->CFGR &= ~RCC_CFGR_SW;
 80041a4:	685a      	ldr	r2, [r3, #4]
 80041a6:	f022 0203 	bic.w	r2, r2, #3
 80041aa:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_SW_HSE;
 80041ac:	685a      	ldr	r2, [r3, #4]
 80041ae:	f042 0201 	orr.w	r2, r2, #1
 80041b2:	605a      	str	r2, [r3, #4]
 	}

  // Switch to PLL if it is ready
 if(BitTest(RCC->CR, (1 << PLLRDY))) {
 80041b4:	4b06      	ldr	r3, [pc, #24]	; (80041d0 <Clock_Init+0x5c>)
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	0192      	lsls	r2, r2, #6
 80041ba:	d507      	bpl.n	80041cc <Clock_Init+0x58>
	RCC->CFGR &= ~RCC_CFGR_SW;
 80041bc:	685a      	ldr	r2, [r3, #4]
 80041be:	f022 0203 	bic.w	r2, r2, #3
 80041c2:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	f042 0202 	orr.w	r2, r2, #2
 80041ca:	605a      	str	r2, [r3, #4]
 	}

}
 80041cc:	bc70      	pop	{r4, r5, r6}
 80041ce:	4770      	bx	lr
 80041d0:	40021000 	.word	0x40021000
 80041d4:	001d8400 	.word	0x001d8400
 80041d8:	00010081 	.word	0x00010081
 80041dc:	01010081 	.word	0x01010081

080041e0 <Port_Init>:
//-----------------------------------------------------------------------------
//
// This routine configures the crossbar and GPIO ports.
//
void Port_Init(void)
{
 80041e0:	b430      	push	{r4, r5}
 			|((GPIO_CNF_Floating | GPIO_Mode_In) << (12 - 8)*4)
 			|((GPIO_CNF_Floating | GPIO_Mode_In) << (13 - 8)*4)
 			|((GPIO_CNF_Floating | GPIO_Mode_In) << (14 - 8)*4)
 			|((GPIO_CNF_GP_PP | GPIO_Mode_Out50M) << (15 - 8)*4);	// LED

 GPIOA->ODR = 0xFFFF;
 80041e2:	f64f 72ff 	movw	r2, #65535	; 0xffff

 GPIOB->CRL = ((GPIO_CNF_GP_PP | GPIO_Mode_Out50M) << (0*4))		// TFT port - D0
 80041e6:	f04f 3533 	mov.w	r5, #858993459	; 0x33333333
 			|((GPIO_CNF_GP_PP | GPIO_Mode_Out50M) << (14 - 8)*4)		// TFT_RS
 			|((GPIO_CNF_GP_PP | GPIO_Mode_Out50M) << (15 - 8)*4);		// TFT_nWR

 GPIOC->ODR = 0xFFFF;
 
 GPIOD->CRL = ((GPIO_CNF_Floating | GPIO_Mode_In) << (0*4))		
 80041ea:	2444      	movs	r4, #68	; 0x44
 GPIOA->CRL = ((GPIO_CNF_AnalogIn | GPIO_Mode_In) << (0*4))	// ADC1_IN0
 80041ec:	490e      	ldr	r1, [pc, #56]	; (8004228 <Port_Init+0x48>)
 80041ee:	4b0f      	ldr	r3, [pc, #60]	; (800422c <Port_Init+0x4c>)
 GPIOA->CRH = ((GPIO_CNF_Floating| GPIO_Mode_In) << (8 - 8)*4)		// TrigIn
 80041f0:	480f      	ldr	r0, [pc, #60]	; (8004230 <Port_Init+0x50>)
 GPIOA->CRL = ((GPIO_CNF_AnalogIn | GPIO_Mode_In) << (0*4))	// ADC1_IN0
 80041f2:	600b      	str	r3, [r1, #0]
 GPIOA->CRH = ((GPIO_CNF_Floating| GPIO_Mode_In) << (8 - 8)*4)		// TrigIn
 80041f4:	6048      	str	r0, [r1, #4]
 GPIOB->CRL = ((GPIO_CNF_GP_PP | GPIO_Mode_Out50M) << (0*4))		// TFT port - D0
 80041f6:	4b0f      	ldr	r3, [pc, #60]	; (8004234 <Port_Init+0x54>)
 GPIOB->CRH = ((GPIO_CNF_AF_PP| GPIO_Mode_Out50M) << ((8 - 8)*4))		// Output, Trigger level
 80041f8:	480f      	ldr	r0, [pc, #60]	; (8004238 <Port_Init+0x58>)
 GPIOA->ODR = 0xFFFF;
 80041fa:	60ca      	str	r2, [r1, #12]
 GPIOB->CRL = ((GPIO_CNF_GP_PP | GPIO_Mode_Out50M) << (0*4))		// TFT port - D0
 80041fc:	601d      	str	r5, [r3, #0]
 GPIOB->CRH = ((GPIO_CNF_AF_PP| GPIO_Mode_Out50M) << ((8 - 8)*4))		// Output, Trigger level
 80041fe:	6058      	str	r0, [r3, #4]
 GPIOC->CRH = ((GPIO_CNF_GP_PP | GPIO_Mode_Out50M) << (13 - 8)*4)		// TFT_nCS
 8004200:	4d0e      	ldr	r5, [pc, #56]	; (800423c <Port_Init+0x5c>)
 GPIOD->CRL = ((GPIO_CNF_Floating | GPIO_Mode_In) << (0*4))		
 8004202:	480f      	ldr	r0, [pc, #60]	; (8004240 <Port_Init+0x60>)
 GPIOB->ODR = 0xFFFF;
 8004204:	60da      	str	r2, [r3, #12]
 GPIOC->CRH = ((GPIO_CNF_GP_PP | GPIO_Mode_Out50M) << (13 - 8)*4)		// TFT_nCS
 8004206:	f8c1 5804 	str.w	r5, [r1, #2052]	; 0x804
 			|((GPIO_CNF_Floating | GPIO_Mode_In) << (1*4));		

 // Remap to make PB3 & PB4 available
 AFIO->MAPR &= ~AFIO_MAPR_SWJ_CFG;
 800420a:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 GPIOC->ODR = 0xFFFF;
 800420e:	f8c1 280c 	str.w	r2, [r1, #2060]	; 0x80c
 GPIOD->CRL = ((GPIO_CNF_Floating | GPIO_Mode_In) << (0*4))		
 8004212:	6004      	str	r4, [r0, #0]
 AFIO->MAPR &= ~AFIO_MAPR_SWJ_CFG;
 8004214:	685a      	ldr	r2, [r3, #4]
 AFIO->MAPR |= AFIO_MAPR_SWJ_CFG_1;
 
}
 8004216:	bc30      	pop	{r4, r5}
 AFIO->MAPR &= ~AFIO_MAPR_SWJ_CFG;
 8004218:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 800421c:	605a      	str	r2, [r3, #4]
 AFIO->MAPR |= AFIO_MAPR_SWJ_CFG_1;
 800421e:	685a      	ldr	r2, [r3, #4]
 8004220:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004224:	605a      	str	r2, [r3, #4]
}
 8004226:	4770      	bx	lr
 8004228:	40010800 	.word	0x40010800
 800422c:	b4444440 	.word	0xb4444440
 8004230:	344444b4 	.word	0x344444b4
 8004234:	40010c00 	.word	0x40010c00
 8004238:	888833bb 	.word	0x888833bb
 800423c:	33300000 	.word	0x33300000
 8004240:	40011400 	.word	0x40011400

08004244 <USART1_Init>:

void	USART1_Init(void)
{
 8004244:	b530      	push	{r4, r5, lr}
 USART_InitTypeDef USART_InitStructure;
 
  USART_InitStructure.USART_BaudRate = 38400;
 8004246:	2300      	movs	r3, #0
 8004248:	f44f 4216 	mov.w	r2, #38400	; 0x9600
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
 800424c:	f44f 2540 	mov.w	r5, #786432	; 0xc0000
  USART_InitStructure.USART_Parity = USART_Parity_No;
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
  
  /* Configure USART1 */
  USART_Init(USART1, &USART_InitStructure);
 8004250:	4c08      	ldr	r4, [pc, #32]	; (8004274 <USART1_Init+0x30>)
{
 8004252:	b085      	sub	sp, #20
  USART_Init(USART1, &USART_InitStructure);
 8004254:	4669      	mov	r1, sp
 8004256:	4620      	mov	r0, r4
  USART_InitStructure.USART_BaudRate = 38400;
 8004258:	9200      	str	r2, [sp, #0]
 800425a:	9301      	str	r3, [sp, #4]
  USART_Init(USART1, &USART_InitStructure);
 800425c:	4a06      	ldr	r2, [pc, #24]	; (8004278 <USART1_Init+0x34>)
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800425e:	f8ad 300c 	strh.w	r3, [sp, #12]
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8004262:	9502      	str	r5, [sp, #8]
  USART_Init(USART1, &USART_InitStructure);
 8004264:	4790      	blx	r2
  
  /* Enable the USART1 */
  USART_Cmd(USART1, ENABLE);
 8004266:	4620      	mov	r0, r4
 8004268:	2101      	movs	r1, #1
 800426a:	4b04      	ldr	r3, [pc, #16]	; (800427c <USART1_Init+0x38>)
 800426c:	4798      	blx	r3

}
 800426e:	b005      	add	sp, #20
 8004270:	bd30      	pop	{r4, r5, pc}
 8004272:	bf00      	nop
 8004274:	40013800 	.word	0x40013800
 8004278:	08005e65 	.word	0x08005e65
 800427c:	08006009 	.word	0x08006009

08004280 <UartPutc>:

void	UartPutc(U8 ch, USART_TypeDef* USARTx)
{
 8004280:	b570      	push	{r4, r5, r6, lr}
 8004282:	4606      	mov	r6, r0
 8004284:	460c      	mov	r4, r1
 8004286:	4d06      	ldr	r5, [pc, #24]	; (80042a0 <UartPutc+0x20>)
 while(USART_GetFlagStatus(USARTx, USART_FLAG_TXE) == RESET) {
 8004288:	2180      	movs	r1, #128	; 0x80
 800428a:	4620      	mov	r0, r4
 800428c:	47a8      	blx	r5
 800428e:	2800      	cmp	r0, #0
 8004290:	d0fa      	beq.n	8004288 <UartPutc+0x8>
	}
 USART_SendData(USARTx, ch);
 8004292:	4631      	mov	r1, r6
 8004294:	4620      	mov	r0, r4
}
 8004296:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 USART_SendData(USARTx, ch);
 800429a:	4b02      	ldr	r3, [pc, #8]	; (80042a4 <UartPutc+0x24>)
 800429c:	4718      	bx	r3
 800429e:	bf00      	nop
 80042a0:	080060d1 	.word	0x080060d1
 80042a4:	08006075 	.word	0x08006075

080042a8 <uputs>:

void	uputs(U8 *s, USART_TypeDef* USARTx)
{
 80042a8:	b570      	push	{r4, r5, r6, lr}
 80042aa:	4604      	mov	r4, r0
 while(*s != 0) {
 80042ac:	7800      	ldrb	r0, [r0, #0]
 80042ae:	b138      	cbz	r0, 80042c0 <uputs+0x18>
 80042b0:	460d      	mov	r5, r1
 80042b2:	4e04      	ldr	r6, [pc, #16]	; (80042c4 <uputs+0x1c>)
 	UartPutc(*s, USARTx);
 80042b4:	4629      	mov	r1, r5
 80042b6:	47b0      	blx	r6
 while(*s != 0) {
 80042b8:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80042bc:	2800      	cmp	r0, #0
 80042be:	d1f9      	bne.n	80042b4 <uputs+0xc>
	s++;
 	}
}
 80042c0:	bd70      	pop	{r4, r5, r6, pc}
 80042c2:	bf00      	nop
 80042c4:	08004281 	.word	0x08004281

080042c8 <TIM3_Init>:

 void	TIM3_Init(void)
{
 80042c8:	b4f0      	push	{r4, r5, r6, r7}
		| (0 << DIR)          		//!<Direction. 0: Up, 1: Down
		| (0 << CMS)          		//!<CMS[1:0] bits (Center-aligned mode selection) //
		| (1 << ARPE)          		//!<Auto-reload preload enable //
		| (0 << CKD);          		//!<CKD[1:0] bits (clock division for filtering) 0 = 1/1, 1 = 1/2, 2 = 1/4

 TIM3->CR2 = (0 << CCPC)           	//<Capture/Compare Preloaded Control //
 80042ca:	2200      	movs	r2, #0
//		1111: fSAMPLING=fDTS/32, N=8.
//				Note: 	In current silicon revision, fDTS is replaced in the formula by CK_INT 
//						when ICnF[3:0]= 1, 2 or 3.
//		
// Output compare mode
 TIM3->CCMR1 = (0 << CC1S)          	//!<CC1S[1:0] bits (Capture/Compare 1 Selection) 
 80042cc:	f44f 5740 	mov.w	r7, #12288	; 0x3000
//		| (0 << IC3F)           	 	//!<IC3F[3:0] bits (Input Capture 3 Filter) 
//		| (0 << CC4S)           		//!<CC4S[1:0] bits (Capture/Compare 4 Selection) 
//		| (0 << IC4PSC)           	//!<IC4PSC[1:0] bits (Input Capture 4 Prescaler) 
//		| (0 << IC4F);           	 	//!<IC4F[3:0] bits (Input Capture 4 Filter) 

 TIM3->CCER = (0 << CC1E)           	//<Capture/Compare 1 output enable //
 80042d0:	2610      	movs	r6, #16
		| (0 << CC4P);           		 //<Capture/Compare 4 output Polarity //

 
 TIM3->CNT = 0x0000;
 
 TIM3->PSC = 3600 - 1;			// 0.5ms clock cycle
 80042d2:	f640 650f 	movw	r5, #3599	; 0xe0f
 
 TIM3->ARR = 10 - 1;
 80042d6:	2409      	movs	r4, #9
 
 TIM3->CCR1 = 5;
 80042d8:	2105      	movs	r1, #5
 TIM3->CR1 = (0 << CEN)    	    	//!<Counter enable //
 80042da:	f04f 0c80 	mov.w	ip, #128	; 0x80
 TIM3->CCR3 = 0x0000;
 TIM3->CCR4 = 0x0000;
 TIM3->DCR = 0x0000;
 TIM3->DMAR = 0x0000;

 TIM3->CR1 = (1 << CEN)    	    	//<Counter enable //
 80042de:	2081      	movs	r0, #129	; 0x81
 TIM3->CR1 = (0 << CEN)    	    	//!<Counter enable //
 80042e0:	4b0c      	ldr	r3, [pc, #48]	; (8004314 <TIM3_Init+0x4c>)
 80042e2:	f8a3 c000 	strh.w	ip, [r3]
 TIM3->CR2 = (0 << CCPC)           	//<Capture/Compare Preloaded Control //
 80042e6:	809a      	strh	r2, [r3, #4]
 TIM3->SMCR = (0 << SMS)           	//<SMS[2:0] bits (Slave mode selection) //
 80042e8:	811a      	strh	r2, [r3, #8]
 TIM3->DIER = (0 << UIE)           	//<Update interrupt enable //
 80042ea:	819a      	strh	r2, [r3, #12]
 TIM3->SR = 0x0000;
 80042ec:	821a      	strh	r2, [r3, #16]
 TIM3->EGR = 0x0000;
 80042ee:	829a      	strh	r2, [r3, #20]
 TIM3->CCMR1 = (0 << CC1S)          	//!<CC1S[1:0] bits (Capture/Compare 1 Selection) 
 80042f0:	831f      	strh	r7, [r3, #24]
 TIM3->CCMR2 = (0 << CC3S)          	//!<CC3S[1:0] bits (Capture/Compare 3 Selection) 
 80042f2:	839a      	strh	r2, [r3, #28]
 TIM3->CCER = (0 << CC1E)           	//<Capture/Compare 1 output enable //
 80042f4:	841e      	strh	r6, [r3, #32]
 TIM3->CNT = 0x0000;
 80042f6:	849a      	strh	r2, [r3, #36]	; 0x24
 TIM3->PSC = 3600 - 1;			// 0.5ms clock cycle
 80042f8:	851d      	strh	r5, [r3, #40]	; 0x28
 TIM3->ARR = 10 - 1;
 80042fa:	859c      	strh	r4, [r3, #44]	; 0x2c
 TIM3->CCR1 = 5;
 80042fc:	8699      	strh	r1, [r3, #52]	; 0x34
		| (0 << DIR)          		//<Direction //
		| (0 << CMS)          		//<CMS[1:0] bits (Center-aligned mode selection) //
		| (1 << ARPE)          		//<Auto-reload preload enable //
		| (0 << CKD);          		//<CKD[1:0] bits (clock division) //

}
 80042fe:	bcf0      	pop	{r4, r5, r6, r7}
 TIM3->CCR2 = 5;
 8004300:	8719      	strh	r1, [r3, #56]	; 0x38
 TIM3->CCR3 = 0x0000;
 8004302:	879a      	strh	r2, [r3, #60]	; 0x3c
 TIM3->CCR4 = 0x0000;
 8004304:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 TIM3->DCR = 0x0000;
 8004308:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 TIM3->DMAR = 0x0000;
 800430c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 TIM3->CR1 = (1 << CEN)    	    	//<Counter enable //
 8004310:	8018      	strh	r0, [r3, #0]
}
 8004312:	4770      	bx	lr
 8004314:	40000400 	.word	0x40000400

08004318 <TIM4_Init>:

void	TIM4_Init(void)
{
 8004318:	b4f0      	push	{r4, r5, r6, r7}
		| (0 << DIR)          		//!<Direction. 0: Up, 1: Down
		| (0 << CMS)          		//!<CMS[1:0] bits (Center-aligned mode selection) //
		| (1 << ARPE)          		//!<Auto-reload preload enable //
		| (0 << CKD);          		//!<CKD[1:0] bits (clock division for filtering) 0 = 1/1, 1 = 1/2, 2 = 1/4

 TIM4->CR2 = (0 << CCPC)           	//!<Capture/Compare Preloaded Control //
 800431a:	2200      	movs	r2, #0
		| (0 << IC2PSC)           	//!<IC2PSC[1:0] bits (Input Capture 2 Prescaler) 
		| (0 << IC2F);           	 	//!<IC2F[3:0] bits (Input Capture 2 Filter) 
*/

// Output compare mode
 TIM4->CCMR2 = (0 << CC3S)          	//!<CC3S[1:0] bits (Capture/Compare 3 Selection) 
 800431c:	f246 0760 	movw	r7, #24672	; 0x6060
		| (0 << CC4S)           		//!<CC4S[1:0] bits (Capture/Compare 4 Selection) 
		| (0 << IC4PSC)           	//!<IC4PSC[1:0] bits (Input Capture 4 Prescaler) 
		| (0 << IC4F);           	 	//!<IC4F[3:0] bits (Input Capture 4 Filter) 
*/

 TIM4->CCER = (0 << CC1E)           	//!<Capture/Compare 1 output enable //
 8004320:	f44f 5688 	mov.w	r6, #4352	; 0x1100
 
 TIM4->CNT = 0x0000;
 
 TIM4->PSC = 1 - 1;		// Make 1M (36M/36) as basic clock
 
 TIM4->ARR = 4096 - 1;	//  1KHz
 8004324:	f640 75ff 	movw	r5, #4095	; 0xfff
 
 TIM4->CCR1 = 0x0000;	// This value must be set to smaller than ARR. Otherwise there is no
 						//	compare match and no output generated at pin.
 TIM4->CCR2 = 0x0000;
 TIM4->CCR3 = 0x800 - 1;
 8004328:	f240 74ff 	movw	r4, #2047	; 0x7ff
 TIM4->CR1 = (0 << CEN)    	    	//!<Counter enable //
 800432c:	f04f 0c80 	mov.w	ip, #128	; 0x80
 TIM4->CCR4 = 0x400 - 1;
 8004330:	f240 30ff 	movw	r0, #1023	; 0x3ff
		| (0 << CC3DE)           		//!<Capture/Compare 3 DMA request enable //
		| (0 << CC4DE)           		//!<Capture/Compare 4 DMA request enable //
		| (0 << COMDE)           	//!<COM DMA request enable //
		| (0 << TDE);           		//!<Trigger DMA request enable //

 TIM4->CR1 = (1 << CEN)    	    	//!<Counter enable //
 8004334:	2181      	movs	r1, #129	; 0x81
 TIM4->CR1 = (0 << CEN)    	    	//!<Counter enable //
 8004336:	4b0d      	ldr	r3, [pc, #52]	; (800436c <TIM4_Init+0x54>)
 8004338:	f8a3 c000 	strh.w	ip, [r3]
 TIM4->CR2 = (0 << CCPC)           	//!<Capture/Compare Preloaded Control //
 800433c:	809a      	strh	r2, [r3, #4]
 TIM4->SMCR = (0 << SMS)           	//!<SMS[2:0] bits (Slave mode selection) //
 800433e:	811a      	strh	r2, [r3, #8]
 TIM4->SR = 0x0000;
 8004340:	821a      	strh	r2, [r3, #16]
 TIM4->EGR = 0x0000;
 8004342:	829a      	strh	r2, [r3, #20]
 TIM4->CCMR1 = (0 << CC1S)          	//!<CC1S[1:0] bits (Capture/Compare 1 Selection) 
 8004344:	831a      	strh	r2, [r3, #24]
 TIM4->CCMR2 = (0 << CC3S)          	//!<CC3S[1:0] bits (Capture/Compare 3 Selection) 
 8004346:	839f      	strh	r7, [r3, #28]
 TIM4->CCER = (0 << CC1E)           	//!<Capture/Compare 1 output enable //
 8004348:	841e      	strh	r6, [r3, #32]
 TIM4->CNT = 0x0000;
 800434a:	849a      	strh	r2, [r3, #36]	; 0x24
 TIM4->PSC = 1 - 1;		// Make 1M (36M/36) as basic clock
 800434c:	851a      	strh	r2, [r3, #40]	; 0x28
 TIM4->ARR = 4096 - 1;	//  1KHz
 800434e:	859d      	strh	r5, [r3, #44]	; 0x2c
 TIM4->CCR1 = 0x0000;	// This value must be set to smaller than ARR. Otherwise there is no
 8004350:	869a      	strh	r2, [r3, #52]	; 0x34
 TIM4->CCR2 = 0x0000;
 8004352:	871a      	strh	r2, [r3, #56]	; 0x38
 TIM4->CCR3 = 0x800 - 1;
 8004354:	879c      	strh	r4, [r3, #60]	; 0x3c
 TIM4->CCR4 = 0x400 - 1;
 8004356:	f8a3 0040 	strh.w	r0, [r3, #64]	; 0x40
		| (0 << DIR)          		//!<Direction //
		| (0 << CMS)          		//!<CMS[1:0] bits (Center-aligned mode selection) //
		| (1 << ARPE)          		//!<Auto-reload preload enable //
		| (0 << CKD);          		//!<CKD[1:0] bits (clock division) //

}
 800435a:	bcf0      	pop	{r4, r5, r6, r7}
 TIM4->DCR = 0x0000;
 800435c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 TIM4->DMAR = 0x0000;
 8004360:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 TIM4->DIER = (0 << UIE)           	//!<Update interrupt enable //
 8004364:	819a      	strh	r2, [r3, #12]
 TIM4->CR1 = (1 << CEN)    	    	//!<Counter enable //
 8004366:	8019      	strh	r1, [r3, #0]
}
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	40000800 	.word	0x40000800

08004370 <SysTick_Init>:


void	SysTick_Init(void)
{
 SysTick->VAL = 0;				// Write this register will clear itself and the settings in 
 8004370:	2000      	movs	r0, #0
								//	SysTick->CTRL
								
 SysTick->CTRL = (1 << SysTick_ENABLE)         
 8004372:	2107      	movs	r1, #7
 SysTick->VAL = 0;				// Write this register will clear itself and the settings in 
 8004374:	4b02      	ldr	r3, [pc, #8]	; (8004380 <SysTick_Init+0x10>)
				| (1 << SysTick_TICKINT)         	// Counting down to 0 pends the SysTick handler 
				| (1 << SysTick_CLKSOURCE)   	// Clock source. 0 = HCLK/8; 1 = HCLK
				| (0 << SysTick_COUNTFLAG);   	// Count Flag

 SysTick->LOAD = 72000;
 8004376:	4a03      	ldr	r2, [pc, #12]	; (8004384 <SysTick_Init+0x14>)
 SysTick->VAL = 0;				// Write this register will clear itself and the settings in 
 8004378:	6098      	str	r0, [r3, #8]
 SysTick->CTRL = (1 << SysTick_ENABLE)         
 800437a:	6019      	str	r1, [r3, #0]
 SysTick->LOAD = 72000;
 800437c:	605a      	str	r2, [r3, #4]
// SysTick->CALRB         
// This register is read-only. When clock source is set to HCLK/8 (CLKSOURCE bit is 0) the 
//	TENMS value in this register will be used to generate 1ms tick.
//

}
 800437e:	4770      	bx	lr
 8004380:	e000e010 	.word	0xe000e010
 8004384:	00011940 	.word	0x00011940

08004388 <ADC2_Init>:

void	ADC2_Init(void)
{
// NOTE: Remember to program ADC clock in RCC->CFGR

  ADC2->SR = (0 << AWD)                         /*!<Analog watchdog flag */
 8004388:	2200      	movs	r2, #0
  ADC2->JOFR1 = 0x0000;
  ADC2->JOFR2 = 0x0000;
  ADC2->JOFR3 = 0x0000;
  ADC2->JOFR4 = 0x0000;
  
  ADC2->HTR = 0x0FFF;
 800438a:	f640 70ff 	movw	r0, #4095	; 0xfff
  ADC2->SR = (0 << AWD)                         /*!<Analog watchdog flag */
 800438e:	4b0e      	ldr	r3, [pc, #56]	; (80043c8 <ADC2_Init+0x40>)
//  ADC2->JDR4;
//  ADC2->DR;

 // Do calibration
 ADC2->CR2 |= (1 << CAL);     		
 while(!BitTest(ADC2->CR2, (1 << CAL))) {
 8004390:	4619      	mov	r1, r3
  ADC2->SR = (0 << AWD)                         /*!<Analog watchdog flag */
 8004392:	601a      	str	r2, [r3, #0]
  ADC2->CR1 = (0 << AWDCH)            /*!<AWDCH[4:0] bits (Analog watchdog channel select bits) */
 8004394:	605a      	str	r2, [r3, #4]
  ADC2->CR2 = (0 << ADON)        	//           /*!<A/D Converter ON / OFF */
 8004396:	609a      	str	r2, [r3, #8]
 ADC2->SMPR1 = (0 << SMP10) 	//           /*!<SMP10[2:0] bits (Channel 10 Sample time selection) */
 8004398:	60da      	str	r2, [r3, #12]
 ADC2->SMPR2 = (0 << SMP0 )  	//        /*!<SMP0[2:0] bits (Channel 0 Sample time selection) */
 800439a:	611a      	str	r2, [r3, #16]
  ADC2->JOFR1 = 0x0000;
 800439c:	615a      	str	r2, [r3, #20]
  ADC2->JOFR2 = 0x0000;
 800439e:	619a      	str	r2, [r3, #24]
  ADC2->JOFR3 = 0x0000;
 80043a0:	61da      	str	r2, [r3, #28]
  ADC2->JOFR4 = 0x0000;
 80043a2:	621a      	str	r2, [r3, #32]
  ADC2->HTR = 0x0FFF;
 80043a4:	6258      	str	r0, [r3, #36]	; 0x24
  ADC2->LTR = 0x0000;
 80043a6:	629a      	str	r2, [r3, #40]	; 0x28
 ADC2->SQR1 = (0 << SQ13 )   //            /*!<SQ13[4:0] bits (13th conversion in regular sequence) */
 80043a8:	62da      	str	r2, [r3, #44]	; 0x2c
  ADC2->SQR2 = (0 << SQ7)      //               /*!<SQ7[4:0] bits (7th conversion in regular sequence) */
 80043aa:	631a      	str	r2, [r3, #48]	; 0x30
  ADC2->SQR3 = (0 << SQ1)     	//             /*!<SQ1[4:0] bits (1st conversion in regular sequence) */
 80043ac:	635a      	str	r2, [r3, #52]	; 0x34
  ADC2->JSQR = (0 << JSQ1)     //            /*!<JSQ1[4:0] bits (1st conversion in injected sequence) */  
 80043ae:	639a      	str	r2, [r3, #56]	; 0x38
 ADC2->CR2 |= (1 << CAL);     		
 80043b0:	689a      	ldr	r2, [r3, #8]
 80043b2:	f042 0204 	orr.w	r2, r2, #4
 80043b6:	609a      	str	r2, [r3, #8]
 while(!BitTest(ADC2->CR2, (1 << CAL))) {
 80043b8:	688b      	ldr	r3, [r1, #8]
 80043ba:	075b      	lsls	r3, r3, #29
 80043bc:	d5fc      	bpl.n	80043b8 <ADC2_Init+0x30>
 	// Wait for end of  calibration
 	}
 
 // Start ADC (the first ADON set turn on ADC power)
 ADC2->CR2 |= (1 << ADON);        	//           /*!<A/D Converter ON / OFF */
 80043be:	688b      	ldr	r3, [r1, #8]
 80043c0:	f043 0301 	orr.w	r3, r3, #1
 80043c4:	608b      	str	r3, [r1, #8]
}
 80043c6:	4770      	bx	lr
 80043c8:	40012800 	.word	0x40012800

080043cc <ADC_Poll>:


U16	ADC_Poll(ADC_TypeDef * adc, U8 chn)
{
 // Assuming that the ADC refered has been properly initialized with channel and sample time selected.
  adc->SQR3 = (chn << SQ1);     	//             /*!<SQ1[4:0] bits (1st conversion in regular sequence) */
 80043cc:	6341      	str	r1, [r0, #52]	; 0x34
 
 // Start conversion
 adc->CR2 |= (1 << ADON); 
 80043ce:	6883      	ldr	r3, [r0, #8]
 80043d0:	f043 0301 	orr.w	r3, r3, #1
 80043d4:	6083      	str	r3, [r0, #8]
 while(!BitTest(adc->SR, (1 << EOC))) {
 80043d6:	6803      	ldr	r3, [r0, #0]
 80043d8:	079b      	lsls	r3, r3, #30
 80043da:	d5fc      	bpl.n	80043d6 <ADC_Poll+0xa>
 	// Wait for end of conversion
 	}
 return (adc->DR);
 80043dc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
 80043de:	b280      	uxth	r0, r0
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop

080043e4 <TFT_Init_Ili9341>:

void	TFT_Init_Ili9341(void)
{
 80043e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 U8  tmp;

 // Reset TFT controller (Ili9341)
 SetToHigh(TFT_nRESET_Port, (1 << TFT_nRESET_Bit));
 80043e8:	f44f 6700 	mov.w	r7, #2048	; 0x800
 Delay(5000);	// About 1.1ms
 SetToLow(TFT_nRESET_Port, (1 << TFT_nRESET_Bit));
 Delay(65000);	// About 15ms
 SetToHigh(TFT_nRESET_Port, (1 << TFT_nRESET_Bit));
 80043ec:	240a      	movs	r4, #10
 SetToHigh(TFT_nRESET_Port, (1 << TFT_nRESET_Bit));
 80043ee:	4e9b      	ldr	r6, [pc, #620]	; (800465c <TFT_Init_Ili9341+0x278>)
 Delay(5000);	// About 1.1ms
 80043f0:	f241 3088 	movw	r0, #5000	; 0x1388
 80043f4:	4d9a      	ldr	r5, [pc, #616]	; (8004660 <TFT_Init_Ili9341+0x27c>)
 SetToHigh(TFT_nRESET_Port, (1 << TFT_nRESET_Bit));
 80043f6:	6137      	str	r7, [r6, #16]
 Delay(5000);	// About 1.1ms
 80043f8:	47a8      	blx	r5
 SetToLow(TFT_nRESET_Port, (1 << TFT_nRESET_Bit));
 80043fa:	6177      	str	r7, [r6, #20]
 Delay(65000);	// About 15ms
 80043fc:	f64f 50e8 	movw	r0, #65000	; 0xfde8
 8004400:	47a8      	blx	r5
 SetToHigh(TFT_nRESET_Port, (1 << TFT_nRESET_Bit));
 8004402:	6137      	str	r7, [r6, #16]
 tmp = 10;
 while(tmp) {
 	Delay(65535);
 8004404:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004408:	47a8      	blx	r5
 800440a:	1e63      	subs	r3, r4, #1
 while(tmp) {
 800440c:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8004410:	d1f8      	bne.n	8004404 <TFT_Init_Ili9341+0x20>


void	write_comm(U8 commport)
{
 // Set TFT_nCS low
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004412:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 // Set up to access Index Register (RS == 0)
 SetToLow(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004416:	f44f 4680 	mov.w	r6, #16384	; 0x4000
// Delay(2);

 TFT_Port = (TFT_Port & 0xFF00) | commport;
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 800441a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 800441e:	4b91      	ldr	r3, [pc, #580]	; (8004664 <TFT_Init_Ili9341+0x280>)
 TFT_Port = (TFT_Port & 0xFF00) | commport;
 8004420:	488e      	ldr	r0, [pc, #568]	; (800465c <TFT_Init_Ili9341+0x278>)
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004422:	615a      	str	r2, [r3, #20]
 SetToLow(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004424:	615e      	str	r6, [r3, #20]
 TFT_Port = (TFT_Port & 0xFF00) | commport;
 8004426:	68c7      	ldr	r7, [r0, #12]
 // Set up to access Data Register (RS == 1)
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
// Delay(2);

 // Set TFT_nCS high
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004428:	2464      	movs	r4, #100	; 0x64
 TFT_Port = (TFT_Port & 0xFF00) | commport;
 800442a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 800442e:	f047 07cf 	orr.w	r7, r7, #207	; 0xcf
 8004432:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004434:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004436:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004438:	611e      	str	r6, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 800443a:	611a      	str	r2, [r3, #16]
}

void write_data(U8 data)
{
 // Set TFT_nCS low
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 800443c:	615a      	str	r2, [r3, #20]

 // Set up to access Data Register (RS == 1)
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 800443e:	611e      	str	r6, [r3, #16]

 TFT_Port = (TFT_Port & 0xFF00) | data;
 8004440:	68c7      	ldr	r7, [r0, #12]
 8004442:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8004446:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004448:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 800444a:	6119      	str	r1, [r3, #16]

 // Set TFT_nCS high
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 800444c:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 800444e:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004450:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 8004452:	68c7      	ldr	r7, [r0, #12]
 8004454:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8004458:	f047 07c1 	orr.w	r7, r7, #193	; 0xc1
 800445c:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 800445e:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004460:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004462:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004464:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004466:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 8004468:	68c7      	ldr	r7, [r0, #12]
 800446a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 800446e:	f047 0730 	orr.w	r7, r7, #48	; 0x30
 8004472:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004474:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004476:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004478:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 800447a:	615a      	str	r2, [r3, #20]
 SetToLow(TFT_RS_Port, (1 << TFT_RS_Bit));
 800447c:	615e      	str	r6, [r3, #20]
 TFT_Port = (TFT_Port & 0xFF00) | commport;
 800447e:	68c7      	ldr	r7, [r0, #12]
 8004480:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8004484:	f047 07ed 	orr.w	r7, r7, #237	; 0xed
 8004488:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 800448a:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 800448c:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 800448e:	611e      	str	r6, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004490:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004492:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004494:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 8004496:	68c7      	ldr	r7, [r0, #12]
 8004498:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 800449c:	f047 0767 	orr.w	r7, r7, #103	; 0x67
 80044a0:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80044a2:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80044a4:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 80044a6:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 80044a8:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 80044aa:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 80044ac:	68c7      	ldr	r7, [r0, #12]
 80044ae:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80044b2:	f047 0703 	orr.w	r7, r7, #3
 80044b6:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80044b8:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80044ba:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 80044bc:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 80044be:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 80044c0:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 80044c2:	68c7      	ldr	r7, [r0, #12]
 80044c4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80044c8:	f047 0712 	orr.w	r7, r7, #18
 80044cc:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80044ce:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80044d0:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 80044d2:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 80044d4:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 80044d6:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 80044d8:	68c7      	ldr	r7, [r0, #12]
 80044da:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80044de:	f047 0781 	orr.w	r7, r7, #129	; 0x81
 80044e2:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80044e4:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80044e6:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 80044e8:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 80044ea:	615a      	str	r2, [r3, #20]
 SetToLow(TFT_RS_Port, (1 << TFT_RS_Bit));
 80044ec:	615e      	str	r6, [r3, #20]
 TFT_Port = (TFT_Port & 0xFF00) | commport;
 80044ee:	68c7      	ldr	r7, [r0, #12]
 80044f0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80044f4:	f047 07cb 	orr.w	r7, r7, #203	; 0xcb
 80044f8:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80044fa:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80044fc:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 80044fe:	611e      	str	r6, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004500:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004502:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004504:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 8004506:	68c7      	ldr	r7, [r0, #12]
 8004508:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 800450c:	f047 0739 	orr.w	r7, r7, #57	; 0x39
 8004510:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004512:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004514:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004516:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004518:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 800451a:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 800451c:	68c7      	ldr	r7, [r0, #12]
 800451e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8004522:	f047 072c 	orr.w	r7, r7, #44	; 0x2c
 8004526:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004528:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 800452a:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 800452c:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 800452e:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004530:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 8004532:	68c7      	ldr	r7, [r0, #12]
 8004534:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8004538:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 800453a:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 800453c:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 800453e:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004540:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004542:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 8004544:	68c7      	ldr	r7, [r0, #12]
 8004546:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 800454a:	f047 0734 	orr.w	r7, r7, #52	; 0x34
 800454e:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004550:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004552:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004554:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004556:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004558:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 800455a:	68c7      	ldr	r7, [r0, #12]
 800455c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8004560:	f047 0702 	orr.w	r7, r7, #2
 8004564:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004566:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004568:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 800456a:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 800456c:	615a      	str	r2, [r3, #20]
 SetToLow(TFT_RS_Port, (1 << TFT_RS_Bit));
 800456e:	615e      	str	r6, [r3, #20]
 TFT_Port = (TFT_Port & 0xFF00) | commport;
 8004570:	68c7      	ldr	r7, [r0, #12]
 8004572:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8004576:	f047 07ea 	orr.w	r7, r7, #234	; 0xea
 800457a:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 800457c:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 800457e:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004580:	611e      	str	r6, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004582:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004584:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004586:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 8004588:	68c7      	ldr	r7, [r0, #12]
 800458a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 800458e:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004590:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004592:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004594:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004596:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004598:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 800459a:	68c7      	ldr	r7, [r0, #12]
 800459c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80045a0:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80045a2:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80045a4:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 80045a6:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 80045a8:	615a      	str	r2, [r3, #20]
 SetToLow(TFT_RS_Port, (1 << TFT_RS_Bit));
 80045aa:	615e      	str	r6, [r3, #20]
 TFT_Port = (TFT_Port & 0xFF00) | commport;
 80045ac:	68c7      	ldr	r7, [r0, #12]
 80045ae:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80045b2:	f047 07e8 	orr.w	r7, r7, #232	; 0xe8
 80045b6:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80045b8:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80045ba:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 80045bc:	611e      	str	r6, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 80045be:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 80045c0:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 80045c2:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 80045c4:	68c7      	ldr	r7, [r0, #12]
 80045c6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80045ca:	f047 0785 	orr.w	r7, r7, #133	; 0x85
 80045ce:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80045d0:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80045d2:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 80045d4:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 80045d6:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 80045d8:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 80045da:	68c7      	ldr	r7, [r0, #12]
 80045dc:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80045e0:	f047 070a 	orr.w	r7, r7, #10
 80045e4:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80045e6:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80045e8:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 80045ea:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 80045ec:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 80045ee:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 80045f0:	68c7      	ldr	r7, [r0, #12]
 80045f2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80045f6:	f047 0778 	orr.w	r7, r7, #120	; 0x78
 80045fa:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80045fc:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80045fe:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004600:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004602:	615a      	str	r2, [r3, #20]
 SetToLow(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004604:	615e      	str	r6, [r3, #20]
 TFT_Port = (TFT_Port & 0xFF00) | commport;
 8004606:	68c7      	ldr	r7, [r0, #12]
 8004608:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 800460c:	f047 07f7 	orr.w	r7, r7, #247	; 0xf7
 8004610:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004612:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004614:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004616:	611e      	str	r6, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004618:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 800461a:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 800461c:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 800461e:	68c7      	ldr	r7, [r0, #12]
 8004620:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8004624:	f047 0720 	orr.w	r7, r7, #32
 8004628:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 800462a:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 800462c:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 800462e:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004630:	615a      	str	r2, [r3, #20]
 SetToLow(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004632:	615e      	str	r6, [r3, #20]
 TFT_Port = (TFT_Port & 0xFF00) | commport;
 8004634:	68c7      	ldr	r7, [r0, #12]
 8004636:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 800463a:	f047 07c0 	orr.w	r7, r7, #192	; 0xc0
 800463e:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004640:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004642:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004644:	611e      	str	r6, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004646:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004648:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 800464a:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 800464c:	68c7      	ldr	r7, [r0, #12]
 800464e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8004652:	f047 0726 	orr.w	r7, r7, #38	; 0x26
 8004656:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004658:	6159      	str	r1, [r3, #20]
 800465a:	e005      	b.n	8004668 <TFT_Init_Ili9341+0x284>
 800465c:	40010c00 	.word	0x40010c00
 8004660:	08004c55 	.word	0x08004c55
 8004664:	40011000 	.word	0x40011000
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004668:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 800466a:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 800466c:	615a      	str	r2, [r3, #20]
 SetToLow(TFT_RS_Port, (1 << TFT_RS_Bit));
 800466e:	615e      	str	r6, [r3, #20]
 TFT_Port = (TFT_Port & 0xFF00) | commport;
 8004670:	68c7      	ldr	r7, [r0, #12]
 8004672:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8004676:	f047 07c1 	orr.w	r7, r7, #193	; 0xc1
 800467a:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 800467c:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 800467e:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004680:	611e      	str	r6, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004682:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004684:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004686:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 8004688:	68c7      	ldr	r7, [r0, #12]
 800468a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 800468e:	f047 0701 	orr.w	r7, r7, #1
 8004692:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004694:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004696:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004698:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 800469a:	615a      	str	r2, [r3, #20]
 SetToLow(TFT_RS_Port, (1 << TFT_RS_Bit));
 800469c:	615e      	str	r6, [r3, #20]
 TFT_Port = (TFT_Port & 0xFF00) | commport;
 800469e:	68c7      	ldr	r7, [r0, #12]
 80046a0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80046a4:	f047 07c5 	orr.w	r7, r7, #197	; 0xc5
 80046a8:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80046aa:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80046ac:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 80046ae:	611e      	str	r6, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 80046b0:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 80046b2:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 80046b4:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 80046b6:	68c7      	ldr	r7, [r0, #12]
 80046b8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80046bc:	f047 072b 	orr.w	r7, r7, #43	; 0x2b
 80046c0:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80046c2:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80046c4:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 80046c6:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 80046c8:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 80046ca:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 80046cc:	68c7      	ldr	r7, [r0, #12]
 80046ce:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80046d2:	f047 072f 	orr.w	r7, r7, #47	; 0x2f
 80046d6:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80046d8:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80046da:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 80046dc:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 80046de:	615a      	str	r2, [r3, #20]
 SetToLow(TFT_RS_Port, (1 << TFT_RS_Bit));
 80046e0:	615e      	str	r6, [r3, #20]
 TFT_Port = (TFT_Port & 0xFF00) | commport;
 80046e2:	68c7      	ldr	r7, [r0, #12]
 80046e4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80046e8:	f047 07c7 	orr.w	r7, r7, #199	; 0xc7
 80046ec:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80046ee:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80046f0:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 80046f2:	611e      	str	r6, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 80046f4:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 80046f6:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 80046f8:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 80046fa:	68c7      	ldr	r7, [r0, #12]
 80046fc:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8004700:	f047 07c7 	orr.w	r7, r7, #199	; 0xc7
 8004704:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004706:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004708:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 800470a:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 800470c:	615a      	str	r2, [r3, #20]
 SetToLow(TFT_RS_Port, (1 << TFT_RS_Bit));
 800470e:	615e      	str	r6, [r3, #20]
 TFT_Port = (TFT_Port & 0xFF00) | commport;
 8004710:	68c7      	ldr	r7, [r0, #12]
 8004712:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8004716:	f047 073a 	orr.w	r7, r7, #58	; 0x3a
 800471a:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 800471c:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 800471e:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004720:	611e      	str	r6, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004722:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004724:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004726:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 8004728:	68c7      	ldr	r7, [r0, #12]
 800472a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 800472e:	f047 0755 	orr.w	r7, r7, #85	; 0x55
 8004732:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004734:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004736:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004738:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 800473a:	615a      	str	r2, [r3, #20]
 SetToLow(TFT_RS_Port, (1 << TFT_RS_Bit));
 800473c:	615e      	str	r6, [r3, #20]
 TFT_Port = (TFT_Port & 0xFF00) | commport;
 800473e:	68c7      	ldr	r7, [r0, #12]
 8004740:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8004744:	f047 0736 	orr.w	r7, r7, #54	; 0x36
 8004748:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 800474a:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 800474c:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 800474e:	611e      	str	r6, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004750:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004752:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004754:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 8004756:	68c7      	ldr	r7, [r0, #12]
 8004758:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 800475c:	f047 0720 	orr.w	r7, r7, #32
 8004760:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004762:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004764:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004766:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004768:	615a      	str	r2, [r3, #20]
 SetToLow(TFT_RS_Port, (1 << TFT_RS_Bit));
 800476a:	615e      	str	r6, [r3, #20]
 TFT_Port = (TFT_Port & 0xFF00) | commport;
 800476c:	68c7      	ldr	r7, [r0, #12]
 800476e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8004772:	f047 07b1 	orr.w	r7, r7, #177	; 0xb1
 8004776:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004778:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 800477a:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 800477c:	611e      	str	r6, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 800477e:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004780:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004782:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 8004784:	68c7      	ldr	r7, [r0, #12]
 8004786:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 800478a:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 800478c:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 800478e:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004790:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004792:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004794:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 8004796:	68c7      	ldr	r7, [r0, #12]
 8004798:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 800479c:	f047 0718 	orr.w	r7, r7, #24
 80047a0:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80047a2:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80047a4:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 80047a6:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 80047a8:	615a      	str	r2, [r3, #20]
 SetToLow(TFT_RS_Port, (1 << TFT_RS_Bit));
 80047aa:	615e      	str	r6, [r3, #20]
 TFT_Port = (TFT_Port & 0xFF00) | commport;
 80047ac:	68c7      	ldr	r7, [r0, #12]
 80047ae:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80047b2:	f047 07b6 	orr.w	r7, r7, #182	; 0xb6
 80047b6:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80047b8:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80047ba:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 80047bc:	611e      	str	r6, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 80047be:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 80047c0:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 80047c2:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 80047c4:	68c7      	ldr	r7, [r0, #12]
 80047c6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80047ca:	f047 070a 	orr.w	r7, r7, #10
 80047ce:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80047d0:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80047d2:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 80047d4:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 80047d6:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 80047d8:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 80047da:	68c7      	ldr	r7, [r0, #12]
 80047dc:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80047e0:	f047 07e2 	orr.w	r7, r7, #226	; 0xe2
 80047e4:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80047e6:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80047e8:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 80047ea:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 80047ec:	615a      	str	r2, [r3, #20]
 SetToLow(TFT_RS_Port, (1 << TFT_RS_Bit));
 80047ee:	615e      	str	r6, [r3, #20]
 TFT_Port = (TFT_Port & 0xFF00) | commport;
 80047f0:	68c7      	ldr	r7, [r0, #12]
 80047f2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80047f6:	f047 07f2 	orr.w	r7, r7, #242	; 0xf2
 80047fa:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80047fc:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80047fe:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004800:	611e      	str	r6, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004802:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004804:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004806:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 8004808:	68c7      	ldr	r7, [r0, #12]
 800480a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 800480e:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004810:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004812:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004814:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004816:	615a      	str	r2, [r3, #20]
 SetToLow(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004818:	615e      	str	r6, [r3, #20]
 TFT_Port = (TFT_Port & 0xFF00) | commport;
 800481a:	68c7      	ldr	r7, [r0, #12]
 800481c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8004820:	f047 0726 	orr.w	r7, r7, #38	; 0x26
 8004824:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004826:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004828:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 800482a:	611e      	str	r6, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 800482c:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 800482e:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004830:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 8004832:	68c7      	ldr	r7, [r0, #12]
 8004834:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8004838:	f047 0701 	orr.w	r7, r7, #1
 800483c:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 800483e:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004840:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004842:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004844:	615a      	str	r2, [r3, #20]
 SetToLow(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004846:	615e      	str	r6, [r3, #20]
 TFT_Port = (TFT_Port & 0xFF00) | commport;
 8004848:	68c7      	ldr	r7, [r0, #12]
 800484a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 800484e:	f047 07e0 	orr.w	r7, r7, #224	; 0xe0
 8004852:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004854:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004856:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004858:	611e      	str	r6, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 800485a:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 800485c:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 800485e:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 8004860:	68c7      	ldr	r7, [r0, #12]
 8004862:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8004866:	f047 070f 	orr.w	r7, r7, #15
 800486a:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 800486c:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 800486e:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004870:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004872:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004874:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 8004876:	68c7      	ldr	r7, [r0, #12]
 8004878:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 800487c:	f047 071d 	orr.w	r7, r7, #29
 8004880:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004882:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004884:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004886:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004888:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 800488a:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 800488c:	68c7      	ldr	r7, [r0, #12]
 800488e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8004892:	f047 071a 	orr.w	r7, r7, #26
 8004896:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004898:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 800489a:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 800489c:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 800489e:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 80048a0:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 80048a2:	68c7      	ldr	r7, [r0, #12]
 80048a4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80048a8:	f047 0709 	orr.w	r7, r7, #9
 80048ac:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80048ae:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80048b0:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 80048b2:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 80048b4:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 80048b6:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 80048b8:	68c7      	ldr	r7, [r0, #12]
 80048ba:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80048be:	f047 070f 	orr.w	r7, r7, #15
 80048c2:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80048c4:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80048c6:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 80048c8:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 80048ca:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 80048cc:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 80048ce:	68c7      	ldr	r7, [r0, #12]
 80048d0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80048d4:	f047 0709 	orr.w	r7, r7, #9
 80048d8:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80048da:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80048dc:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 80048de:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 80048e0:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 80048e2:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 80048e4:	68c7      	ldr	r7, [r0, #12]
 80048e6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80048ea:	f047 0746 	orr.w	r7, r7, #70	; 0x46
 80048ee:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80048f0:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80048f2:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 80048f4:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 80048f6:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 80048f8:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 80048fa:	68c7      	ldr	r7, [r0, #12]
 80048fc:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8004900:	f047 0788 	orr.w	r7, r7, #136	; 0x88
 8004904:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004906:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004908:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 800490a:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 800490c:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 800490e:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 8004910:	68c7      	ldr	r7, [r0, #12]
 8004912:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8004916:	f047 0739 	orr.w	r7, r7, #57	; 0x39
 800491a:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 800491c:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 800491e:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004920:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004922:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004924:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 8004926:	68c7      	ldr	r7, [r0, #12]
 8004928:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 800492c:	f047 0705 	orr.w	r7, r7, #5
 8004930:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004932:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004934:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004936:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004938:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 800493a:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 800493c:	68c7      	ldr	r7, [r0, #12]
 800493e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8004942:	f047 070f 	orr.w	r7, r7, #15
 8004946:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004948:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 800494a:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 800494c:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 800494e:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004950:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 8004952:	68c7      	ldr	r7, [r0, #12]
 8004954:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8004958:	f047 0703 	orr.w	r7, r7, #3
 800495c:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 800495e:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004960:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004962:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004964:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004966:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 8004968:	68c7      	ldr	r7, [r0, #12]
 800496a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 800496e:	f047 0707 	orr.w	r7, r7, #7
 8004972:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004974:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004976:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004978:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 800497a:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 800497c:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 800497e:	68c7      	ldr	r7, [r0, #12]
 8004980:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8004984:	f047 0705 	orr.w	r7, r7, #5
 8004988:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 800498a:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 800498c:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 800498e:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004990:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004992:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 8004994:	68c7      	ldr	r7, [r0, #12]
 8004996:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 800499a:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 800499c:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 800499e:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 80049a0:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 80049a2:	615a      	str	r2, [r3, #20]
 SetToLow(TFT_RS_Port, (1 << TFT_RS_Bit));
 80049a4:	615e      	str	r6, [r3, #20]
 TFT_Port = (TFT_Port & 0xFF00) | commport;
 80049a6:	68c7      	ldr	r7, [r0, #12]
 80049a8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80049ac:	f047 07e1 	orr.w	r7, r7, #225	; 0xe1
 80049b0:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80049b2:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80049b4:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 80049b6:	611e      	str	r6, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 80049b8:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 80049ba:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 80049bc:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 80049be:	68c7      	ldr	r7, [r0, #12]
 80049c0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80049c4:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80049c6:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80049c8:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 80049ca:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 80049cc:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 80049ce:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 80049d0:	68c7      	ldr	r7, [r0, #12]
 80049d2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80049d6:	f047 0722 	orr.w	r7, r7, #34	; 0x22
 80049da:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80049dc:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80049de:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 80049e0:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 80049e2:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 80049e4:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 80049e6:	68c7      	ldr	r7, [r0, #12]
 80049e8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80049ec:	f047 0725 	orr.w	r7, r7, #37	; 0x25
 80049f0:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80049f2:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 80049f4:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 80049f6:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 80049f8:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 80049fa:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 80049fc:	68c7      	ldr	r7, [r0, #12]
 80049fe:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8004a02:	f047 0706 	orr.w	r7, r7, #6
 8004a06:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004a08:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004a0a:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004a0c:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004a0e:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004a10:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 8004a12:	68c7      	ldr	r7, [r0, #12]
 8004a14:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8004a18:	f047 0710 	orr.w	r7, r7, #16
 8004a1c:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004a1e:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004a20:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004a22:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004a24:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004a26:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 8004a28:	68c7      	ldr	r7, [r0, #12]
 8004a2a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8004a2e:	f047 0706 	orr.w	r7, r7, #6
 8004a32:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004a34:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004a36:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004a38:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004a3a:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004a3c:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 8004a3e:	68c7      	ldr	r7, [r0, #12]
 8004a40:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8004a44:	f047 0739 	orr.w	r7, r7, #57	; 0x39
 8004a48:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004a4a:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004a4c:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004a4e:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004a50:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004a52:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 8004a54:	68c7      	ldr	r7, [r0, #12]
 8004a56:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8004a5a:	f047 0722 	orr.w	r7, r7, #34	; 0x22
 8004a5e:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004a60:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004a62:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004a64:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004a66:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004a68:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 8004a6a:	68c7      	ldr	r7, [r0, #12]
 8004a6c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8004a70:	f047 074a 	orr.w	r7, r7, #74	; 0x4a
 8004a74:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004a76:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004a78:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004a7a:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004a7c:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004a7e:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 8004a80:	68c7      	ldr	r7, [r0, #12]
 8004a82:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8004a86:	f047 070a 	orr.w	r7, r7, #10
 8004a8a:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004a8c:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004a8e:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004a90:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004a92:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004a94:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 8004a96:	68c7      	ldr	r7, [r0, #12]
 8004a98:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8004a9c:	f047 0710 	orr.w	r7, r7, #16
 8004aa0:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004aa2:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004aa4:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004aa6:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004aa8:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004aaa:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 8004aac:	68c7      	ldr	r7, [r0, #12]
 8004aae:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8004ab2:	f047 070c 	orr.w	r7, r7, #12
 8004ab6:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004ab8:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004aba:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004abc:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004abe:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004ac0:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 8004ac2:	68c7      	ldr	r7, [r0, #12]
 8004ac4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8004ac8:	f047 0738 	orr.w	r7, r7, #56	; 0x38
 8004acc:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004ace:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004ad0:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004ad2:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004ad4:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004ad6:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 8004ad8:	68c7      	ldr	r7, [r0, #12]
 8004ada:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8004ade:	f047 073a 	orr.w	r7, r7, #58	; 0x3a
 8004ae2:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004ae4:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004ae6:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004ae8:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004aea:	615a      	str	r2, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004aec:	611e      	str	r6, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 8004aee:	68c7      	ldr	r7, [r0, #12]
 8004af0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8004af4:	f047 070f 	orr.w	r7, r7, #15
 8004af8:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004afa:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004afc:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004afe:	611a      	str	r2, [r3, #16]
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004b00:	615a      	str	r2, [r3, #20]
 SetToLow(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004b02:	615e      	str	r6, [r3, #20]
 TFT_Port = (TFT_Port & 0xFF00) | commport;
 8004b04:	68c7      	ldr	r7, [r0, #12]
 8004b06:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8004b0a:	f047 0711 	orr.w	r7, r7, #17
 8004b0e:	60c7      	str	r7, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004b10:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004b12:	6119      	str	r1, [r3, #16]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004b14:	611e      	str	r6, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004b16:	611a      	str	r2, [r3, #16]
	 	Delay(50000);
 8004b18:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004b1c:	47a8      	blx	r5
 8004b1e:	1e63      	subs	r3, r4, #1
	 while(tmp) {
 8004b20:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8004b24:	d1f8      	bne.n	8004b18 <TFT_Init_Ili9341+0x734>
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004b26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 SetToLow(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004b2a:	f44f 4480 	mov.w	r4, #16384	; 0x4000
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004b2e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004b32:	4b0b      	ldr	r3, [pc, #44]	; (8004b60 <TFT_Init_Ili9341+0x77c>)
 TFT_Port = (TFT_Port & 0xFF00) | commport;
 8004b34:	480b      	ldr	r0, [pc, #44]	; (8004b64 <TFT_Init_Ili9341+0x780>)
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004b36:	6159      	str	r1, [r3, #20]
 SetToLow(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004b38:	615c      	str	r4, [r3, #20]
 TFT_Port = (TFT_Port & 0xFF00) | commport;
 8004b3a:	68c2      	ldr	r2, [r0, #12]
 8004b3c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8004b40:	f042 0229 	orr.w	r2, r2, #41	; 0x29
 8004b44:	60c2      	str	r2, [r0, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004b46:	615e      	str	r6, [r3, #20]
 Delay(50000);
 8004b48:	f24c 3050 	movw	r0, #50000	; 0xc350
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004b4c:	611e      	str	r6, [r3, #16]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004b4e:	611c      	str	r4, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004b50:	6119      	str	r1, [r3, #16]
 Delay(50000);
 8004b52:	47a8      	blx	r5
 Delay(50000);
 8004b54:	462b      	mov	r3, r5
}
 8004b56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 Delay(50000);
 8004b5a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004b5e:	4718      	bx	r3
 8004b60:	40011000 	.word	0x40011000
 8004b64:	40010c00 	.word	0x40010c00

08004b68 <write_comm>:
{
 8004b68:	b470      	push	{r4, r5, r6}
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004b6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 SetToLow(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004b6e:	f44f 4480 	mov.w	r4, #16384	; 0x4000
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004b72:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004b76:	4b07      	ldr	r3, [pc, #28]	; (8004b94 <write_comm+0x2c>)
 TFT_Port = (TFT_Port & 0xFF00) | commport;
 8004b78:	4e07      	ldr	r6, [pc, #28]	; (8004b98 <write_comm+0x30>)
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004b7a:	6159      	str	r1, [r3, #20]
 SetToLow(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004b7c:	615c      	str	r4, [r3, #20]
 TFT_Port = (TFT_Port & 0xFF00) | commport;
 8004b7e:	68f2      	ldr	r2, [r6, #12]
 8004b80:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8004b84:	4310      	orrs	r0, r2
 8004b86:	60f0      	str	r0, [r6, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004b88:	615d      	str	r5, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004b8a:	611d      	str	r5, [r3, #16]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004b8c:	611c      	str	r4, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004b8e:	6119      	str	r1, [r3, #16]
}
 8004b90:	bc70      	pop	{r4, r5, r6}
 8004b92:	4770      	bx	lr
 8004b94:	40011000 	.word	0x40011000
 8004b98:	40010c00 	.word	0x40010c00

08004b9c <write_data>:
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004b9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004ba0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
{
 8004ba4:	b430      	push	{r4, r5}
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004ba6:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004baa:	4b07      	ldr	r3, [pc, #28]	; (8004bc8 <write_data+0x2c>)
 TFT_Port = (TFT_Port & 0xFF00) | data;
 8004bac:	4d07      	ldr	r5, [pc, #28]	; (8004bcc <write_data+0x30>)
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004bae:	6159      	str	r1, [r3, #20]
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004bb0:	611a      	str	r2, [r3, #16]
 TFT_Port = (TFT_Port & 0xFF00) | data;
 8004bb2:	68ea      	ldr	r2, [r5, #12]
 8004bb4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8004bb8:	4310      	orrs	r0, r2
 8004bba:	60e8      	str	r0, [r5, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004bbc:	615c      	str	r4, [r3, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004bbe:	611c      	str	r4, [r3, #16]
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004bc0:	6119      	str	r1, [r3, #16]
 
}
 8004bc2:	bc30      	pop	{r4, r5}
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	40011000 	.word	0x40011000
 8004bcc:	40010c00 	.word	0x40010c00

08004bd0 <assert_failed>:


void assert_failed(U8 * file, U32 line)
//void assert_failed((U8 *) file, U32 line)
{
}
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop

08004bd4 <NVIC_Configuration>:
  * @brief  Configures the nested vectored interrupt controller.
  * @param  None
  * @retval None
  */
void NVIC_Configuration(void)
{
 8004bd4:	b570      	push	{r4, r5, r6, lr}
  NVIC_InitTypeDef NVIC_InitStructure;

// NVIC_SetVectorTable(NVIC_VectTab_RAM, 0);
 NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0);
 8004bd6:	2100      	movs	r1, #0
{
 8004bd8:	b082      	sub	sp, #8
 NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0);
 8004bda:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8004bde:	4b11      	ldr	r3, [pc, #68]	; (8004c24 <NVIC_Configuration+0x50>)
 8004be0:	4798      	blx	r3


  // Enable the TIM1 Interrupt 
  NVIC_InitStructure.NVIC_IRQChannel = TIM1_CC_IRQn;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8004be2:	2600      	movs	r6, #0
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8004be4:	2501      	movs	r5, #1
  NVIC_InitStructure.NVIC_IRQChannel = TIM1_CC_IRQn;
 8004be6:	231b      	movs	r3, #27
  NVIC_Init(&NVIC_InitStructure); 
 8004be8:	4c0f      	ldr	r4, [pc, #60]	; (8004c28 <NVIC_Configuration+0x54>)
 8004bea:	a801      	add	r0, sp, #4
  NVIC_InitStructure.NVIC_IRQChannel = TIM1_CC_IRQn;
 8004bec:	f8ad 3004 	strh.w	r3, [sp, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8004bf0:	f88d 6006 	strb.w	r6, [sp, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8004bf4:	f88d 5007 	strb.w	r5, [sp, #7]
  NVIC_Init(&NVIC_InitStructure); 
 8004bf8:	47a0      	blx	r4


  // Enable the ADC1 Interrupt 
  NVIC_InitStructure.NVIC_IRQChannel = ADC1_2_IRQn;
 8004bfa:	2312      	movs	r3, #18
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure); 
 8004bfc:	a801      	add	r0, sp, #4
  NVIC_InitStructure.NVIC_IRQChannel = ADC1_2_IRQn;
 8004bfe:	f8ad 3004 	strh.w	r3, [sp, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8004c02:	f88d 6006 	strb.w	r6, [sp, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8004c06:	f88d 5007 	strb.w	r5, [sp, #7]
  NVIC_Init(&NVIC_InitStructure); 
 8004c0a:	47a0      	blx	r4
 
  // Enable the DMA1 channel1 Interrupt 
  NVIC_InitStructure.NVIC_IRQChannel = DMA1_Channel1_IRQn;
 8004c0c:	230b      	movs	r3, #11
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
 8004c0e:	a801      	add	r0, sp, #4
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8004c10:	f88d 6006 	strb.w	r6, [sp, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8004c14:	f88d 5007 	strb.w	r5, [sp, #7]
  NVIC_InitStructure.NVIC_IRQChannel = DMA1_Channel1_IRQn;
 8004c18:	f8ad 3004 	strh.w	r3, [sp, #4]
  NVIC_Init(&NVIC_InitStructure);
 8004c1c:	47a0      	blx	r4

}
 8004c1e:	b002      	add	sp, #8
 8004c20:	bd70      	pop	{r4, r5, r6, pc}
 8004c22:	bf00      	nop
 8004c24:	08005e19 	.word	0x08005e19
 8004c28:	08005d8d 	.word	0x08005d8d

08004c2c <OutputTLvl>:


void	OutputTLvl(void)
{
 8004c2c:	b510      	push	{r4, lr}
 TIM4->CCR3 = GetTrigLvl() + GetVPosOfs() + 0x800;
 8004c2e:	4b06      	ldr	r3, [pc, #24]	; (8004c48 <OutputTLvl+0x1c>)
 8004c30:	4798      	blx	r3
 8004c32:	4b06      	ldr	r3, [pc, #24]	; (8004c4c <OutputTLvl+0x20>)
 8004c34:	4604      	mov	r4, r0
 8004c36:	4798      	blx	r3
 8004c38:	4420      	add	r0, r4
 8004c3a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8004c3e:	4b04      	ldr	r3, [pc, #16]	; (8004c50 <OutputTLvl+0x24>)
 8004c40:	b280      	uxth	r0, r0
 8004c42:	8798      	strh	r0, [r3, #60]	; 0x3c
}
 8004c44:	bd10      	pop	{r4, pc}
 8004c46:	bf00      	nop
 8004c48:	080020cd 	.word	0x080020cd
 8004c4c:	08002269 	.word	0x08002269
 8004c50:	40000800 	.word	0x40000800

08004c54 <Delay>:
//-----------------------------------------------------------------------------

#include	"Common.h"

void	Delay(volatile U16 count)
{
 8004c54:	b082      	sub	sp, #8
 8004c56:	f8ad 0006 	strh.w	r0, [sp, #6]
 while(count) {
 8004c5a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	b153      	cbz	r3, 8004c78 <Delay+0x24>
 	count--;
 8004c62:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8004c66:	3b01      	subs	r3, #1
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	f8ad 3006 	strh.w	r3, [sp, #6]
 while(count) {
 8004c6e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1f4      	bne.n	8004c62 <Delay+0xe>
 	}
}
 8004c78:	b002      	add	sp, #8
 8004c7a:	4770      	bx	lr

08004c7c <SetWindow>:
{
 FillRect(ScreenX0, ScreenY0, ScreenXsize, ScreenYsize, clBlack);
}

void	SetWindow(U16 x, U16 xsize, U16 y, U16 ysize)
{
 8004c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c80:	4688      	mov	r8, r1
 8004c82:	4606      	mov	r6, r0
 8004c84:	4615      	mov	r5, r2
 8004c86:	461f      	mov	r7, r3
 write_comm(0x2A);
 8004c88:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8004cd0 <SetWindow+0x54>
 8004c8c:	202a      	movs	r0, #42	; 0x2a

 write_data(x >> 8);
 8004c8e:	4c0f      	ldr	r4, [pc, #60]	; (8004ccc <SetWindow+0x50>)
 write_comm(0x2A);
 8004c90:	47c8      	blx	r9
 write_data(x);
 x = x + xsize - 1;
 8004c92:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 write_data(x >> 8);
 8004c96:	0a30      	lsrs	r0, r6, #8
 8004c98:	47a0      	blx	r4
 write_data(x);
 8004c9a:	b2f0      	uxtb	r0, r6
 x = x + xsize - 1;
 8004c9c:	4446      	add	r6, r8
 8004c9e:	b2b6      	uxth	r6, r6
 write_data(x);
 8004ca0:	47a0      	blx	r4
 write_data(x >> 8);
 8004ca2:	0a30      	lsrs	r0, r6, #8
 8004ca4:	47a0      	blx	r4
 write_data(x);
 8004ca6:	b2f0      	uxtb	r0, r6
 8004ca8:	47a0      	blx	r4

 
 write_comm(0x2B);
 8004caa:	202b      	movs	r0, #43	; 0x2b
 8004cac:	47c8      	blx	r9
 write_data(y >> 8);
 write_data(y);
 y = y + ysize - 1;
 8004cae:	3f01      	subs	r7, #1
 write_data(y >> 8);
 8004cb0:	0a28      	lsrs	r0, r5, #8
 8004cb2:	47a0      	blx	r4
 write_data(y);
 8004cb4:	b2e8      	uxtb	r0, r5
 y = y + ysize - 1;
 8004cb6:	443d      	add	r5, r7
 8004cb8:	b2ad      	uxth	r5, r5
 write_data(y);
 8004cba:	47a0      	blx	r4
 write_data(y >> 8);
 8004cbc:	0a28      	lsrs	r0, r5, #8
 8004cbe:	47a0      	blx	r4
 write_data(y);
 8004cc0:	b2e8      	uxtb	r0, r5
 8004cc2:	4623      	mov	r3, r4
}
 8004cc4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 write_data(y);
 8004cc8:	4718      	bx	r3
 8004cca:	bf00      	nop
 8004ccc:	08004b9d 	.word	0x08004b9d
 8004cd0:	08004b69 	.word	0x08004b69

08004cd4 <FillRect>:


// ==========================================
// Fill rectangle area with given color
void FillRect(S16 x, S16 y, S16 xsize, S16 ysize, U16 color)
{
 8004cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cd8:	4617      	mov	r7, r2
 8004cda:	4698      	mov	r8, r3
 U32 tmp; 

 SetWindow(x, xsize, y, ysize);
 8004cdc:	b28a      	uxth	r2, r1
 8004cde:	b280      	uxth	r0, r0
 8004ce0:	b2b9      	uxth	r1, r7
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	4d19      	ldr	r5, [pc, #100]	; (8004d4c <FillRect+0x78>)
{
 8004ce6:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 SetWindow(x, xsize, y, ysize);
 8004cea:	47a8      	blx	r5
 
// Delay(200);

 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));

 SetToLow(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004cec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004cf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
// Delay(2);

 TFT_Port = (TFT_Port & 0xFF00) | 0x2C;
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004cf4:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004cf8:	4815      	ldr	r0, [pc, #84]	; (8004d50 <FillRect+0x7c>)
 TFT_Port = (TFT_Port & 0xFF00) | 0x2C;
 8004cfa:	4e16      	ldr	r6, [pc, #88]	; (8004d54 <FillRect+0x80>)
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004cfc:	6143      	str	r3, [r0, #20]
 SetToLow(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004cfe:	6141      	str	r1, [r0, #20]
 TFT_Port = (TFT_Port & 0xFF00) | 0x2C;
 8004d00:	68f2      	ldr	r2, [r6, #12]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));

 tmp = (U32)xsize * (U32)ysize;
 8004d02:	fb08 f707 	mul.w	r7, r8, r7
 TFT_Port = (TFT_Port & 0xFF00) | 0x2C;
 8004d06:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8004d0a:	f042 022c 	orr.w	r2, r2, #44	; 0x2c
 8004d0e:	60f2      	str	r2, [r6, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004d10:	6145      	str	r5, [r0, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004d12:	6105      	str	r5, [r0, #16]
 // Set up to access Index Register (RS == 1)
 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004d14:	6101      	str	r1, [r0, #16]

 while(tmp) {
 8004d16:	b197      	cbz	r7, 8004d3e <FillRect+0x6a>
	TFT_Port = (TFT_Port & 0xFF00) | (color >> 8);
 8004d18:	0a22      	lsrs	r2, r4, #8
 8004d1a:	68f1      	ldr	r1, [r6, #12]
 while(tmp) {
 8004d1c:	3f01      	subs	r7, #1
	TFT_Port = (TFT_Port & 0xFF00) | (color >> 8);
 8004d1e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8004d22:	ea41 0102 	orr.w	r1, r1, r2
 8004d26:	60f1      	str	r1, [r6, #12]
 	SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004d28:	6145      	str	r5, [r0, #20]
 	SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004d2a:	6105      	str	r5, [r0, #16]
 	TFT_Port = (TFT_Port & 0xFF00) | color;
 8004d2c:	68f1      	ldr	r1, [r6, #12]
 8004d2e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8004d32:	ea41 0104 	orr.w	r1, r1, r4
 8004d36:	60f1      	str	r1, [r6, #12]
 	SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004d38:	6145      	str	r5, [r0, #20]
 	SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004d3a:	6105      	str	r5, [r0, #16]
 while(tmp) {
 8004d3c:	d1ed      	bne.n	8004d1a <FillRect+0x46>
	tmp--;
 	}

 // Set TFT_nCS high
 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit)); 
 8004d3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d42:	4b03      	ldr	r3, [pc, #12]	; (8004d50 <FillRect+0x7c>)
 8004d44:	611a      	str	r2, [r3, #16]
}
 8004d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d4a:	bf00      	nop
 8004d4c:	08004c7d 	.word	0x08004c7d
 8004d50:	40011000 	.word	0x40011000
 8004d54:	40010c00 	.word	0x40010c00

08004d58 <ClrScreen>:
 FillRect(ScreenX0, ScreenY0, ScreenXsize, ScreenYsize, clBlack);
 8004d58:	2100      	movs	r1, #0
{
 8004d5a:	b510      	push	{r4, lr}
 8004d5c:	b082      	sub	sp, #8
 FillRect(ScreenX0, ScreenY0, ScreenXsize, ScreenYsize, clBlack);
 8004d5e:	23f0      	movs	r3, #240	; 0xf0
 8004d60:	9100      	str	r1, [sp, #0]
 8004d62:	4608      	mov	r0, r1
 8004d64:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004d68:	4c01      	ldr	r4, [pc, #4]	; (8004d70 <ClrScreen+0x18>)
 8004d6a:	47a0      	blx	r4
}
 8004d6c:	b002      	add	sp, #8
 8004d6e:	bd10      	pop	{r4, pc}
 8004d70:	08004cd5 	.word	0x08004cd5

08004d74 <PutcGenic>:

// Put at (x, y) a 15X16 character [ch] with [f_color] and [b_color]
//
void	PutcGenic(U16 x, U16 y, U8 ch, U16 fgcolor, U16 bgcolor, FONT *font)
{
 8004d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d78:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004d7a:	461c      	mov	r4, r3
 U8 tmp, tmp2;
 U16 tmp1, tmp3;
 U8 *ptmp;

 // Font address
 ptmp = (U8 *)font->Array 	+ (ch - font->IndexOfs) * ((font->Xsize + 7)/8) * font->Ysize;
 8004d7c:	7937      	ldrb	r7, [r6, #4]
 8004d7e:	f896 8008 	ldrb.w	r8, [r6, #8]
 8004d82:	f107 0c07 	add.w	ip, r7, #7
 8004d86:	eba2 0808 	sub.w	r8, r2, r8
 8004d8a:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8004d8e:	fb0c fc08 	mul.w	ip, ip, r8
 8004d92:	f896 8005 	ldrb.w	r8, [r6, #5]
 8004d96:	6835      	ldr	r5, [r6, #0]

 SetWindow(x, font->Xsize, y, font->Ysize);
 8004d98:	460a      	mov	r2, r1
 8004d9a:	4643      	mov	r3, r8
 8004d9c:	4639      	mov	r1, r7
 8004d9e:	4f28      	ldr	r7, [pc, #160]	; (8004e40 <PutcGenic+0xcc>)
 ptmp = (U8 *)font->Array 	+ (ch - font->IndexOfs) * ((font->Xsize + 7)/8) * font->Ysize;
 8004da0:	fb08 580c 	mla	r8, r8, ip, r5
{
 8004da4:	f8bd 5020 	ldrh.w	r5, [sp, #32]
 SetWindow(x, font->Xsize, y, font->Ysize);
 8004da8:	47b8      	blx	r7

 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));

 SetToLow(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004daa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004dae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
// Delay(2);

 TFT_Port = (TFT_Port & 0xFF00) | 0x2C;
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004db2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004db6:	4823      	ldr	r0, [pc, #140]	; (8004e44 <PutcGenic+0xd0>)
 TFT_Port = (TFT_Port & 0xFF00) | 0x2C;
 8004db8:	4f23      	ldr	r7, [pc, #140]	; (8004e48 <PutcGenic+0xd4>)
 SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
 8004dba:	6143      	str	r3, [r0, #20]
 SetToLow(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004dbc:	6141      	str	r1, [r0, #20]
 TFT_Port = (TFT_Port & 0xFF00) | 0x2C;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004dc4:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 8004dc8:	60fb      	str	r3, [r7, #12]
 SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004dca:	6142      	str	r2, [r0, #20]
 SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004dcc:	6102      	str	r2, [r0, #16]

 SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
 8004dce:	6101      	str	r1, [r0, #16]

 tmp1 = (font->Xsize * font->Ysize)/8;
 8004dd0:	7931      	ldrb	r1, [r6, #4]
 8004dd2:	7973      	ldrb	r3, [r6, #5]
 8004dd4:	fb03 f301 	mul.w	r3, r3, r1
 8004dd8:	10db      	asrs	r3, r3, #3
 while(tmp1) {
 8004dda:	b353      	cbz	r3, 8004e32 <PutcGenic+0xbe>
	tmp2 = 8;
	while(tmp2) {
		tmp3 = (tmp & 0x80) ? fgcolor : bgcolor;

 		TFT_Port = (TFT_Port & 0xFF00) | (tmp3 >> 8);
 		SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004ddc:	4616      	mov	r6, r2
 8004dde:	b299      	uxth	r1, r3
 8004de0:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8004de4:	fa1f fe8e 	uxth.w	lr, lr
 8004de8:	44c6      	add	lr, r8
 8004dea:	f108 3cff 	add.w	ip, r8, #4294967295	; 0xffffffff
 	tmp = *ptmp;
 8004dee:	f04f 0908 	mov.w	r9, #8
 8004df2:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
		tmp3 = (tmp & 0x80) ? fgcolor : bgcolor;
 8004df6:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004dfa:	bf14      	ite	ne
 8004dfc:	46a0      	movne	r8, r4
 8004dfe:	46a8      	moveq	r8, r5
 		TFT_Port = (TFT_Port & 0xFF00) | (tmp3 >> 8);
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8004e06:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8004e0a:	ea42 2218 	orr.w	r2, r2, r8, lsr #8
 8004e0e:	60fa      	str	r2, [r7, #12]
 		SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004e10:	6146      	str	r6, [r0, #20]
 		SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004e12:	6106      	str	r6, [r0, #16]
 		TFT_Port = (TFT_Port & 0xFF00) | tmp3;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 		SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 		SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));

		tmp <<= 1;
 8004e16:	0049      	lsls	r1, r1, #1
 		TFT_Port = (TFT_Port & 0xFF00) | tmp3;
 8004e18:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004e1c:	ea43 0308 	orr.w	r3, r3, r8
	while(tmp2) {
 8004e20:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
 		TFT_Port = (TFT_Port & 0xFF00) | tmp3;
 8004e24:	60fb      	str	r3, [r7, #12]
		tmp <<= 1;
 8004e26:	b2c9      	uxtb	r1, r1
 		SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004e28:	6146      	str	r6, [r0, #20]
 		SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
 8004e2a:	6106      	str	r6, [r0, #16]
	while(tmp2) {
 8004e2c:	d1e3      	bne.n	8004df6 <PutcGenic+0x82>
 while(tmp1) {
 8004e2e:	45f4      	cmp	ip, lr
 8004e30:	d1dd      	bne.n	8004dee <PutcGenic+0x7a>
		}
	ptmp++;
	tmp1--;	
 	}

 SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit)); 
 8004e32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004e36:	4b03      	ldr	r3, [pc, #12]	; (8004e44 <PutcGenic+0xd0>)
 8004e38:	611a      	str	r2, [r3, #16]

}
 8004e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e3e:	bf00      	nop
 8004e40:	08004c7d 	.word	0x08004c7d
 8004e44:	40011000 	.word	0x40011000
 8004e48:	40010c00 	.word	0x40010c00

08004e4c <PutsGenic>:

void	PutsGenic(U16 x, U16 y, U8 *str, U16 fgcolor, U16 bgcolor, FONT *font)
{
 8004e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e50:	4604      	mov	r4, r0
 8004e52:	460f      	mov	r7, r1
 8004e54:	4616      	mov	r6, r2
 8004e56:	469a      	mov	sl, r3
 8004e58:	b082      	sub	sp, #8
 8004e5a:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
 8004e5e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 U8 tmp;
 
 while((tmp = *str++)) {
	PutcGenic(x, y, tmp, fgcolor, bgcolor, font);
 8004e60:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8004e98 <PutsGenic+0x4c>
 while((tmp = *str++)) {
 8004e64:	f816 2b01 	ldrb.w	r2, [r6], #1
 8004e68:	b19a      	cbz	r2, 8004e92 <PutsGenic+0x46>
	PutcGenic(x, y, tmp, fgcolor, bgcolor, font);
 8004e6a:	4653      	mov	r3, sl
 8004e6c:	4620      	mov	r0, r4
 8004e6e:	e9cd 9500 	strd	r9, r5, [sp]
 8004e72:	4639      	mov	r1, r7
 8004e74:	47c0      	blx	r8
	x += font->CharPitch;
 8004e76:	79ab      	ldrb	r3, [r5, #6]
 8004e78:	441c      	add	r4, r3
 8004e7a:	b2a4      	uxth	r4, r4
	if(x >= ScreenXsize) {
 8004e7c:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
 8004e80:	d3f0      	bcc.n	8004e64 <PutsGenic+0x18>
		y += font->LinePitch;
 8004e82:	79eb      	ldrb	r3, [r5, #7]
 while((tmp = *str++)) {
 8004e84:	f816 2b01 	ldrb.w	r2, [r6], #1
		y += font->LinePitch;
 8004e88:	441f      	add	r7, r3
		x = 0;
 8004e8a:	2400      	movs	r4, #0
		y += font->LinePitch;
 8004e8c:	b2bf      	uxth	r7, r7
 while((tmp = *str++)) {
 8004e8e:	2a00      	cmp	r2, #0
 8004e90:	d1eb      	bne.n	8004e6a <PutsGenic+0x1e>
		}
 	}
}
 8004e92:	b002      	add	sp, #8
 8004e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e98:	08004d75 	.word	0x08004d75

08004e9c <DoKeyOkH.part.0>:
 SetFocus(tmp);

 UpdateDisp(Disp_Param);
}

void	DoKeyOkH(void)
 8004e9c:	b510      	push	{r4, lr}
{
 S16 tmp1;
 
 if(GetFocus() == FC_VPos) {
	// Do VPos alignment
	tmp1 = (S16)(GetAverage() - WWindowMidValue);
 8004e9e:	4b07      	ldr	r3, [pc, #28]	; (8004ebc <DoKeyOkH.part.0+0x20>)
 8004ea0:	4798      	blx	r3
 8004ea2:	f5a0 6000 	sub.w	r0, r0, #2048	; 0x800
 8004ea6:	b284      	uxth	r4, r0
	SetVPosOfs(tmp1);
 8004ea8:	b220      	sxth	r0, r4
 8004eaa:	4b05      	ldr	r3, [pc, #20]	; (8004ec0 <DoKeyOkH.part.0+0x24>)
 8004eac:	4798      	blx	r3
	EE_WriteVariable(VirtAddVarTab[Addr_VPosOfs], tmp1);
 8004eae:	4b05      	ldr	r3, [pc, #20]	; (8004ec4 <DoKeyOkH.part.0+0x28>)
 8004eb0:	4621      	mov	r1, r4
 	}
}
 8004eb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	EE_WriteVariable(VirtAddVarTab[Addr_VPosOfs], tmp1);
 8004eb6:	8958      	ldrh	r0, [r3, #10]
 8004eb8:	4b03      	ldr	r3, [pc, #12]	; (8004ec8 <DoKeyOkH.part.0+0x2c>)
 8004eba:	4718      	bx	r3
 8004ebc:	080021fd 	.word	0x080021fd
 8004ec0:	08002219 	.word	0x08002219
 8004ec4:	20000144 	.word	0x20000144
 8004ec8:	08005a6d 	.word	0x08005a6d

08004ecc <AppInit>:
{
 8004ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 if(tmp0 == SettingStatus_Initialized) {
 8004ed0:	f24f 36c5 	movw	r6, #62405	; 0xf3c5
{
 8004ed4:	b082      	sub	sp, #8
 DSO_Init();
 8004ed6:	4b59      	ldr	r3, [pc, #356]	; (800503c <AppInit+0x170>)
 8004ed8:	4798      	blx	r3
 EE_ReadVariable(Addr_SettingStatus, &tmp0);
 8004eda:	4c59      	ldr	r4, [pc, #356]	; (8005040 <AppInit+0x174>)
 8004edc:	f10d 0106 	add.w	r1, sp, #6
 8004ee0:	200b      	movs	r0, #11
 8004ee2:	47a0      	blx	r4
 if(tmp0 == SettingStatus_Initialized) {
 8004ee4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	EE_ReadVariable(VirtAddVarTab[Addr_Vpos], &tmp0);
 8004ee8:	4d56      	ldr	r5, [pc, #344]	; (8005044 <AppInit+0x178>)
 if(tmp0 == SettingStatus_Initialized) {
 8004eea:	42b3      	cmp	r3, r6
 8004eec:	d055      	beq.n	8004f9a <AppInit+0xce>
 	SetVPos(0);
 8004eee:	4b56      	ldr	r3, [pc, #344]	; (8005048 <AppInit+0x17c>)
 8004ef0:	2000      	movs	r0, #0
	EE_WriteVariable(VirtAddVarTab[Addr_Vpos], 0);
 8004ef2:	4c56      	ldr	r4, [pc, #344]	; (800504c <AppInit+0x180>)
 	SetVPos(0);
 8004ef4:	4798      	blx	r3
	EE_WriteVariable(VirtAddVarTab[Addr_Vpos], 0);
 8004ef6:	2100      	movs	r1, #0
 8004ef8:	8928      	ldrh	r0, [r5, #8]
 8004efa:	47a0      	blx	r4
 	SetVSen(VS_05V);
 8004efc:	4b54      	ldr	r3, [pc, #336]	; (8005050 <AppInit+0x184>)
 8004efe:	2007      	movs	r0, #7
 8004f00:	4798      	blx	r3
	EE_WriteVariable(VirtAddVarTab[Addr_Vsen], VS_05V);
 8004f02:	2107      	movs	r1, #7
 8004f04:	88a8      	ldrh	r0, [r5, #4]
 8004f06:	47a0      	blx	r4
 	SetCpl(CP_DC);
 8004f08:	4b52      	ldr	r3, [pc, #328]	; (8005054 <AppInit+0x188>)
 8004f0a:	2000      	movs	r0, #0
 8004f0c:	4798      	blx	r3
	EE_WriteVariable(VirtAddVarTab[Addr_Cpl], CP_DC);
 8004f0e:	2100      	movs	r1, #0
 8004f10:	88e8      	ldrh	r0, [r5, #6]
 8004f12:	47a0      	blx	r4
 	SetTimeBase(TB_1ms);
 8004f14:	4b50      	ldr	r3, [pc, #320]	; (8005058 <AppInit+0x18c>)
 8004f16:	2012      	movs	r0, #18
 8004f18:	4798      	blx	r3
	EE_WriteVariable(VirtAddVarTab[Addr_TimeBase], TB_1ms);
 8004f1a:	2112      	movs	r1, #18
 8004f1c:	8828      	ldrh	r0, [r5, #0]
 8004f1e:	47a0      	blx	r4
 	SetTrigMode(TM_Auto);
 8004f20:	4b4e      	ldr	r3, [pc, #312]	; (800505c <AppInit+0x190>)
 8004f22:	2000      	movs	r0, #0
 8004f24:	4798      	blx	r3
	EE_WriteVariable(VirtAddVarTab[Addr_TrigMode], TM_Auto);
 8004f26:	2100      	movs	r1, #0
 8004f28:	89a8      	ldrh	r0, [r5, #12]
 8004f2a:	47a0      	blx	r4
 	SetTrigEdge(TE_Falling);
 8004f2c:	4b4c      	ldr	r3, [pc, #304]	; (8005060 <AppInit+0x194>)
 8004f2e:	2000      	movs	r0, #0
 8004f30:	4798      	blx	r3
	EE_WriteVariable(VirtAddVarTab[Addr_TrigEdge], TE_Falling);
 8004f32:	2100      	movs	r1, #0
 8004f34:	89e8      	ldrh	r0, [r5, #14]
 8004f36:	47a0      	blx	r4
 	SetTrigLvl(0);
 8004f38:	4b4a      	ldr	r3, [pc, #296]	; (8005064 <AppInit+0x198>)
 8004f3a:	2000      	movs	r0, #0
 8004f3c:	4798      	blx	r3
	EE_WriteVariable(VirtAddVarTab[Addr_TrigLvl], 0);
 8004f3e:	2100      	movs	r1, #0
 8004f40:	8a28      	ldrh	r0, [r5, #16]
 8004f42:	47a0      	blx	r4
 	SetRecLen(SampleBufSizeMax);
 8004f44:	4b48      	ldr	r3, [pc, #288]	; (8005068 <AppInit+0x19c>)
 8004f46:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004f4a:	4798      	blx	r3
 	SetHPos(GetRecLen()/2 - WDsize/2);
 8004f4c:	4f47      	ldr	r7, [pc, #284]	; (800506c <AppInit+0x1a0>)
	EE_WriteVariable(VirtAddVarTab[Addr_RecLen], SampleBufSizeMax);
 8004f4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f52:	8aa8      	ldrh	r0, [r5, #20]
 8004f54:	47a0      	blx	r4
 	SetHPos(GetRecLen()/2 - WDsize/2);
 8004f56:	47b8      	blx	r7
 8004f58:	0840      	lsrs	r0, r0, #1
 8004f5a:	3896      	subs	r0, #150	; 0x96
 8004f5c:	4b44      	ldr	r3, [pc, #272]	; (8005070 <AppInit+0x1a4>)
 8004f5e:	b200      	sxth	r0, r0
 8004f60:	4798      	blx	r3
	EE_WriteVariable(VirtAddVarTab[Addr_HPos], GetRecLen()/2 - WDsize/2);
 8004f62:	f8b5 8002 	ldrh.w	r8, [r5, #2]
 8004f66:	47b8      	blx	r7
 8004f68:	0841      	lsrs	r1, r0, #1
 8004f6a:	3996      	subs	r1, #150	; 0x96
 8004f6c:	b289      	uxth	r1, r1
 8004f6e:	4640      	mov	r0, r8
 8004f70:	47a0      	blx	r4
	SetVPosOfs(0);
 8004f72:	4b40      	ldr	r3, [pc, #256]	; (8005074 <AppInit+0x1a8>)
 8004f74:	2000      	movs	r0, #0
 8004f76:	4798      	blx	r3
	EE_WriteVariable(VirtAddVarTab[Addr_VPosOfs], 0);
 8004f78:	2100      	movs	r1, #0
 8004f7a:	8968      	ldrh	r0, [r5, #10]
 8004f7c:	47a0      	blx	r4
	EE_WriteVariable(VirtAddVarTab[Addr_SettingStatus], SettingStatus_Initialized);
 8004f7e:	4631      	mov	r1, r6
 8004f80:	8ae8      	ldrh	r0, [r5, #22]
 8004f82:	47a0      	blx	r4
 OutputTLvl();
 8004f84:	4b3c      	ldr	r3, [pc, #240]	; (8005078 <AppInit+0x1ac>)
 8004f86:	4798      	blx	r3
 TimerKeyScan = 1;
 8004f88:	2001      	movs	r0, #1
 Keypad.KDebounceVal = KD_val;
 8004f8a:	2202      	movs	r2, #2
 TimerKeyScan = 1;
 8004f8c:	493b      	ldr	r1, [pc, #236]	; (800507c <AppInit+0x1b0>)
 Keypad.KDebounceVal = KD_val;
 8004f8e:	4b3c      	ldr	r3, [pc, #240]	; (8005080 <AppInit+0x1b4>)
 TimerKeyScan = 1;
 8004f90:	8008      	strh	r0, [r1, #0]
 Keypad.KDebounceVal = KD_val;
 8004f92:	81da      	strh	r2, [r3, #14]
}
 8004f94:	b002      	add	sp, #8
 8004f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	EE_ReadVariable(VirtAddVarTab[Addr_Vpos], &tmp0);
 8004f9a:	f10d 0106 	add.w	r1, sp, #6
 8004f9e:	8928      	ldrh	r0, [r5, #8]
 8004fa0:	47a0      	blx	r4
	SetVPos(tmp0);
 8004fa2:	4b29      	ldr	r3, [pc, #164]	; (8005048 <AppInit+0x17c>)
 8004fa4:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 8004fa8:	4798      	blx	r3
	EE_ReadVariable(VirtAddVarTab[Addr_Vsen], &tmp0);
 8004faa:	f10d 0106 	add.w	r1, sp, #6
 8004fae:	88a8      	ldrh	r0, [r5, #4]
 8004fb0:	47a0      	blx	r4
	SetVSen(tmp0);
 8004fb2:	4b27      	ldr	r3, [pc, #156]	; (8005050 <AppInit+0x184>)
 8004fb4:	f99d 0006 	ldrsb.w	r0, [sp, #6]
 8004fb8:	4798      	blx	r3
	EE_ReadVariable(VirtAddVarTab[Addr_Cpl], &tmp0);
 8004fba:	f10d 0106 	add.w	r1, sp, #6
 8004fbe:	88e8      	ldrh	r0, [r5, #6]
 8004fc0:	47a0      	blx	r4
	SetCpl(tmp0);
 8004fc2:	4b24      	ldr	r3, [pc, #144]	; (8005054 <AppInit+0x188>)
 8004fc4:	f99d 0006 	ldrsb.w	r0, [sp, #6]
 8004fc8:	4798      	blx	r3
	EE_ReadVariable(VirtAddVarTab[Addr_TimeBase], &tmp0);
 8004fca:	f10d 0106 	add.w	r1, sp, #6
 8004fce:	8828      	ldrh	r0, [r5, #0]
 8004fd0:	47a0      	blx	r4
	SetTimeBase(tmp0);
 8004fd2:	4b21      	ldr	r3, [pc, #132]	; (8005058 <AppInit+0x18c>)
 8004fd4:	f99d 0006 	ldrsb.w	r0, [sp, #6]
 8004fd8:	4798      	blx	r3
	EE_ReadVariable(VirtAddVarTab[Addr_TrigMode], &tmp0);
 8004fda:	f10d 0106 	add.w	r1, sp, #6
 8004fde:	89a8      	ldrh	r0, [r5, #12]
 8004fe0:	47a0      	blx	r4
	SetTrigMode(tmp0);
 8004fe2:	4b1e      	ldr	r3, [pc, #120]	; (800505c <AppInit+0x190>)
 8004fe4:	f99d 0006 	ldrsb.w	r0, [sp, #6]
 8004fe8:	4798      	blx	r3
	EE_ReadVariable(VirtAddVarTab[Addr_TrigEdge], &tmp0);
 8004fea:	f10d 0106 	add.w	r1, sp, #6
 8004fee:	89e8      	ldrh	r0, [r5, #14]
 8004ff0:	47a0      	blx	r4
	SetTrigEdge(tmp0);
 8004ff2:	4b1b      	ldr	r3, [pc, #108]	; (8005060 <AppInit+0x194>)
 8004ff4:	f99d 0006 	ldrsb.w	r0, [sp, #6]
 8004ff8:	4798      	blx	r3
	EE_ReadVariable(VirtAddVarTab[Addr_TrigLvl], &tmp0);
 8004ffa:	f10d 0106 	add.w	r1, sp, #6
 8004ffe:	8a28      	ldrh	r0, [r5, #16]
 8005000:	47a0      	blx	r4
	SetTrigLvl(tmp0);
 8005002:	4b18      	ldr	r3, [pc, #96]	; (8005064 <AppInit+0x198>)
 8005004:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 8005008:	4798      	blx	r3
	EE_ReadVariable(VirtAddVarTab[Addr_RecLen], &tmp0);
 800500a:	f10d 0106 	add.w	r1, sp, #6
 800500e:	8aa8      	ldrh	r0, [r5, #20]
 8005010:	47a0      	blx	r4
	SetRecLen(tmp0);
 8005012:	4b15      	ldr	r3, [pc, #84]	; (8005068 <AppInit+0x19c>)
 8005014:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8005018:	4798      	blx	r3
	EE_ReadVariable(VirtAddVarTab[Addr_HPos], &tmp0);
 800501a:	f10d 0106 	add.w	r1, sp, #6
 800501e:	8868      	ldrh	r0, [r5, #2]
 8005020:	47a0      	blx	r4
	SetHPos(tmp0);
 8005022:	4b13      	ldr	r3, [pc, #76]	; (8005070 <AppInit+0x1a4>)
 8005024:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 8005028:	4798      	blx	r3
	EE_ReadVariable(VirtAddVarTab[Addr_VPosOfs], &tmp0);
 800502a:	f10d 0106 	add.w	r1, sp, #6
 800502e:	8968      	ldrh	r0, [r5, #10]
 8005030:	47a0      	blx	r4
	SetVPosOfs(tmp0);
 8005032:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 8005036:	4b0f      	ldr	r3, [pc, #60]	; (8005074 <AppInit+0x1a8>)
 8005038:	4798      	blx	r3
 800503a:	e7a3      	b.n	8004f84 <AppInit+0xb8>
 800503c:	08000711 	.word	0x08000711
 8005040:	080058b1 	.word	0x080058b1
 8005044:	20000144 	.word	0x20000144
 8005048:	08001e51 	.word	0x08001e51
 800504c:	08005a6d 	.word	0x08005a6d
 8005050:	08001d7d 	.word	0x08001d7d
 8005054:	08001de9 	.word	0x08001de9
 8005058:	08001ebd 	.word	0x08001ebd
 800505c:	08001fa5 	.word	0x08001fa5
 8005060:	0800200d 	.word	0x0800200d
 8005064:	08002075 	.word	0x08002075
 8005068:	080020e9 	.word	0x080020e9
 800506c:	0800213d 	.word	0x0800213d
 8005070:	08001f29 	.word	0x08001f29
 8005074:	08002219 	.word	0x08002219
 8005078:	08004c2d 	.word	0x08004c2d
 800507c:	200001a8 	.word	0x200001a8
 8005080:	200001b4 	.word	0x200001b4

08005084 <KeyScan>:
 tmp1 = (PB_Port & PB_Bits) | ~PB_Bits;
 8005084:	4b4e      	ldr	r3, [pc, #312]	; (80051c0 <KeyScan+0x13c>)
 Keypad.KScanBuf = NoKey;
 8005086:	f64f 71ff 	movw	r1, #65535	; 0xffff
 tmp1 = (PB_Port & PB_Bits) | ~PB_Bits;
 800508a:	689b      	ldr	r3, [r3, #8]
 Keypad.KScanBuf = NoKey;
 800508c:	4a4d      	ldr	r2, [pc, #308]	; (80051c4 <KeyScan+0x140>)
 tmp1 = (PB_Port & PB_Bits) | ~PB_Bits;
 800508e:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 8005092:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 8005096:	b29b      	uxth	r3, r3
 if(tmp1 != NoKey) {
 8005098:	428b      	cmp	r3, r1
{
 800509a:	b570      	push	{r4, r5, r6, lr}
 Keypad.KScanBuf = NoKey;
 800509c:	8051      	strh	r1, [r2, #2]
 if(tmp1 != NoKey) {
 800509e:	d003      	beq.n	80050a8 <KeyScan+0x24>
 if((Keypad.KScanBuf == NoKey) || (Keypad.KScanBuf != Keypad.KScanCode)) {
 80050a0:	8891      	ldrh	r1, [r2, #4]
	Keypad.KScanBuf = tmp1;
 80050a2:	8053      	strh	r3, [r2, #2]
 if((Keypad.KScanBuf == NoKey) || (Keypad.KScanBuf != Keypad.KScanCode)) {
 80050a4:	4299      	cmp	r1, r3
 80050a6:	d04a      	beq.n	800513e <KeyScan+0xba>
	Keypad.KCount = 0;
 80050a8:	2100      	movs	r1, #0
	Keypad.KTimeChk = KH_val;
 80050aa:	2014      	movs	r0, #20
 	Keypad.KScanCode = Keypad.KScanBuf;
 80050ac:	8093      	strh	r3, [r2, #4]
	Keypad.KCount = 0;
 80050ae:	8191      	strh	r1, [r2, #12]
	Keypad.KHCount = 0;
 80050b0:	8211      	strh	r1, [r2, #16]
	Keypad.KTimeChk = KH_val;
 80050b2:	8250      	strh	r0, [r2, #18]
 tmp1 = ADC_Poll(ADC2, 2);
 80050b4:	2102      	movs	r1, #2
 80050b6:	4844      	ldr	r0, [pc, #272]	; (80051c8 <KeyScan+0x144>)
 80050b8:	4d44      	ldr	r5, [pc, #272]	; (80051cc <KeyScan+0x148>)
 80050ba:	47a8      	blx	r5
 if(tmp1 > Threshold_High) {
 80050bc:	f5b0 6f10 	cmp.w	r0, #2304	; 0x900
 80050c0:	d833      	bhi.n	800512a <KeyScan+0xa6>
 80050c2:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 80050c6:	bf8c      	ite	hi
 80050c8:	2407      	movhi	r4, #7
 80050ca:	2404      	movls	r4, #4
 tmp1 = ADC_Poll(ADC2, 1);
 80050cc:	2101      	movs	r1, #1
 80050ce:	483e      	ldr	r0, [pc, #248]	; (80051c8 <KeyScan+0x144>)
 80050d0:	47a8      	blx	r5
 if(tmp1 > Threshold_High) {
 80050d2:	f5b0 6f10 	cmp.w	r0, #2304	; 0x900
 80050d6:	d830      	bhi.n	800513a <KeyScan+0xb6>
 	tmp3 = 2;
 80050d8:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 80050dc:	bf94      	ite	ls
 80050de:	2000      	movls	r0, #0
 80050e0:	2001      	movhi	r0, #1
 if(tmp2 != VSenPrev) {
 80050e2:	4e3b      	ldr	r6, [pc, #236]	; (80051d0 <KeyScan+0x14c>)
 tmp2 = 3 * tmp2 + tmp3 + VSenMin;
 80050e4:	4404      	add	r4, r0
 if(tmp2 != VSenPrev) {
 80050e6:	7833      	ldrb	r3, [r6, #0]
 80050e8:	42a3      	cmp	r3, r4
 80050ea:	d006      	beq.n	80050fa <KeyScan+0x76>
 	SetVSen(tmp2);
 80050ec:	4b39      	ldr	r3, [pc, #228]	; (80051d4 <KeyScan+0x150>)
 80050ee:	4620      	mov	r0, r4
 80050f0:	4798      	blx	r3
 	UpdateDisp(Disp_Param);
 80050f2:	2002      	movs	r0, #2
 80050f4:	4b38      	ldr	r3, [pc, #224]	; (80051d8 <KeyScan+0x154>)
	VSenPrev = tmp2;
 80050f6:	7034      	strb	r4, [r6, #0]
 	UpdateDisp(Disp_Param);
 80050f8:	4798      	blx	r3
 tmp1 = ADC_Poll(ADC2, 3);
 80050fa:	2103      	movs	r1, #3
 80050fc:	4832      	ldr	r0, [pc, #200]	; (80051c8 <KeyScan+0x144>)
 80050fe:	47a8      	blx	r5
 if(tmp1 > Threshold_High) {
 8005100:	f5b0 6f10 	cmp.w	r0, #2304	; 0x900
 8005104:	d813      	bhi.n	800512e <KeyScan+0xaa>
 8005106:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 800510a:	bf8c      	ite	hi
 800510c:	2401      	movhi	r4, #1
 800510e:	2402      	movls	r4, #2
 if(tmp2 != CplPrev) {
 8005110:	4d32      	ldr	r5, [pc, #200]	; (80051dc <KeyScan+0x158>)
 8005112:	782b      	ldrb	r3, [r5, #0]
 8005114:	42a3      	cmp	r3, r4
 8005116:	d00f      	beq.n	8005138 <KeyScan+0xb4>
	SetCpl(tmp2);
 8005118:	b260      	sxtb	r0, r4
 800511a:	4b31      	ldr	r3, [pc, #196]	; (80051e0 <KeyScan+0x15c>)
 800511c:	4798      	blx	r3
	CplPrev = tmp2;
 800511e:	702c      	strb	r4, [r5, #0]
 	UpdateDisp(Disp_Param);
 8005120:	2002      	movs	r0, #2
 }
 8005122:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 	UpdateDisp(Disp_Param);
 8005126:	4b2c      	ldr	r3, [pc, #176]	; (80051d8 <KeyScan+0x154>)
 8005128:	4718      	bx	r3
 800512a:	240a      	movs	r4, #10
 800512c:	e7ce      	b.n	80050cc <KeyScan+0x48>
 800512e:	2400      	movs	r4, #0
 if(tmp2 != CplPrev) {
 8005130:	4d2a      	ldr	r5, [pc, #168]	; (80051dc <KeyScan+0x158>)
 8005132:	782b      	ldrb	r3, [r5, #0]
 8005134:	42a3      	cmp	r3, r4
 8005136:	d1ef      	bne.n	8005118 <KeyScan+0x94>
 }
 8005138:	bd70      	pop	{r4, r5, r6, pc}
 	tmp3 = 2;
 800513a:	2002      	movs	r0, #2
 800513c:	e7d1      	b.n	80050e2 <KeyScan+0x5e>
	Keypad.KCount++;
 800513e:	8993      	ldrh	r3, [r2, #12]
	if(Keypad.KCount > Keypad.KDebounceVal) {
 8005140:	89d0      	ldrh	r0, [r2, #14]
	Keypad.KCount++;
 8005142:	3301      	adds	r3, #1
 8005144:	b29b      	uxth	r3, r3
	if(Keypad.KCount > Keypad.KDebounceVal) {
 8005146:	4283      	cmp	r3, r0
	Keypad.KCount++;
 8005148:	8193      	strh	r3, [r2, #12]
	if(Keypad.KCount > Keypad.KDebounceVal) {
 800514a:	d91a      	bls.n	8005182 <KeyScan+0xfe>
		if(Keypad.KCount == Keypad.KDebounceVal + 3) {
 800514c:	1cc4      	adds	r4, r0, #3
 800514e:	42a3      	cmp	r3, r4
 8005150:	d1b0      	bne.n	80050b4 <KeyScan+0x30>
			if(++Keypad.KHCount == Keypad.KTimeChk) {
 8005152:	8a14      	ldrh	r4, [r2, #16]
 8005154:	8a55      	ldrh	r5, [r2, #18]
 8005156:	1c63      	adds	r3, r4, #1
 8005158:	b29b      	uxth	r3, r3
 800515a:	429d      	cmp	r5, r3
			Keypad.KCount = Keypad.KDebounceVal;
 800515c:	8190      	strh	r0, [r2, #12]
			if(++Keypad.KHCount == Keypad.KTimeChk) {
 800515e:	8213      	strh	r3, [r2, #16]
 8005160:	d1a8      	bne.n	80050b4 <KeyScan+0x30>
 while((tmp1 = *(U16 *)(KSCTab + 0))) {
 8005162:	f64b 73ff 	movw	r3, #49151	; 0xbfff
				Keypad.KScanCode &= 0xFFFE;
 8005166:	f021 0101 	bic.w	r1, r1, #1
 800516a:	b288      	uxth	r0, r1
 800516c:	491d      	ldr	r1, [pc, #116]	; (80051e4 <KeyScan+0x160>)
 800516e:	8090      	strh	r0, [r2, #4]
	if(tmp1 == KSCode) {
 8005170:	4298      	cmp	r0, r3
 8005172:	d01b      	beq.n	80051ac <KeyScan+0x128>
 while((tmp1 = *(U16 *)(KSCTab + 0))) {
 8005174:	f831 3f04 	ldrh.w	r3, [r1, #4]!
 8005178:	2b00      	cmp	r3, #0
 800517a:	d1f9      	bne.n	8005170 <KeyScan+0xec>
				Keypad.KTimeChk += KR_Time;
 800517c:	3402      	adds	r4, #2
 800517e:	8254      	strh	r4, [r2, #18]
 8005180:	e798      	b.n	80050b4 <KeyScan+0x30>
	else if(Keypad.KCount == Keypad.KDebounceVal) {
 8005182:	d197      	bne.n	80050b4 <KeyScan+0x30>
	if(tmp1 == KSCode) {
 8005184:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005188:	4299      	cmp	r1, r3
 800518a:	d015      	beq.n	80051b8 <KeyScan+0x134>
 while((tmp1 = *(U16 *)(KSCTab + 0))) {
 800518c:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8005190:	4814      	ldr	r0, [pc, #80]	; (80051e4 <KeyScan+0x160>)
 8005192:	e003      	b.n	800519c <KeyScan+0x118>
 8005194:	f830 3f04 	ldrh.w	r3, [r0, #4]!
 8005198:	2b00      	cmp	r3, #0
 800519a:	d08b      	beq.n	80050b4 <KeyScan+0x30>
	if(tmp1 == KSCode) {
 800519c:	4299      	cmp	r1, r3
 800519e:	d1f9      	bne.n	8005194 <KeyScan+0x110>
 80051a0:	7883      	ldrb	r3, [r0, #2]
 80051a2:	78c1      	ldrb	r1, [r0, #3]
		Keypad.KeyCode = *(U8 *)((U8 *)KSCTab + 2);
 80051a4:	80d3      	strh	r3, [r2, #6]
		Keypad.KeyCodeBuf = Keypad.KeyCode;
 80051a6:	8153      	strh	r3, [r2, #10]
		Keypad.KeyParam = *(U8 *)((U8 *)KSCTab + 3);
 80051a8:	8111      	strh	r1, [r2, #8]
 80051aa:	e783      	b.n	80050b4 <KeyScan+0x30>
		Keypad.KeyCode = *(U8 *)((U8 *)KSCTab + 2);
 80051ac:	788b      	ldrb	r3, [r1, #2]
		Keypad.KeyParam = *(U8 *)((U8 *)KSCTab + 3);
 80051ae:	78c9      	ldrb	r1, [r1, #3]
		Keypad.KeyCode = *(U8 *)((U8 *)KSCTab + 2);
 80051b0:	80d3      	strh	r3, [r2, #6]
		Keypad.KeyCodeBuf = Keypad.KeyCode;
 80051b2:	8153      	strh	r3, [r2, #10]
		Keypad.KeyParam = *(U8 *)((U8 *)KSCTab + 3);
 80051b4:	8111      	strh	r1, [r2, #8]
 80051b6:	e7e1      	b.n	800517c <KeyScan+0xf8>
	if(tmp1 == KSCode) {
 80051b8:	2131      	movs	r1, #49	; 0x31
 80051ba:	2301      	movs	r3, #1
 80051bc:	e7f2      	b.n	80051a4 <KeyScan+0x120>
 80051be:	bf00      	nop
 80051c0:	40010c00 	.word	0x40010c00
 80051c4:	200001b4 	.word	0x200001b4
 80051c8:	40012800 	.word	0x40012800
 80051cc:	080043cd 	.word	0x080043cd
 80051d0:	200001b0 	.word	0x200001b0
 80051d4:	08001d7d 	.word	0x08001d7d
 80051d8:	08002285 	.word	0x08002285
 80051dc:	200001b1 	.word	0x200001b1
 80051e0:	08001de9 	.word	0x08001de9
 80051e4:	08007fc4 	.word	0x08007fc4

080051e8 <DoKeyOk>:
 tmp = GetDsoStatus();
 80051e8:	4b0b      	ldr	r3, [pc, #44]	; (8005218 <DoKeyOk+0x30>)
{
 80051ea:	b510      	push	{r4, lr}
 tmp = GetDsoStatus();
 80051ec:	4798      	blx	r3
 if(BitTest(tmp, DSO_Hold)) {
 80051ee:	0743      	lsls	r3, r0, #29
 80051f0:	d508      	bpl.n	8005204 <DoKeyOk+0x1c>
 	ClrHold();
 80051f2:	4b0a      	ldr	r3, [pc, #40]	; (800521c <DoKeyOk+0x34>)
 80051f4:	4798      	blx	r3
	StartCapture();
 80051f6:	4b0a      	ldr	r3, [pc, #40]	; (8005220 <DoKeyOk+0x38>)
 80051f8:	4798      	blx	r3
}
 80051fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 UpdateDisp(Disp_Param);
 80051fe:	2002      	movs	r0, #2
 8005200:	4b08      	ldr	r3, [pc, #32]	; (8005224 <DoKeyOk+0x3c>)
 8005202:	4718      	bx	r3
 	SetHold();
 8005204:	4b08      	ldr	r3, [pc, #32]	; (8005228 <DoKeyOk+0x40>)
 8005206:	4798      	blx	r3
 	StopCapture();
 8005208:	4b08      	ldr	r3, [pc, #32]	; (800522c <DoKeyOk+0x44>)
 800520a:	4798      	blx	r3
}
 800520c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 UpdateDisp(Disp_Param);
 8005210:	2002      	movs	r0, #2
 8005212:	4b04      	ldr	r3, [pc, #16]	; (8005224 <DoKeyOk+0x3c>)
 8005214:	4718      	bx	r3
 8005216:	bf00      	nop
 8005218:	080021a5 	.word	0x080021a5
 800521c:	080021dd 	.word	0x080021dd
 8005220:	08000ae9 	.word	0x08000ae9
 8005224:	08002285 	.word	0x08002285
 8005228:	080021bd 	.word	0x080021bd
 800522c:	08001d59 	.word	0x08001d59

08005230 <DoKeyInc>:
{
 8005230:	b510      	push	{r4, lr}
 switch(GetFocus()) {
 8005232:	4b43      	ldr	r3, [pc, #268]	; (8005340 <DoKeyInc+0x110>)
 8005234:	4798      	blx	r3
 8005236:	2805      	cmp	r0, #5
 8005238:	d844      	bhi.n	80052c4 <DoKeyInc+0x94>
 800523a:	e8df f000 	tbb	[pc, r0]
 800523e:	3616      	.short	0x3616
 8005240:	036d5a49 	.word	0x036d5a49
 		tmp1 = GetVPos();
 8005244:	4b3f      	ldr	r3, [pc, #252]	; (8005344 <DoKeyInc+0x114>)
 8005246:	4798      	blx	r3
 		tmp1++;
 8005248:	3001      	adds	r0, #1
 		tmp1 = SetVPos(tmp1);
 800524a:	4b3f      	ldr	r3, [pc, #252]	; (8005348 <DoKeyInc+0x118>)
 800524c:	b200      	sxth	r0, r0
 800524e:	4798      	blx	r3
		EE_WriteVariable(VirtAddVarTab[Addr_Vpos], tmp1);
 8005250:	4a3e      	ldr	r2, [pc, #248]	; (800534c <DoKeyInc+0x11c>)
 8005252:	b281      	uxth	r1, r0
 8005254:	4b3e      	ldr	r3, [pc, #248]	; (8005350 <DoKeyInc+0x120>)
 		UpdateDisp(Disp_Trace);
 8005256:	4c3f      	ldr	r4, [pc, #252]	; (8005354 <DoKeyInc+0x124>)
		EE_WriteVariable(VirtAddVarTab[Addr_Vpos], tmp1);
 8005258:	8910      	ldrh	r0, [r2, #8]
 800525a:	4798      	blx	r3
 		UpdateDisp(Disp_Trace);
 800525c:	2004      	movs	r0, #4
 800525e:	47a0      	blx	r4
 UpdateDisp(Disp_Param);
 8005260:	4623      	mov	r3, r4
}
 8005262:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 UpdateDisp(Disp_Param);
 8005266:	2002      	movs	r0, #2
 8005268:	4718      	bx	r3
 		tmp0 = GetTimebase();
 800526a:	4b3b      	ldr	r3, [pc, #236]	; (8005358 <DoKeyInc+0x128>)
 800526c:	4798      	blx	r3
 		tmp0++;
 800526e:	3001      	adds	r0, #1
 		tmp0 = SetTimeBase(tmp0);
 8005270:	4b3a      	ldr	r3, [pc, #232]	; (800535c <DoKeyInc+0x12c>)
 8005272:	b240      	sxtb	r0, r0
 8005274:	4798      	blx	r3
 8005276:	4604      	mov	r4, r0
		EE_WriteVariable(VirtAddVarTab[Addr_TimeBase], tmp0);
 8005278:	4b34      	ldr	r3, [pc, #208]	; (800534c <DoKeyInc+0x11c>)
 800527a:	b281      	uxth	r1, r0
 800527c:	8818      	ldrh	r0, [r3, #0]
 800527e:	4b34      	ldr	r3, [pc, #208]	; (8005350 <DoKeyInc+0x120>)
 8005280:	4798      	blx	r3
		if(tmp0 >= TB_20ms) {
 8005282:	2c0d      	cmp	r4, #13
		if((tmp0 < TB_20ms) && (tmp0 > TB_1s)) {
 8005284:	f1a4 040a 	sub.w	r4, r4, #10
			StartCapture();
 8005288:	bfcc      	ite	gt
 800528a:	4b35      	ldrgt	r3, [pc, #212]	; (8005360 <DoKeyInc+0x130>)
			UpdateTimebase();
 800528c:	4b35      	ldrle	r3, [pc, #212]	; (8005364 <DoKeyInc+0x134>)
		if((tmp0 < TB_20ms) && (tmp0 > TB_1s)) {
 800528e:	b2e4      	uxtb	r4, r4
			UpdateTimebase();
 8005290:	4798      	blx	r3
		if((tmp0 < TB_20ms) && (tmp0 > TB_1s)) {
 8005292:	2c03      	cmp	r4, #3
			Keypad.KDebounceVal = KD_val1;
 8005294:	bf94      	ite	ls
 8005296:	2205      	movls	r2, #5
			Keypad.KDebounceVal = KD_val;
 8005298:	2202      	movhi	r2, #2
 800529a:	4b33      	ldr	r3, [pc, #204]	; (8005368 <DoKeyInc+0x138>)
 800529c:	4c2d      	ldr	r4, [pc, #180]	; (8005354 <DoKeyInc+0x124>)
 800529e:	81da      	strh	r2, [r3, #14]
 UpdateDisp(Disp_Param);
 80052a0:	2002      	movs	r0, #2
 80052a2:	4623      	mov	r3, r4
}
 80052a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 UpdateDisp(Disp_Param);
 80052a8:	4718      	bx	r3
 		tmp0 = GetTrigMode();
 80052aa:	4b30      	ldr	r3, [pc, #192]	; (800536c <DoKeyInc+0x13c>)
 80052ac:	4798      	blx	r3
 		tmp0++;
 80052ae:	3001      	adds	r0, #1
 		tmp0 = SetTrigMode(tmp0);
 80052b0:	4b2f      	ldr	r3, [pc, #188]	; (8005370 <DoKeyInc+0x140>)
 80052b2:	b240      	sxtb	r0, r0
 80052b4:	4798      	blx	r3
		EE_WriteVariable(VirtAddVarTab[Addr_TrigMode], tmp0);
 80052b6:	4a25      	ldr	r2, [pc, #148]	; (800534c <DoKeyInc+0x11c>)
 80052b8:	b281      	uxth	r1, r0
 80052ba:	4b25      	ldr	r3, [pc, #148]	; (8005350 <DoKeyInc+0x120>)
 80052bc:	8990      	ldrh	r0, [r2, #12]
 80052be:	4798      	blx	r3
		StartCapture();
 80052c0:	4b27      	ldr	r3, [pc, #156]	; (8005360 <DoKeyInc+0x130>)
 80052c2:	4798      	blx	r3
 80052c4:	4c23      	ldr	r4, [pc, #140]	; (8005354 <DoKeyInc+0x124>)
 UpdateDisp(Disp_Param);
 80052c6:	2002      	movs	r0, #2
 80052c8:	4623      	mov	r3, r4
}
 80052ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 UpdateDisp(Disp_Param);
 80052ce:	4718      	bx	r3
 		tmp0 = GetTrigEdge();
 80052d0:	4b28      	ldr	r3, [pc, #160]	; (8005374 <DoKeyInc+0x144>)
 80052d2:	4798      	blx	r3
 		tmp0++;
 80052d4:	3001      	adds	r0, #1
 		tmp0 = SetTrigEdge(tmp0);
 80052d6:	4b28      	ldr	r3, [pc, #160]	; (8005378 <DoKeyInc+0x148>)
 80052d8:	b240      	sxtb	r0, r0
 80052da:	4798      	blx	r3
		EE_WriteVariable(VirtAddVarTab[Addr_TrigEdge], tmp0);
 80052dc:	4a1b      	ldr	r2, [pc, #108]	; (800534c <DoKeyInc+0x11c>)
 80052de:	4c1d      	ldr	r4, [pc, #116]	; (8005354 <DoKeyInc+0x124>)
 80052e0:	b281      	uxth	r1, r0
 80052e2:	4b1b      	ldr	r3, [pc, #108]	; (8005350 <DoKeyInc+0x120>)
 80052e4:	89d0      	ldrh	r0, [r2, #14]
 80052e6:	4798      	blx	r3
 UpdateDisp(Disp_Param);
 80052e8:	4623      	mov	r3, r4
}
 80052ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 UpdateDisp(Disp_Param);
 80052ee:	2002      	movs	r0, #2
 80052f0:	4718      	bx	r3
 		tmp1 = GetTrigLvl();
 80052f2:	4b22      	ldr	r3, [pc, #136]	; (800537c <DoKeyInc+0x14c>)
 80052f4:	4798      	blx	r3
 		tmp1++;
 80052f6:	3001      	adds	r0, #1
 		tmp1 = SetTrigLvl(tmp1);
 80052f8:	4b21      	ldr	r3, [pc, #132]	; (8005380 <DoKeyInc+0x150>)
 80052fa:	b200      	sxth	r0, r0
 80052fc:	4798      	blx	r3
		EE_WriteVariable(VirtAddVarTab[Addr_TrigLvl], tmp1);
 80052fe:	4a13      	ldr	r2, [pc, #76]	; (800534c <DoKeyInc+0x11c>)
 8005300:	b281      	uxth	r1, r0
 8005302:	4b13      	ldr	r3, [pc, #76]	; (8005350 <DoKeyInc+0x120>)
 8005304:	8a10      	ldrh	r0, [r2, #16]
 8005306:	4c13      	ldr	r4, [pc, #76]	; (8005354 <DoKeyInc+0x124>)
 8005308:	4798      	blx	r3
		OutputTLvl();
 800530a:	4b1e      	ldr	r3, [pc, #120]	; (8005384 <DoKeyInc+0x154>)
 800530c:	4798      	blx	r3
 UpdateDisp(Disp_Param);
 800530e:	4623      	mov	r3, r4
}
 8005310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 UpdateDisp(Disp_Param);
 8005314:	2002      	movs	r0, #2
 8005316:	4718      	bx	r3
 		tmp1 = GetHPos();
 8005318:	4b1b      	ldr	r3, [pc, #108]	; (8005388 <DoKeyInc+0x158>)
 800531a:	4798      	blx	r3
 		tmp1--;
 800531c:	3801      	subs	r0, #1
 		tmp1 = SetHPos(tmp1);
 800531e:	4b1b      	ldr	r3, [pc, #108]	; (800538c <DoKeyInc+0x15c>)
 8005320:	b200      	sxth	r0, r0
 8005322:	4798      	blx	r3
		EE_WriteVariable(VirtAddVarTab[Addr_HPos], tmp1);
 8005324:	4a09      	ldr	r2, [pc, #36]	; (800534c <DoKeyInc+0x11c>)
 8005326:	b281      	uxth	r1, r0
 8005328:	4b09      	ldr	r3, [pc, #36]	; (8005350 <DoKeyInc+0x120>)
 		UpdateDisp(Disp_Trace);
 800532a:	4c0a      	ldr	r4, [pc, #40]	; (8005354 <DoKeyInc+0x124>)
		EE_WriteVariable(VirtAddVarTab[Addr_HPos], tmp1);
 800532c:	8850      	ldrh	r0, [r2, #2]
 800532e:	4798      	blx	r3
 		UpdateDisp(Disp_Trace);
 8005330:	2004      	movs	r0, #4
 8005332:	47a0      	blx	r4
 UpdateDisp(Disp_Param);
 8005334:	4623      	mov	r3, r4
}
 8005336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 UpdateDisp(Disp_Param);
 800533a:	2002      	movs	r0, #2
 800533c:	4718      	bx	r3
 800533e:	bf00      	nop
 8005340:	0800218d 	.word	0x0800218d
 8005344:	08001ea1 	.word	0x08001ea1
 8005348:	08001e51 	.word	0x08001e51
 800534c:	20000144 	.word	0x20000144
 8005350:	08005a6d 	.word	0x08005a6d
 8005354:	08002285 	.word	0x08002285
 8005358:	08001f0d 	.word	0x08001f0d
 800535c:	08001ebd 	.word	0x08001ebd
 8005360:	08000ae9 	.word	0x08000ae9
 8005364:	08000a81 	.word	0x08000a81
 8005368:	200001b4 	.word	0x200001b4
 800536c:	08001ff1 	.word	0x08001ff1
 8005370:	08001fa5 	.word	0x08001fa5
 8005374:	08002059 	.word	0x08002059
 8005378:	0800200d 	.word	0x0800200d
 800537c:	080020cd 	.word	0x080020cd
 8005380:	08002075 	.word	0x08002075
 8005384:	08004c2d 	.word	0x08004c2d
 8005388:	08001f89 	.word	0x08001f89
 800538c:	08001f29 	.word	0x08001f29

08005390 <DoKeyDec>:
{
 8005390:	b510      	push	{r4, lr}
 switch(GetFocus()) {
 8005392:	4b3c      	ldr	r3, [pc, #240]	; (8005484 <DoKeyDec+0xf4>)
 8005394:	4798      	blx	r3
 8005396:	2805      	cmp	r0, #5
 8005398:	d827      	bhi.n	80053ea <DoKeyDec+0x5a>
 800539a:	e8df f000 	tbb	[pc, r0]
 800539e:	2816      	.short	0x2816
 80053a0:	035f4c3b 	.word	0x035f4c3b
 		tmp1 = GetVPos();
 80053a4:	4b38      	ldr	r3, [pc, #224]	; (8005488 <DoKeyDec+0xf8>)
 80053a6:	4798      	blx	r3
 		tmp1--;
 80053a8:	3801      	subs	r0, #1
 		tmp1 = SetVPos(tmp1);
 80053aa:	4b38      	ldr	r3, [pc, #224]	; (800548c <DoKeyDec+0xfc>)
 80053ac:	b200      	sxth	r0, r0
 80053ae:	4798      	blx	r3
		EE_WriteVariable(VirtAddVarTab[Addr_Vpos], tmp1);
 80053b0:	4a37      	ldr	r2, [pc, #220]	; (8005490 <DoKeyDec+0x100>)
 80053b2:	b281      	uxth	r1, r0
 80053b4:	4b37      	ldr	r3, [pc, #220]	; (8005494 <DoKeyDec+0x104>)
 80053b6:	8910      	ldrh	r0, [r2, #8]
 80053b8:	4798      	blx	r3
 		UpdateDisp(Disp_Trace);
 80053ba:	4c37      	ldr	r4, [pc, #220]	; (8005498 <DoKeyDec+0x108>)
 80053bc:	2004      	movs	r0, #4
 80053be:	47a0      	blx	r4
 UpdateDisp(Disp_Param);
 80053c0:	4623      	mov	r3, r4
}
 80053c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 UpdateDisp(Disp_Param);
 80053c6:	2002      	movs	r0, #2
 80053c8:	4718      	bx	r3
 		tmp0 = GetTimebase();
 80053ca:	4b34      	ldr	r3, [pc, #208]	; (800549c <DoKeyDec+0x10c>)
 80053cc:	4798      	blx	r3
 		tmp0--;
 80053ce:	3801      	subs	r0, #1
 		tmp0 = SetTimeBase(tmp0);
 80053d0:	4b33      	ldr	r3, [pc, #204]	; (80054a0 <DoKeyDec+0x110>)
 80053d2:	b240      	sxtb	r0, r0
 80053d4:	4798      	blx	r3
 80053d6:	4604      	mov	r4, r0
		EE_WriteVariable(VirtAddVarTab[Addr_TimeBase], tmp0);
 80053d8:	4b2d      	ldr	r3, [pc, #180]	; (8005490 <DoKeyDec+0x100>)
 80053da:	b281      	uxth	r1, r0
 80053dc:	8818      	ldrh	r0, [r3, #0]
 80053de:	4b2d      	ldr	r3, [pc, #180]	; (8005494 <DoKeyDec+0x104>)
 80053e0:	4798      	blx	r3
		if(tmp0 >= TB_50ms) {
 80053e2:	2c0c      	cmp	r4, #12
 80053e4:	dc0e      	bgt.n	8005404 <DoKeyDec+0x74>
			UpdateTimebase();
 80053e6:	4b2f      	ldr	r3, [pc, #188]	; (80054a4 <DoKeyDec+0x114>)
 80053e8:	4798      	blx	r3
 80053ea:	4c2b      	ldr	r4, [pc, #172]	; (8005498 <DoKeyDec+0x108>)
 80053ec:	e7e8      	b.n	80053c0 <DoKeyDec+0x30>
 		tmp0 = GetTrigMode();
 80053ee:	4b2e      	ldr	r3, [pc, #184]	; (80054a8 <DoKeyDec+0x118>)
 80053f0:	4798      	blx	r3
 		tmp0--;
 80053f2:	3801      	subs	r0, #1
 		tmp0 = SetTrigMode(tmp0);
 80053f4:	4b2d      	ldr	r3, [pc, #180]	; (80054ac <DoKeyDec+0x11c>)
 80053f6:	b240      	sxtb	r0, r0
 80053f8:	4798      	blx	r3
		EE_WriteVariable(VirtAddVarTab[Addr_TrigMode], tmp0);
 80053fa:	4a25      	ldr	r2, [pc, #148]	; (8005490 <DoKeyDec+0x100>)
 80053fc:	b281      	uxth	r1, r0
 80053fe:	4b25      	ldr	r3, [pc, #148]	; (8005494 <DoKeyDec+0x104>)
 8005400:	8990      	ldrh	r0, [r2, #12]
 8005402:	4798      	blx	r3
 8005404:	4c24      	ldr	r4, [pc, #144]	; (8005498 <DoKeyDec+0x108>)
		StartCapture();
 8005406:	4b2a      	ldr	r3, [pc, #168]	; (80054b0 <DoKeyDec+0x120>)
 8005408:	4798      	blx	r3
 UpdateDisp(Disp_Param);
 800540a:	4623      	mov	r3, r4
}
 800540c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 UpdateDisp(Disp_Param);
 8005410:	2002      	movs	r0, #2
 8005412:	4718      	bx	r3
 		tmp0 = GetTrigEdge();
 8005414:	4b27      	ldr	r3, [pc, #156]	; (80054b4 <DoKeyDec+0x124>)
 8005416:	4798      	blx	r3
 		tmp0--;
 8005418:	3801      	subs	r0, #1
 		tmp0 = SetTrigEdge(tmp0);
 800541a:	4b27      	ldr	r3, [pc, #156]	; (80054b8 <DoKeyDec+0x128>)
 800541c:	b240      	sxtb	r0, r0
 800541e:	4798      	blx	r3
		EE_WriteVariable(VirtAddVarTab[Addr_TrigEdge], tmp0);
 8005420:	4a1b      	ldr	r2, [pc, #108]	; (8005490 <DoKeyDec+0x100>)
 8005422:	4c1d      	ldr	r4, [pc, #116]	; (8005498 <DoKeyDec+0x108>)
 8005424:	b281      	uxth	r1, r0
 8005426:	4b1b      	ldr	r3, [pc, #108]	; (8005494 <DoKeyDec+0x104>)
 8005428:	89d0      	ldrh	r0, [r2, #14]
 800542a:	4798      	blx	r3
 UpdateDisp(Disp_Param);
 800542c:	4623      	mov	r3, r4
}
 800542e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 UpdateDisp(Disp_Param);
 8005432:	2002      	movs	r0, #2
 8005434:	4718      	bx	r3
 		tmp1 = GetTrigLvl();
 8005436:	4b21      	ldr	r3, [pc, #132]	; (80054bc <DoKeyDec+0x12c>)
 8005438:	4798      	blx	r3
 		tmp1--;
 800543a:	3801      	subs	r0, #1
 		tmp1 = SetTrigLvl(tmp1);
 800543c:	4b20      	ldr	r3, [pc, #128]	; (80054c0 <DoKeyDec+0x130>)
 800543e:	b200      	sxth	r0, r0
 8005440:	4798      	blx	r3
		EE_WriteVariable(VirtAddVarTab[Addr_TrigLvl], tmp1);
 8005442:	4a13      	ldr	r2, [pc, #76]	; (8005490 <DoKeyDec+0x100>)
 8005444:	b281      	uxth	r1, r0
 8005446:	4b13      	ldr	r3, [pc, #76]	; (8005494 <DoKeyDec+0x104>)
 8005448:	8a10      	ldrh	r0, [r2, #16]
 800544a:	4c13      	ldr	r4, [pc, #76]	; (8005498 <DoKeyDec+0x108>)
 800544c:	4798      	blx	r3
		OutputTLvl();
 800544e:	4b1d      	ldr	r3, [pc, #116]	; (80054c4 <DoKeyDec+0x134>)
 8005450:	4798      	blx	r3
 UpdateDisp(Disp_Param);
 8005452:	4623      	mov	r3, r4
}
 8005454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 UpdateDisp(Disp_Param);
 8005458:	2002      	movs	r0, #2
 800545a:	4718      	bx	r3
 		tmp1 = GetHPos();
 800545c:	4b1a      	ldr	r3, [pc, #104]	; (80054c8 <DoKeyDec+0x138>)
 800545e:	4798      	blx	r3
 		tmp1++;
 8005460:	3001      	adds	r0, #1
 		tmp1 = SetHPos(tmp1);
 8005462:	4b1a      	ldr	r3, [pc, #104]	; (80054cc <DoKeyDec+0x13c>)
 8005464:	b200      	sxth	r0, r0
 8005466:	4798      	blx	r3
		EE_WriteVariable(VirtAddVarTab[Addr_HPos], tmp1);
 8005468:	4a09      	ldr	r2, [pc, #36]	; (8005490 <DoKeyDec+0x100>)
 800546a:	b281      	uxth	r1, r0
 800546c:	4b09      	ldr	r3, [pc, #36]	; (8005494 <DoKeyDec+0x104>)
 		UpdateDisp(Disp_Trace);
 800546e:	4c0a      	ldr	r4, [pc, #40]	; (8005498 <DoKeyDec+0x108>)
		EE_WriteVariable(VirtAddVarTab[Addr_HPos], tmp1);
 8005470:	8850      	ldrh	r0, [r2, #2]
 8005472:	4798      	blx	r3
 		UpdateDisp(Disp_Trace);
 8005474:	2004      	movs	r0, #4
 8005476:	47a0      	blx	r4
 UpdateDisp(Disp_Param);
 8005478:	4623      	mov	r3, r4
}
 800547a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 UpdateDisp(Disp_Param);
 800547e:	2002      	movs	r0, #2
 8005480:	4718      	bx	r3
 8005482:	bf00      	nop
 8005484:	0800218d 	.word	0x0800218d
 8005488:	08001ea1 	.word	0x08001ea1
 800548c:	08001e51 	.word	0x08001e51
 8005490:	20000144 	.word	0x20000144
 8005494:	08005a6d 	.word	0x08005a6d
 8005498:	08002285 	.word	0x08002285
 800549c:	08001f0d 	.word	0x08001f0d
 80054a0:	08001ebd 	.word	0x08001ebd
 80054a4:	08000a81 	.word	0x08000a81
 80054a8:	08001ff1 	.word	0x08001ff1
 80054ac:	08001fa5 	.word	0x08001fa5
 80054b0:	08000ae9 	.word	0x08000ae9
 80054b4:	08002059 	.word	0x08002059
 80054b8:	0800200d 	.word	0x0800200d
 80054bc:	080020cd 	.word	0x080020cd
 80054c0:	08002075 	.word	0x08002075
 80054c4:	08004c2d 	.word	0x08004c2d
 80054c8:	08001f89 	.word	0x08001f89
 80054cc:	08001f29 	.word	0x08001f29

080054d0 <DoKeySel>:
{
 80054d0:	b510      	push	{r4, lr}
 tmp = GetFocus();
 80054d2:	4b07      	ldr	r3, [pc, #28]	; (80054f0 <DoKeySel+0x20>)
 80054d4:	4798      	blx	r3
 tmp++;
 80054d6:	3001      	adds	r0, #1
 80054d8:	b2c0      	uxtb	r0, r0
 	tmp = 0;
 80054da:	2806      	cmp	r0, #6
 SetFocus(tmp);
 80054dc:	4b05      	ldr	r3, [pc, #20]	; (80054f4 <DoKeySel+0x24>)
 80054de:	bf28      	it	cs
 80054e0:	2000      	movcs	r0, #0
 80054e2:	4798      	blx	r3
}
 80054e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 UpdateDisp(Disp_Param);
 80054e8:	2002      	movs	r0, #2
 80054ea:	4b03      	ldr	r3, [pc, #12]	; (80054f8 <DoKeySel+0x28>)
 80054ec:	4718      	bx	r3
 80054ee:	bf00      	nop
 80054f0:	0800218d 	.word	0x0800218d
 80054f4:	08002155 	.word	0x08002155
 80054f8:	08002285 	.word	0x08002285

080054fc <DoKeyIncH>:

void	DoKeyIncH(void)
{
 80054fc:	b510      	push	{r4, lr}
 S16	tmp1;
 
 switch(GetFocus()) {
 80054fe:	4b18      	ldr	r3, [pc, #96]	; (8005560 <DoKeyIncH+0x64>)
 8005500:	4798      	blx	r3
 8005502:	2804      	cmp	r0, #4
 8005504:	d020      	beq.n	8005548 <DoKeyIncH+0x4c>
 8005506:	2805      	cmp	r0, #5
 8005508:	d013      	beq.n	8005532 <DoKeyIncH+0x36>
 800550a:	2803      	cmp	r0, #3
 800550c:	d004      	beq.n	8005518 <DoKeyIncH+0x1c>
 		SetHPos(tmp1);		
		break;
 	}

 UpdateDisp(Disp_Param);
}
 800550e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 UpdateDisp(Disp_Param);
 8005512:	2002      	movs	r0, #2
 8005514:	4b13      	ldr	r3, [pc, #76]	; (8005564 <DoKeyIncH+0x68>)
 8005516:	4718      	bx	r3
 		tmp1 = GetTrigLvl();
 8005518:	4b13      	ldr	r3, [pc, #76]	; (8005568 <DoKeyIncH+0x6c>)
 800551a:	4798      	blx	r3
 		tmp1 += 10;
 800551c:	300a      	adds	r0, #10
 		SetTrigLvl(tmp1);
 800551e:	4b13      	ldr	r3, [pc, #76]	; (800556c <DoKeyIncH+0x70>)
 8005520:	b200      	sxth	r0, r0
 8005522:	4798      	blx	r3
		OutputTLvl();
 8005524:	4b12      	ldr	r3, [pc, #72]	; (8005570 <DoKeyIncH+0x74>)
 8005526:	4798      	blx	r3
}
 8005528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 UpdateDisp(Disp_Param);
 800552c:	2002      	movs	r0, #2
 800552e:	4b0d      	ldr	r3, [pc, #52]	; (8005564 <DoKeyIncH+0x68>)
 8005530:	4718      	bx	r3
 		tmp1 = GetVPos();
 8005532:	4b10      	ldr	r3, [pc, #64]	; (8005574 <DoKeyIncH+0x78>)
 8005534:	4798      	blx	r3
 		tmp1 += 10;
 8005536:	300a      	adds	r0, #10
 		SetVPos(tmp1);
 8005538:	4b0f      	ldr	r3, [pc, #60]	; (8005578 <DoKeyIncH+0x7c>)
 800553a:	b200      	sxth	r0, r0
 800553c:	4798      	blx	r3
}
 800553e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 UpdateDisp(Disp_Param);
 8005542:	2002      	movs	r0, #2
 8005544:	4b07      	ldr	r3, [pc, #28]	; (8005564 <DoKeyIncH+0x68>)
 8005546:	4718      	bx	r3
 		tmp1 = GetHPos();
 8005548:	4b0c      	ldr	r3, [pc, #48]	; (800557c <DoKeyIncH+0x80>)
 800554a:	4798      	blx	r3
 		tmp1 -= 20;
 800554c:	3814      	subs	r0, #20
 		SetHPos(tmp1);		
 800554e:	4b0c      	ldr	r3, [pc, #48]	; (8005580 <DoKeyIncH+0x84>)
 8005550:	b200      	sxth	r0, r0
 8005552:	4798      	blx	r3
}
 8005554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 UpdateDisp(Disp_Param);
 8005558:	2002      	movs	r0, #2
 800555a:	4b02      	ldr	r3, [pc, #8]	; (8005564 <DoKeyIncH+0x68>)
 800555c:	4718      	bx	r3
 800555e:	bf00      	nop
 8005560:	0800218d 	.word	0x0800218d
 8005564:	08002285 	.word	0x08002285
 8005568:	080020cd 	.word	0x080020cd
 800556c:	08002075 	.word	0x08002075
 8005570:	08004c2d 	.word	0x08004c2d
 8005574:	08001ea1 	.word	0x08001ea1
 8005578:	08001e51 	.word	0x08001e51
 800557c:	08001f89 	.word	0x08001f89
 8005580:	08001f29 	.word	0x08001f29

08005584 <DoKeyDecH>:

void	DoKeyDecH(void)
{
 8005584:	b510      	push	{r4, lr}
 S16	tmp1;
 
 switch(GetFocus()) {
 8005586:	4b18      	ldr	r3, [pc, #96]	; (80055e8 <DoKeyDecH+0x64>)
 8005588:	4798      	blx	r3
 800558a:	2804      	cmp	r0, #4
 800558c:	d020      	beq.n	80055d0 <DoKeyDecH+0x4c>
 800558e:	2805      	cmp	r0, #5
 8005590:	d013      	beq.n	80055ba <DoKeyDecH+0x36>
 8005592:	2803      	cmp	r0, #3
 8005594:	d004      	beq.n	80055a0 <DoKeyDecH+0x1c>
 		SetHPos(tmp1);
		break;
 	}

 UpdateDisp(Disp_Param);
}
 8005596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 UpdateDisp(Disp_Param);
 800559a:	2002      	movs	r0, #2
 800559c:	4b13      	ldr	r3, [pc, #76]	; (80055ec <DoKeyDecH+0x68>)
 800559e:	4718      	bx	r3
 		tmp1 = GetTrigLvl();
 80055a0:	4b13      	ldr	r3, [pc, #76]	; (80055f0 <DoKeyDecH+0x6c>)
 80055a2:	4798      	blx	r3
 		tmp1 -= 10;
 80055a4:	380a      	subs	r0, #10
 		SetTrigLvl(tmp1);
 80055a6:	4b13      	ldr	r3, [pc, #76]	; (80055f4 <DoKeyDecH+0x70>)
 80055a8:	b200      	sxth	r0, r0
 80055aa:	4798      	blx	r3
		OutputTLvl();
 80055ac:	4b12      	ldr	r3, [pc, #72]	; (80055f8 <DoKeyDecH+0x74>)
 80055ae:	4798      	blx	r3
}
 80055b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 UpdateDisp(Disp_Param);
 80055b4:	2002      	movs	r0, #2
 80055b6:	4b0d      	ldr	r3, [pc, #52]	; (80055ec <DoKeyDecH+0x68>)
 80055b8:	4718      	bx	r3
 		tmp1 = GetVPos();
 80055ba:	4b10      	ldr	r3, [pc, #64]	; (80055fc <DoKeyDecH+0x78>)
 80055bc:	4798      	blx	r3
 		tmp1 -= 10;
 80055be:	380a      	subs	r0, #10
 		SetVPos(tmp1);
 80055c0:	4b0f      	ldr	r3, [pc, #60]	; (8005600 <DoKeyDecH+0x7c>)
 80055c2:	b200      	sxth	r0, r0
 80055c4:	4798      	blx	r3
}
 80055c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 UpdateDisp(Disp_Param);
 80055ca:	2002      	movs	r0, #2
 80055cc:	4b07      	ldr	r3, [pc, #28]	; (80055ec <DoKeyDecH+0x68>)
 80055ce:	4718      	bx	r3
 		tmp1 = GetHPos();
 80055d0:	4b0c      	ldr	r3, [pc, #48]	; (8005604 <DoKeyDecH+0x80>)
 80055d2:	4798      	blx	r3
 		tmp1 += 20;
 80055d4:	3014      	adds	r0, #20
 		SetHPos(tmp1);
 80055d6:	4b0c      	ldr	r3, [pc, #48]	; (8005608 <DoKeyDecH+0x84>)
 80055d8:	b200      	sxth	r0, r0
 80055da:	4798      	blx	r3
}
 80055dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 UpdateDisp(Disp_Param);
 80055e0:	2002      	movs	r0, #2
 80055e2:	4b02      	ldr	r3, [pc, #8]	; (80055ec <DoKeyDecH+0x68>)
 80055e4:	4718      	bx	r3
 80055e6:	bf00      	nop
 80055e8:	0800218d 	.word	0x0800218d
 80055ec:	08002285 	.word	0x08002285
 80055f0:	080020cd 	.word	0x080020cd
 80055f4:	08002075 	.word	0x08002075
 80055f8:	08004c2d 	.word	0x08004c2d
 80055fc:	08001ea1 	.word	0x08001ea1
 8005600:	08001e51 	.word	0x08001e51
 8005604:	08001f89 	.word	0x08001f89
 8005608:	08001f29 	.word	0x08001f29

0800560c <KeyProc>:
 switch(Keypad.KeyCode) {
 800560c:	4b10      	ldr	r3, [pc, #64]	; (8005650 <KeyProc+0x44>)
 800560e:	88db      	ldrh	r3, [r3, #6]
 8005610:	3b01      	subs	r3, #1
 8005612:	2b06      	cmp	r3, #6
 8005614:	d817      	bhi.n	8005646 <KeyProc+0x3a>
 8005616:	e8df f003 	tbb	[pc, r3]
 800561a:	0806      	.short	0x0806
 800561c:	140e0c0a 	.word	0x140e0c0a
 8005620:	04          	.byte	0x04
 8005621:	00          	.byte	0x00
		DoKeyDecH();
 8005622:	4b0c      	ldr	r3, [pc, #48]	; (8005654 <KeyProc+0x48>)
 8005624:	4718      	bx	r3
		DoKeyOk();
 8005626:	4b0c      	ldr	r3, [pc, #48]	; (8005658 <KeyProc+0x4c>)
 8005628:	4718      	bx	r3
		DoKeyInc();
 800562a:	4b0c      	ldr	r3, [pc, #48]	; (800565c <KeyProc+0x50>)
 800562c:	4718      	bx	r3
		DoKeyDec();
 800562e:	4b0c      	ldr	r3, [pc, #48]	; (8005660 <KeyProc+0x54>)
 8005630:	4718      	bx	r3
		DoKeySel();
 8005632:	4b0c      	ldr	r3, [pc, #48]	; (8005664 <KeyProc+0x58>)
 8005634:	4718      	bx	r3
{
 8005636:	b510      	push	{r4, lr}
 if(GetFocus() == FC_VPos) {
 8005638:	4b0b      	ldr	r3, [pc, #44]	; (8005668 <KeyProc+0x5c>)
 800563a:	4798      	blx	r3
 800563c:	2805      	cmp	r0, #5
 800563e:	d003      	beq.n	8005648 <KeyProc+0x3c>
}
 8005640:	bd10      	pop	{r4, pc}
		DoKeyIncH();
 8005642:	4b0a      	ldr	r3, [pc, #40]	; (800566c <KeyProc+0x60>)
 8005644:	4718      	bx	r3
 8005646:	4770      	bx	lr
 8005648:	4b09      	ldr	r3, [pc, #36]	; (8005670 <KeyProc+0x64>)
}
 800564a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800564e:	4718      	bx	r3
 8005650:	200001b4 	.word	0x200001b4
 8005654:	08005585 	.word	0x08005585
 8005658:	080051e9 	.word	0x080051e9
 800565c:	08005231 	.word	0x08005231
 8005660:	08005391 	.word	0x08005391
 8005664:	080054d1 	.word	0x080054d1
 8005668:	0800218d 	.word	0x0800218d
 800566c:	080054fd 	.word	0x080054fd
 8005670:	08004e9d 	.word	0x08004e9d

08005674 <LedBlink>:
void	LedBlink(void)
{
 U16	tmp;
 
 // Turn on LED
 Port_BitClr(LED_Base, (1 << LED_Bit));
 8005674:	f44f 4200 	mov.w	r2, #32768	; 0x8000
{
 8005678:	b538      	push	{r3, r4, r5, lr}
 Port_BitClr(LED_Base, (1 << LED_Bit));
 800567a:	2414      	movs	r4, #20
 800567c:	4b13      	ldr	r3, [pc, #76]	; (80056cc <LedBlink+0x58>)
 800567e:	4d14      	ldr	r5, [pc, #80]	; (80056d0 <LedBlink+0x5c>)
 8005680:	615a      	str	r2, [r3, #20]
 8005682:	3c01      	subs	r4, #1
 tmp = 20;
 while(tmp) {
 	Delay(65000);
 8005684:	f64f 50e8 	movw	r0, #65000	; 0xfde8
 8005688:	b2a4      	uxth	r4, r4
 800568a:	47a8      	blx	r5
 while(tmp) {
 800568c:	2c00      	cmp	r4, #0
 800568e:	d1f8      	bne.n	8005682 <LedBlink+0xe>
 	tmp--;
 	}
 
 // Turn off LED
 Port_BitSet(LED_Base, (1 << LED_Bit));
 8005690:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005694:	2414      	movs	r4, #20
 8005696:	4b0d      	ldr	r3, [pc, #52]	; (80056cc <LedBlink+0x58>)
 8005698:	611a      	str	r2, [r3, #16]
 800569a:	3c01      	subs	r4, #1
 tmp = 20;
 while(tmp) {
 	Delay(65000);
 800569c:	f64f 50e8 	movw	r0, #65000	; 0xfde8
 80056a0:	b2a4      	uxth	r4, r4
 80056a2:	47a8      	blx	r5
 while(tmp) {
 80056a4:	2c00      	cmp	r4, #0
 80056a6:	d1f8      	bne.n	800569a <LedBlink+0x26>
 	tmp--;
 	}

 // Turn on LED
 Port_BitClr(LED_Base, (1 << LED_Bit));
 80056a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80056ac:	2414      	movs	r4, #20
 80056ae:	4b07      	ldr	r3, [pc, #28]	; (80056cc <LedBlink+0x58>)
 80056b0:	615a      	str	r2, [r3, #20]
 80056b2:	3c01      	subs	r4, #1
 tmp = 20;
 while(tmp) {
 	Delay(65000);
 80056b4:	f64f 50e8 	movw	r0, #65000	; 0xfde8
 80056b8:	b2a4      	uxth	r4, r4
 80056ba:	47a8      	blx	r5
 while(tmp) {
 80056bc:	2c00      	cmp	r4, #0
 80056be:	d1f8      	bne.n	80056b2 <LedBlink+0x3e>
 	tmp--;
 	}
 
 // Turn off LED
 Port_BitSet(LED_Base, (1 << LED_Bit));
 80056c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80056c4:	4b01      	ldr	r3, [pc, #4]	; (80056cc <LedBlink+0x58>)
 80056c6:	611a      	str	r2, [r3, #16]
}
 80056c8:	bd38      	pop	{r3, r4, r5, pc}
 80056ca:	bf00      	nop
 80056cc:	40010800 	.word	0x40010800
 80056d0:	08004c55 	.word	0x08004c55

080056d4 <TestMode>:

 // Remap PD0 & PD1 to make them available as GPIO
 AFIO->MAPR |= AFIO_MAPR_PD01_REMAP;

 // Set all ports to output mode
 GPIOA->CRL = 0x33333333;
 80056d4:	482b      	ldr	r0, [pc, #172]	; (8005784 <TestMode+0xb0>)
 GPIOA->CRH = 0x33333333;

 GPIOB->CRL = 0x33333333;
 GPIOB->CRH = 0x33333333;

 GPIOC->CRL = 0x33333333;
 80056d6:	492c      	ldr	r1, [pc, #176]	; (8005788 <TestMode+0xb4>)
 GPIOA->CRL = 0x33333333;
 80056d8:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
{
 80056dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 GPIOD->CRL = 0x33333333;
 GPIOD->CRH = 0x33333333;

 // Blink LEDs
 while(1) {
	GPIOA->ODR = 0x5555;
 80056e0:	4680      	mov	r8, r0
	GPIOB->ODR = 0x5555;
	GPIOC->ODR = 0x5555;
 80056e2:	460f      	mov	r7, r1
 RCC->CFGR &= ~RCC_CFGR_SW;
 80056e4:	4a29      	ldr	r2, [pc, #164]	; (800578c <TestMode+0xb8>)
 GPIOB->CRL = 0x33333333;
 80056e6:	4d2a      	ldr	r5, [pc, #168]	; (8005790 <TestMode+0xbc>)
 RCC->CFGR &= ~RCC_CFGR_SW;
 80056e8:	6854      	ldr	r4, [r2, #4]
 80056ea:	f024 0403 	bic.w	r4, r4, #3
 80056ee:	6054      	str	r4, [r2, #4]
 RCC->CFGR |= RCC_CFGR_SW_HSI;
 80056f0:	6854      	ldr	r4, [r2, #4]
 80056f2:	6054      	str	r4, [r2, #4]
 AFIO->MAPR &= ~AFIO_MAPR_SWJ_CFG;
 80056f4:	f5a2 3288 	sub.w	r2, r2, #69632	; 0x11000
 80056f8:	6854      	ldr	r4, [r2, #4]
 80056fa:	f024 64e0 	bic.w	r4, r4, #117440512	; 0x7000000
 80056fe:	6054      	str	r4, [r2, #4]
 AFIO->MAPR |= AFIO_MAPR_SWJ_CFG_2;
 8005700:	6854      	ldr	r4, [r2, #4]
 8005702:	f044 6480 	orr.w	r4, r4, #67108864	; 0x4000000
 8005706:	6054      	str	r4, [r2, #4]
 AFIO->MAPR |= AFIO_MAPR_PD01_REMAP;
 8005708:	6854      	ldr	r4, [r2, #4]
 800570a:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 800570e:	6054      	str	r4, [r2, #4]
 GPIOD->CRL = 0x33333333;
 8005710:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8005714:	4c1f      	ldr	r4, [pc, #124]	; (8005794 <TestMode+0xc0>)
 GPIOA->CRL = 0x33333333;
 8005716:	6003      	str	r3, [r0, #0]
 GPIOA->CRH = 0x33333333;
 8005718:	6043      	str	r3, [r0, #4]
 GPIOB->CRL = 0x33333333;
 800571a:	602b      	str	r3, [r5, #0]
 GPIOB->CRH = 0x33333333;
 800571c:	606b      	str	r3, [r5, #4]
 GPIOC->CRL = 0x33333333;
 800571e:	600b      	str	r3, [r1, #0]
 GPIOC->CRH = 0x33333333;
 8005720:	604b      	str	r3, [r1, #4]
 GPIOD->CRL = 0x33333333;
 8005722:	6013      	str	r3, [r2, #0]
 GPIOD->CRH = 0x33333333;
 8005724:	6053      	str	r3, [r2, #4]
	GPIOA->ODR = 0x5555;
 8005726:	f245 5355 	movw	r3, #21845	; 0x5555
	GPIOB->ODR = 0x5555;
 800572a:	4e19      	ldr	r6, [pc, #100]	; (8005790 <TestMode+0xbc>)
	GPIOD->ODR = 0x5555;
 800572c:	4d1a      	ldr	r5, [pc, #104]	; (8005798 <TestMode+0xc4>)
	GPIOA->ODR = 0x5555;
 800572e:	f8c8 300c 	str.w	r3, [r8, #12]

	tmp = 5;
	while(tmp) {
		Delay(60000);
 8005732:	f64e 2060 	movw	r0, #60000	; 0xea60
	GPIOB->ODR = 0x5555;
 8005736:	60f3      	str	r3, [r6, #12]
	GPIOC->ODR = 0x5555;
 8005738:	60fb      	str	r3, [r7, #12]
	GPIOD->ODR = 0x5555;
 800573a:	60eb      	str	r3, [r5, #12]
		Delay(60000);
 800573c:	47a0      	blx	r4
 800573e:	f64e 2060 	movw	r0, #60000	; 0xea60
 8005742:	47a0      	blx	r4
 8005744:	f64e 2060 	movw	r0, #60000	; 0xea60
 8005748:	47a0      	blx	r4
 800574a:	f64e 2060 	movw	r0, #60000	; 0xea60
 800574e:	47a0      	blx	r4
 8005750:	f64e 2060 	movw	r0, #60000	; 0xea60
 8005754:	47a0      	blx	r4
		tmp--;
		}

	GPIOA->ODR = 0xAAAA;
 8005756:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
	GPIOC->ODR = 0xAAAA;
	GPIOD->ODR = 0xAAAA;

	tmp = 5;
	while(tmp) {
		Delay(60000);
 800575a:	f64e 2060 	movw	r0, #60000	; 0xea60
	GPIOA->ODR = 0xAAAA;
 800575e:	f8c8 300c 	str.w	r3, [r8, #12]
	GPIOB->ODR = 0xAAAA;
 8005762:	60f3      	str	r3, [r6, #12]
	GPIOC->ODR = 0xAAAA;
 8005764:	60fb      	str	r3, [r7, #12]
	GPIOD->ODR = 0xAAAA;
 8005766:	60eb      	str	r3, [r5, #12]
		Delay(60000);
 8005768:	47a0      	blx	r4
 800576a:	f64e 2060 	movw	r0, #60000	; 0xea60
 800576e:	47a0      	blx	r4
 8005770:	f64e 2060 	movw	r0, #60000	; 0xea60
 8005774:	47a0      	blx	r4
 8005776:	f64e 2060 	movw	r0, #60000	; 0xea60
 800577a:	47a0      	blx	r4
 800577c:	f64e 2060 	movw	r0, #60000	; 0xea60
 8005780:	47a0      	blx	r4
 8005782:	e7d0      	b.n	8005726 <TestMode+0x52>
 8005784:	40010800 	.word	0x40010800
 8005788:	40011000 	.word	0x40011000
 800578c:	40021000 	.word	0x40021000
 8005790:	40010c00 	.word	0x40010c00
 8005794:	08004c55 	.word	0x08004c55
 8005798:	40011400 	.word	0x40011400

0800579c <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop

080057a0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80057a0:	e7fe      	b.n	80057a0 <HardFault_Handler>
 80057a2:	bf00      	nop

080057a4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80057a4:	e7fe      	b.n	80057a4 <MemManage_Handler>
 80057a6:	bf00      	nop

080057a8 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80057a8:	e7fe      	b.n	80057a8 <BusFault_Handler>
 80057aa:	bf00      	nop

080057ac <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80057ac:	e7fe      	b.n	80057ac <UsageFault_Handler>
 80057ae:	bf00      	nop

080057b0 <SVC_Handler>:
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop

080057b4 <DebugMon_Handler>:
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop

080057b8 <PendSV_Handler>:
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop

080057bc <SysTick_Handler>:
  * @retval None
  */
void SysTick_Handler(void)
{
 // Key scan
 if(--TimerKeyScan == 0) {
 80057bc:	4a0c      	ldr	r2, [pc, #48]	; (80057f0 <SysTick_Handler+0x34>)
 80057be:	8813      	ldrh	r3, [r2, #0]
 80057c0:	3b01      	subs	r3, #1
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	b15b      	cbz	r3, 80057de <SysTick_Handler+0x22>
 80057c6:	8013      	strh	r3, [r2, #0]
	TimerKeyScan = 10;	// 10ms
	BitSet(Keypad.Flags, (1 << KF_DoKeyScan));
 	}

 // General timer
 if(GTimer) {
 80057c8:	4a0a      	ldr	r2, [pc, #40]	; (80057f4 <SysTick_Handler+0x38>)
 80057ca:	8813      	ldrh	r3, [r2, #0]
 80057cc:	b133      	cbz	r3, 80057dc <SysTick_Handler+0x20>
	GTimer--;
 80057ce:	3b01      	subs	r3, #1
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	8013      	strh	r3, [r2, #0]
	if(GTimer == 0) {
 80057d4:	b913      	cbnz	r3, 80057dc <SysTick_Handler+0x20>
		GTimeout = 1;
 80057d6:	2201      	movs	r2, #1
 80057d8:	4b07      	ldr	r3, [pc, #28]	; (80057f8 <SysTick_Handler+0x3c>)
 80057da:	701a      	strb	r2, [r3, #0]
		}
 	}
}
 80057dc:	4770      	bx	lr
	TimerKeyScan = 10;	// 10ms
 80057de:	230a      	movs	r3, #10
	BitSet(Keypad.Flags, (1 << KF_DoKeyScan));
 80057e0:	4906      	ldr	r1, [pc, #24]	; (80057fc <SysTick_Handler+0x40>)
	TimerKeyScan = 10;	// 10ms
 80057e2:	8013      	strh	r3, [r2, #0]
	BitSet(Keypad.Flags, (1 << KF_DoKeyScan));
 80057e4:	880b      	ldrh	r3, [r1, #0]
 80057e6:	f043 0301 	orr.w	r3, r3, #1
 80057ea:	800b      	strh	r3, [r1, #0]
 80057ec:	e7ec      	b.n	80057c8 <SysTick_Handler+0xc>
 80057ee:	bf00      	nop
 80057f0:	200001a8 	.word	0x200001a8
 80057f4:	200001ac 	.word	0x200001ac
 80057f8:	200001aa 	.word	0x200001aa
 80057fc:	200001b4 	.word	0x200001b4

08005800 <EE_VerifyPageFullWriteVariable>:
static uint16_t EE_FindValidPage(uint8_t Operation)
{
  uint16_t PageStatus0 = 6, PageStatus1 = 6;

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8005800:	4b1a      	ldr	r3, [pc, #104]	; (800586c <EE_VerifyPageFullWriteVariable+0x6c>)

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8005802:	4a1b      	ldr	r2, [pc, #108]	; (8005870 <EE_VerifyPageFullWriteVariable+0x70>)
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8005804:	881b      	ldrh	r3, [r3, #0]
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8005806:	8812      	ldrh	r2, [r2, #0]
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8005808:	b29b      	uxth	r3, r3
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800580a:	b292      	uxth	r2, r2

  /* Write or read operation */
  switch (Operation)
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 800580c:	b9ea      	cbnz	r2, 800584a <EE_VerifyPageFullWriteVariable+0x4a>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 800580e:	f64e 62ee 	movw	r2, #61166	; 0xeeee
        {
          return PAGE0;         /* Page0 valid */
 8005812:	1a9b      	subs	r3, r3, r2
 8005814:	bf18      	it	ne
 8005816:	2301      	movne	r3, #1
  {
    return  NO_VALID_PAGE;
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8005818:	029b      	lsls	r3, r3, #10

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 800581a:	4a16      	ldr	r2, [pc, #88]	; (8005874 <EE_VerifyPageFullWriteVariable+0x74>)
{
 800581c:	b570      	push	{r4, r5, r6, lr}
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800581e:	f103 6400 	add.w	r4, r3, #134217728	; 0x8000000
 8005822:	f504 4440 	add.w	r4, r4, #49152	; 0xc000
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8005826:	441a      	add	r2, r3

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 8005828:	4294      	cmp	r4, r2
 800582a:	d303      	bcc.n	8005834 <EE_VerifyPageFullWriteVariable+0x34>
 800582c:	e015      	b.n	800585a <EE_VerifyPageFullWriteVariable+0x5a>
      return FlashStatus;
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 800582e:	3404      	adds	r4, #4
  while (Address < PageEndAddress)
 8005830:	42a2      	cmp	r2, r4
 8005832:	d912      	bls.n	800585a <EE_VerifyPageFullWriteVariable+0x5a>
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8005834:	6823      	ldr	r3, [r4, #0]
 8005836:	3301      	adds	r3, #1
 8005838:	d1f9      	bne.n	800582e <EE_VerifyPageFullWriteVariable+0x2e>
 800583a:	4605      	mov	r5, r0
      FlashStatus = FLASH_ProgramHalfWord(Address, Data);
 800583c:	4e0e      	ldr	r6, [pc, #56]	; (8005878 <EE_VerifyPageFullWriteVariable+0x78>)
 800583e:	4620      	mov	r0, r4
 8005840:	47b0      	blx	r6
      if (FlashStatus != FLASH_COMPLETE)
 8005842:	2804      	cmp	r0, #4
 8005844:	d00d      	beq.n	8005862 <EE_VerifyPageFullWriteVariable+0x62>
      return FlashStatus;
 8005846:	b280      	uxth	r0, r0
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
}
 8005848:	bd70      	pop	{r4, r5, r6, pc}
      else if (PageStatus0 == VALID_PAGE)
 800584a:	b943      	cbnz	r3, 800585e <EE_VerifyPageFullWriteVariable+0x5e>
        if (PageStatus1 == RECEIVE_DATA)
 800584c:	f64e 63ee 	movw	r3, #61166	; 0xeeee
          return PAGE0;         /* Page0 valid */
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	fab3 f383 	clz	r3, r3
 8005856:	095b      	lsrs	r3, r3, #5
 8005858:	e7de      	b.n	8005818 <EE_VerifyPageFullWriteVariable+0x18>
  return PAGE_FULL;
 800585a:	2080      	movs	r0, #128	; 0x80
}
 800585c:	bd70      	pop	{r4, r5, r6, pc}
    return  NO_VALID_PAGE;
 800585e:	20ab      	movs	r0, #171	; 0xab
}
 8005860:	4770      	bx	lr
      FlashStatus = FLASH_ProgramHalfWord(Address + 2, VirtAddress);
 8005862:	4629      	mov	r1, r5
 8005864:	1ca0      	adds	r0, r4, #2
 8005866:	47b0      	blx	r6
 8005868:	e7ed      	b.n	8005846 <EE_VerifyPageFullWriteVariable+0x46>
 800586a:	bf00      	nop
 800586c:	0800c000 	.word	0x0800c000
 8005870:	0800c400 	.word	0x0800c400
 8005874:	0800c3fe 	.word	0x0800c3fe
 8005878:	080062e5 	.word	0x080062e5

0800587c <EE_Format>:
{
 800587c:	b510      	push	{r4, lr}
  FlashStatus = FLASH_ErasePage(PAGE0_BASE_ADDRESS);
 800587e:	4808      	ldr	r0, [pc, #32]	; (80058a0 <EE_Format+0x24>)
 8005880:	4c08      	ldr	r4, [pc, #32]	; (80058a4 <EE_Format+0x28>)
 8005882:	47a0      	blx	r4
  if (FlashStatus != FLASH_COMPLETE)
 8005884:	2804      	cmp	r0, #4
 8005886:	d000      	beq.n	800588a <EE_Format+0xe>
}
 8005888:	bd10      	pop	{r4, pc}
  FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
 800588a:	2100      	movs	r1, #0
 800588c:	4804      	ldr	r0, [pc, #16]	; (80058a0 <EE_Format+0x24>)
 800588e:	4b06      	ldr	r3, [pc, #24]	; (80058a8 <EE_Format+0x2c>)
 8005890:	4798      	blx	r3
  if (FlashStatus != FLASH_COMPLETE)
 8005892:	2804      	cmp	r0, #4
 8005894:	d1f8      	bne.n	8005888 <EE_Format+0xc>
  FlashStatus = FLASH_ErasePage(PAGE1_BASE_ADDRESS);
 8005896:	4623      	mov	r3, r4
}
 8005898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  FlashStatus = FLASH_ErasePage(PAGE1_BASE_ADDRESS);
 800589c:	4803      	ldr	r0, [pc, #12]	; (80058ac <EE_Format+0x30>)
 800589e:	4718      	bx	r3
 80058a0:	0800c000 	.word	0x0800c000
 80058a4:	0800627d 	.word	0x0800627d
 80058a8:	080062e5 	.word	0x080062e5
 80058ac:	0800c400 	.word	0x0800c400

080058b0 <EE_ReadVariable>:
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80058b0:	4b12      	ldr	r3, [pc, #72]	; (80058fc <EE_ReadVariable+0x4c>)
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80058b2:	4a13      	ldr	r2, [pc, #76]	; (8005900 <EE_ReadVariable+0x50>)
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80058b4:	881b      	ldrh	r3, [r3, #0]
{
 80058b6:	b410      	push	{r4}
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80058b8:	b29b      	uxth	r3, r3
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80058ba:	8812      	ldrh	r2, [r2, #0]
      if (PageStatus0 == VALID_PAGE)
 80058bc:	b12b      	cbz	r3, 80058ca <EE_ReadVariable+0x1a>
 80058be:	b292      	uxth	r2, r2
      else if (PageStatus1 == VALID_PAGE)
 80058c0:	b9ca      	cbnz	r2, 80058f6 <EE_ReadVariable+0x46>
 80058c2:	4b10      	ldr	r3, [pc, #64]	; (8005904 <EE_ReadVariable+0x54>)
 80058c4:	4c10      	ldr	r4, [pc, #64]	; (8005908 <EE_ReadVariable+0x58>)
 80058c6:	461a      	mov	r2, r3
 80058c8:	e002      	b.n	80058d0 <EE_ReadVariable+0x20>
      if (PageStatus0 == VALID_PAGE)
 80058ca:	4b10      	ldr	r3, [pc, #64]	; (800590c <EE_ReadVariable+0x5c>)
 80058cc:	4c10      	ldr	r4, [pc, #64]	; (8005910 <EE_ReadVariable+0x60>)
 80058ce:	461a      	mov	r2, r3
    AddressValue = (*(__IO uint16_t*)Address);
 80058d0:	8812      	ldrh	r2, [r2, #0]
    if (AddressValue == VirtAddress)
 80058d2:	4290      	cmp	r0, r2
 80058d4:	d103      	bne.n	80058de <EE_ReadVariable+0x2e>
 80058d6:	e008      	b.n	80058ea <EE_ReadVariable+0x3a>
    AddressValue = (*(__IO uint16_t*)Address);
 80058d8:	881a      	ldrh	r2, [r3, #0]
    if (AddressValue == VirtAddress)
 80058da:	4290      	cmp	r0, r2
 80058dc:	d005      	beq.n	80058ea <EE_ReadVariable+0x3a>
      Address = Address - 4;
 80058de:	3b04      	subs	r3, #4
  while (Address > (PageStartAddress + 2))
 80058e0:	42a3      	cmp	r3, r4
 80058e2:	d8f9      	bhi.n	80058d8 <EE_ReadVariable+0x28>
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 80058e4:	2001      	movs	r0, #1
}
 80058e6:	bc10      	pop	{r4}
 80058e8:	4770      	bx	lr
      *Data = (*(__IO uint16_t*)(Address - 2));
 80058ea:	f833 3c02 	ldrh.w	r3, [r3, #-2]
      ReadStatus = 0;
 80058ee:	2000      	movs	r0, #0
      *Data = (*(__IO uint16_t*)(Address - 2));
 80058f0:	800b      	strh	r3, [r1, #0]
}
 80058f2:	bc10      	pop	{r4}
 80058f4:	4770      	bx	lr
    return  NO_VALID_PAGE;
 80058f6:	20ab      	movs	r0, #171	; 0xab
}
 80058f8:	bc10      	pop	{r4}
 80058fa:	4770      	bx	lr
 80058fc:	0800c000 	.word	0x0800c000
 8005900:	0800c400 	.word	0x0800c400
 8005904:	0800c7fe 	.word	0x0800c7fe
 8005908:	0800c402 	.word	0x0800c402
 800590c:	0800c3fe 	.word	0x0800c3fe
 8005910:	0800c002 	.word	0x0800c002

08005914 <EE_Init>:
  switch (PageStatus0)
 8005914:	f64e 62ee 	movw	r2, #61166	; 0xeeee
{
 8005918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800591c:	4d48      	ldr	r5, [pc, #288]	; (8005a40 <EE_Init+0x12c>)
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800591e:	4e49      	ldr	r6, [pc, #292]	; (8005a44 <EE_Init+0x130>)
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8005920:	882c      	ldrh	r4, [r5, #0]
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8005922:	8833      	ldrh	r3, [r6, #0]
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8005924:	b2a4      	uxth	r4, r4
  switch (PageStatus0)
 8005926:	4294      	cmp	r4, r2
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8005928:	b29b      	uxth	r3, r3
  switch (PageStatus0)
 800592a:	d04a      	beq.n	80059c2 <EE_Init+0xae>
 800592c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005930:	428c      	cmp	r4, r1
 8005932:	d036      	beq.n	80059a2 <EE_Init+0x8e>
 8005934:	b124      	cbz	r4, 8005940 <EE_Init+0x2c>
      FlashStatus = EE_Format();
 8005936:	4b44      	ldr	r3, [pc, #272]	; (8005a48 <EE_Init+0x134>)
 8005938:	4798      	blx	r3
 800593a:	b280      	uxth	r0, r0
}
 800593c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 8005940:	2b00      	cmp	r3, #0
 8005942:	d0f8      	beq.n	8005936 <EE_Init+0x22>
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 8005944:	428b      	cmp	r3, r1
 8005946:	d065      	beq.n	8005a14 <EE_Init+0x100>
  int16_t x = -1;
 8005948:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800594c:	4d3f      	ldr	r5, [pc, #252]	; (8005a4c <EE_Init+0x138>)
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 800594e:	4f40      	ldr	r7, [pc, #256]	; (8005a50 <EE_Init+0x13c>)
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8005950:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8005a54 <EE_Init+0x140>
 8005954:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8005a68 <EE_Init+0x154>
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8005958:	883b      	ldrh	r3, [r7, #0]
 800595a:	f835 0b02 	ldrh.w	r0, [r5], #2
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 800595e:	493d      	ldr	r1, [pc, #244]	; (8005a54 <EE_Init+0x140>)
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8005960:	4298      	cmp	r0, r3
            x = VarIdx;
 8005962:	bf08      	it	eq
 8005964:	b226      	sxtheq	r6, r4
          if (VarIdx != x)
 8005966:	42b4      	cmp	r4, r6
 8005968:	f104 0401 	add.w	r4, r4, #1
 800596c:	d00a      	beq.n	8005984 <EE_Init+0x70>
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 800596e:	47c0      	blx	r8
            if (ReadStatus != 0x1)
 8005970:	2801      	cmp	r0, #1
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8005972:	4b39      	ldr	r3, [pc, #228]	; (8005a58 <EE_Init+0x144>)
            if (ReadStatus != 0x1)
 8005974:	d006      	beq.n	8005984 <EE_Init+0x70>
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8005976:	f8b9 1000 	ldrh.w	r1, [r9]
 800597a:	f835 0c02 	ldrh.w	r0, [r5, #-2]
 800597e:	4798      	blx	r3
              if (EepromStatus != FLASH_COMPLETE)
 8005980:	2804      	cmp	r0, #4
 8005982:	d1db      	bne.n	800593c <EE_Init+0x28>
        for (VarIdx = 0; VarIdx < NumbOfVar; VarIdx++)
 8005984:	2c14      	cmp	r4, #20
 8005986:	d1e7      	bne.n	8005958 <EE_Init+0x44>
        FlashStatus = FLASH_ProgramHalfWord(PAGE1_BASE_ADDRESS, VALID_PAGE);
 8005988:	2100      	movs	r1, #0
 800598a:	482e      	ldr	r0, [pc, #184]	; (8005a44 <EE_Init+0x130>)
 800598c:	4b33      	ldr	r3, [pc, #204]	; (8005a5c <EE_Init+0x148>)
 800598e:	4798      	blx	r3
 8005990:	b280      	uxth	r0, r0
        if (FlashStatus != FLASH_COMPLETE)
 8005992:	2804      	cmp	r0, #4
 8005994:	d1d2      	bne.n	800593c <EE_Init+0x28>
        FlashStatus = FLASH_ErasePage(PAGE0_BASE_ADDRESS);
 8005996:	4b32      	ldr	r3, [pc, #200]	; (8005a60 <EE_Init+0x14c>)
 8005998:	4829      	ldr	r0, [pc, #164]	; (8005a40 <EE_Init+0x12c>)
 800599a:	4798      	blx	r3
 800599c:	b280      	uxth	r0, r0
}
 800599e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d0f7      	beq.n	8005996 <EE_Init+0x82>
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d1c5      	bne.n	8005936 <EE_Init+0x22>
        FlashStatus = FLASH_ErasePage(PAGE0_BASE_ADDRESS);
 80059aa:	4628      	mov	r0, r5
 80059ac:	4b2c      	ldr	r3, [pc, #176]	; (8005a60 <EE_Init+0x14c>)
 80059ae:	4798      	blx	r3
 80059b0:	b280      	uxth	r0, r0
        if (FlashStatus != FLASH_COMPLETE)
 80059b2:	2804      	cmp	r0, #4
 80059b4:	d1c2      	bne.n	800593c <EE_Init+0x28>
        FlashStatus = FLASH_ProgramHalfWord(PAGE1_BASE_ADDRESS, VALID_PAGE);
 80059b6:	4630      	mov	r0, r6
 80059b8:	2100      	movs	r1, #0
 80059ba:	4b28      	ldr	r3, [pc, #160]	; (8005a5c <EE_Init+0x148>)
 80059bc:	4798      	blx	r3
 80059be:	b280      	uxth	r0, r0
 80059c0:	e7bc      	b.n	800593c <EE_Init+0x28>
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 80059c2:	bb63      	cbnz	r3, 8005a1e <EE_Init+0x10a>
 80059c4:	461c      	mov	r4, r3
  int16_t x = -1;
 80059c6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80059ca:	4d20      	ldr	r5, [pc, #128]	; (8005a4c <EE_Init+0x138>)
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80059cc:	4f25      	ldr	r7, [pc, #148]	; (8005a64 <EE_Init+0x150>)
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80059ce:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8005a54 <EE_Init+0x140>
 80059d2:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8005a68 <EE_Init+0x154>
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80059d6:	883b      	ldrh	r3, [r7, #0]
 80059d8:	f835 0b02 	ldrh.w	r0, [r5], #2
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80059dc:	491d      	ldr	r1, [pc, #116]	; (8005a54 <EE_Init+0x140>)
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80059de:	4298      	cmp	r0, r3
            x = VarIdx;
 80059e0:	bf08      	it	eq
 80059e2:	b226      	sxtheq	r6, r4
          if (VarIdx != x)
 80059e4:	42b4      	cmp	r4, r6
 80059e6:	f104 0401 	add.w	r4, r4, #1
 80059ea:	d00a      	beq.n	8005a02 <EE_Init+0xee>
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80059ec:	47c0      	blx	r8
            if (ReadStatus != 0x1)
 80059ee:	2801      	cmp	r0, #1
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80059f0:	4b19      	ldr	r3, [pc, #100]	; (8005a58 <EE_Init+0x144>)
            if (ReadStatus != 0x1)
 80059f2:	d006      	beq.n	8005a02 <EE_Init+0xee>
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80059f4:	f8b9 1000 	ldrh.w	r1, [r9]
 80059f8:	f835 0c02 	ldrh.w	r0, [r5, #-2]
 80059fc:	4798      	blx	r3
              if (EepromStatus != FLASH_COMPLETE)
 80059fe:	2804      	cmp	r0, #4
 8005a00:	d19c      	bne.n	800593c <EE_Init+0x28>
        for (VarIdx = 0; VarIdx < NumbOfVar; VarIdx++)
 8005a02:	2c14      	cmp	r4, #20
 8005a04:	d1e7      	bne.n	80059d6 <EE_Init+0xc2>
        FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
 8005a06:	2100      	movs	r1, #0
 8005a08:	480d      	ldr	r0, [pc, #52]	; (8005a40 <EE_Init+0x12c>)
 8005a0a:	4b14      	ldr	r3, [pc, #80]	; (8005a5c <EE_Init+0x148>)
 8005a0c:	4798      	blx	r3
 8005a0e:	b280      	uxth	r0, r0
        if (FlashStatus != FLASH_COMPLETE)
 8005a10:	2804      	cmp	r0, #4
 8005a12:	d193      	bne.n	800593c <EE_Init+0x28>
        FlashStatus = FLASH_ErasePage(PAGE1_BASE_ADDRESS);
 8005a14:	480b      	ldr	r0, [pc, #44]	; (8005a44 <EE_Init+0x130>)
 8005a16:	4b12      	ldr	r3, [pc, #72]	; (8005a60 <EE_Init+0x14c>)
 8005a18:	4798      	blx	r3
 8005a1a:	b280      	uxth	r0, r0
 8005a1c:	e78e      	b.n	800593c <EE_Init+0x28>
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 8005a1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d187      	bne.n	8005936 <EE_Init+0x22>
        FlashStatus = FLASH_ErasePage(PAGE1_BASE_ADDRESS);
 8005a26:	4630      	mov	r0, r6
 8005a28:	4b0d      	ldr	r3, [pc, #52]	; (8005a60 <EE_Init+0x14c>)
 8005a2a:	4798      	blx	r3
 8005a2c:	b280      	uxth	r0, r0
        if (FlashStatus != FLASH_COMPLETE)
 8005a2e:	2804      	cmp	r0, #4
 8005a30:	d184      	bne.n	800593c <EE_Init+0x28>
        FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
 8005a32:	4628      	mov	r0, r5
 8005a34:	2100      	movs	r1, #0
 8005a36:	4b09      	ldr	r3, [pc, #36]	; (8005a5c <EE_Init+0x148>)
 8005a38:	4798      	blx	r3
 8005a3a:	b280      	uxth	r0, r0
 8005a3c:	e77e      	b.n	800593c <EE_Init+0x28>
 8005a3e:	bf00      	nop
 8005a40:	0800c000 	.word	0x0800c000
 8005a44:	0800c400 	.word	0x0800c400
 8005a48:	0800587d 	.word	0x0800587d
 8005a4c:	20000144 	.word	0x20000144
 8005a50:	0800c406 	.word	0x0800c406
 8005a54:	200026f0 	.word	0x200026f0
 8005a58:	08005801 	.word	0x08005801
 8005a5c:	080062e5 	.word	0x080062e5
 8005a60:	0800627d 	.word	0x0800627d
 8005a64:	0800c006 	.word	0x0800c006
 8005a68:	080058b1 	.word	0x080058b1

08005a6c <EE_WriteVariable>:
{
 8005a6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8005a70:	4c26      	ldr	r4, [pc, #152]	; (8005b0c <EE_WriteVariable+0xa0>)
{
 8005a72:	4605      	mov	r5, r0
 8005a74:	4688      	mov	r8, r1
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8005a76:	47a0      	blx	r4
  if (Status == PAGE_FULL)
 8005a78:	2880      	cmp	r0, #128	; 0x80
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8005a7a:	4683      	mov	fp, r0
  if (Status == PAGE_FULL)
 8005a7c:	d002      	beq.n	8005a84 <EE_WriteVariable+0x18>
}
 8005a7e:	4658      	mov	r0, fp
 8005a80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8005a84:	4922      	ldr	r1, [pc, #136]	; (8005b10 <EE_WriteVariable+0xa4>)
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8005a86:	4e23      	ldr	r6, [pc, #140]	; (8005b14 <EE_WriteVariable+0xa8>)
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8005a88:	880b      	ldrh	r3, [r1, #0]
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8005a8a:	8832      	ldrh	r2, [r6, #0]
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8005a8c:	b29b      	uxth	r3, r3
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8005a8e:	b292      	uxth	r2, r2
      if (PageStatus0 == VALID_PAGE)
 8005a90:	b173      	cbz	r3, 8005ab0 <EE_WriteVariable+0x44>
      else if (PageStatus1 == VALID_PAGE)
 8005a92:	b97a      	cbnz	r2, 8005ab4 <EE_WriteVariable+0x48>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;

    /* Old page address where variable will be taken from */
    OldPageAddress = PAGE1_BASE_ADDRESS;
 8005a94:	46b1      	mov	r9, r6
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8005a96:	460e      	mov	r6, r1
  {
    return NO_VALID_PAGE;       /* No valid Page */
  }

  /* Set the new Page status to RECEIVE_DATA status */
  FlashStatus = FLASH_ProgramHalfWord(NewPageAddress, RECEIVE_DATA);
 8005a98:	f64e 61ee 	movw	r1, #61166	; 0xeeee
 8005a9c:	4630      	mov	r0, r6
 8005a9e:	4f1e      	ldr	r7, [pc, #120]	; (8005b18 <EE_WriteVariable+0xac>)
 8005aa0:	47b8      	blx	r7
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != FLASH_COMPLETE)
 8005aa2:	2804      	cmp	r0, #4
 8005aa4:	d009      	beq.n	8005aba <EE_WriteVariable+0x4e>
  /* Set new Page status to VALID_PAGE status */
  FlashStatus = FLASH_ProgramHalfWord(NewPageAddress, VALID_PAGE);
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != FLASH_COMPLETE)
  {
    return FlashStatus;
 8005aa6:	fa1f fb80 	uxth.w	fp, r0
}
 8005aaa:	4658      	mov	r0, fp
 8005aac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    OldPageAddress = PAGE0_BASE_ADDRESS;
 8005ab0:	4689      	mov	r9, r1
 8005ab2:	e7f1      	b.n	8005a98 <EE_WriteVariable+0x2c>
    return NO_VALID_PAGE;       /* No valid Page */
 8005ab4:	f04f 0bab 	mov.w	fp, #171	; 0xab
 8005ab8:	e7e1      	b.n	8005a7e <EE_WriteVariable+0x12>
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8005aba:	4641      	mov	r1, r8
 8005abc:	4628      	mov	r0, r5
 8005abe:	47a0      	blx	r4
  if (EepromStatus != FLASH_COMPLETE)
 8005ac0:	2804      	cmp	r0, #4
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8005ac2:	4683      	mov	fp, r0
  if (EepromStatus != FLASH_COMPLETE)
 8005ac4:	d1db      	bne.n	8005a7e <EE_WriteVariable+0x12>
 8005ac6:	f8df a060 	ldr.w	sl, [pc, #96]	; 8005b28 <EE_WriteVariable+0xbc>
 8005aca:	f10a 0828 	add.w	r8, sl, #40	; 0x28
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8005ace:	f83a 0b02 	ldrh.w	r0, [sl], #2
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8005ad2:	4912      	ldr	r1, [pc, #72]	; (8005b1c <EE_WriteVariable+0xb0>)
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8005ad4:	4285      	cmp	r5, r0
 8005ad6:	d00a      	beq.n	8005aee <EE_WriteVariable+0x82>
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8005ad8:	4b11      	ldr	r3, [pc, #68]	; (8005b20 <EE_WriteVariable+0xb4>)
 8005ada:	4798      	blx	r3
      if (ReadStatus != 0x1)
 8005adc:	2801      	cmp	r0, #1
 8005ade:	d006      	beq.n	8005aee <EE_WriteVariable+0x82>
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8005ae0:	4b0e      	ldr	r3, [pc, #56]	; (8005b1c <EE_WriteVariable+0xb0>)
 8005ae2:	f83a 0c02 	ldrh.w	r0, [sl, #-2]
 8005ae6:	8819      	ldrh	r1, [r3, #0]
 8005ae8:	47a0      	blx	r4
        if (EepromStatus != FLASH_COMPLETE)
 8005aea:	2804      	cmp	r0, #4
 8005aec:	d10c      	bne.n	8005b08 <EE_WriteVariable+0x9c>
  for (VarIdx = 0; VarIdx < NumbOfVar; VarIdx++)
 8005aee:	45c2      	cmp	sl, r8
 8005af0:	d1ed      	bne.n	8005ace <EE_WriteVariable+0x62>
  FlashStatus = FLASH_ErasePage(OldPageAddress);
 8005af2:	4648      	mov	r0, r9
 8005af4:	4a0b      	ldr	r2, [pc, #44]	; (8005b24 <EE_WriteVariable+0xb8>)
 8005af6:	4790      	blx	r2
  if (FlashStatus != FLASH_COMPLETE)
 8005af8:	2804      	cmp	r0, #4
 8005afa:	d1d4      	bne.n	8005aa6 <EE_WriteVariable+0x3a>
  FlashStatus = FLASH_ProgramHalfWord(NewPageAddress, VALID_PAGE);
 8005afc:	4630      	mov	r0, r6
 8005afe:	2100      	movs	r1, #0
 8005b00:	47b8      	blx	r7
  if (FlashStatus != FLASH_COMPLETE)
 8005b02:	2804      	cmp	r0, #4
 8005b04:	d1cf      	bne.n	8005aa6 <EE_WriteVariable+0x3a>
 8005b06:	e7ba      	b.n	8005a7e <EE_WriteVariable+0x12>
        if (EepromStatus != FLASH_COMPLETE)
 8005b08:	4683      	mov	fp, r0
 8005b0a:	e7b8      	b.n	8005a7e <EE_WriteVariable+0x12>
 8005b0c:	08005801 	.word	0x08005801
 8005b10:	0800c000 	.word	0x0800c000
 8005b14:	0800c400 	.word	0x0800c400
 8005b18:	080062e5 	.word	0x080062e5
 8005b1c:	200026f0 	.word	0x200026f0
 8005b20:	080058b1 	.word	0x080058b1
 8005b24:	0800627d 	.word	0x0800627d
 8005b28:	20000144 	.word	0x20000144

08005b2c <twelveToSixten>:

void twelveToSixten(U16 *raw_data, S16 *converted_data, U16 num_of_elements)
{
    S16 converted_word;

    for(U16 i = 0; i < num_of_elements; i++)
 8005b2c:	b18a      	cbz	r2, 8005b52 <twelveToSixten+0x26>
 8005b2e:	3a01      	subs	r2, #1
 8005b30:	b292      	uxth	r2, r2
 8005b32:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8005b36:	3902      	subs	r1, #2
 8005b38:	3802      	subs	r0, #2
    {
        //Shift 12 bit word by 4 bit to the left, then divide by 4 to set the MSB if value is negative. 
        converted_word = (S16) (*(raw_data+i) << 4 )/(1<<4);
 8005b3a:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8005b3e:	3102      	adds	r1, #2
 8005b40:	011b      	lsls	r3, r3, #4
 8005b42:	b21b      	sxth	r3, r3
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	bfb8      	it	lt
 8005b48:	330f      	addlt	r3, #15
 8005b4a:	111b      	asrs	r3, r3, #4
    for(U16 i = 0; i < num_of_elements; i++)
 8005b4c:	4290      	cmp	r0, r2
       *(converted_data+i) = converted_word;
 8005b4e:	800b      	strh	r3, [r1, #0]
    for(U16 i = 0; i < num_of_elements; i++)
 8005b50:	d1f3      	bne.n	8005b3a <twelveToSixten+0xe>
    }

}
 8005b52:	4770      	bx	lr

08005b54 <uputDec>:

//This code tekes in a 32bit Signed Integer and output, the value to the UART as a string of char.

void uputDec(S32 a,USART_TypeDef* USARTx)
{
    volatile S8 index = 0;
 8005b54:	2300      	movs	r3, #0
{
 8005b56:	b570      	push	{r4, r5, r6, lr}
    volatile U8 isNegative = 0;

   if (a & 0xF0000000)
 8005b58:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
{
 8005b5c:	b082      	sub	sp, #8
    volatile S8 index = 0;
 8005b5e:	f88d 3006 	strb.w	r3, [sp, #6]
{
 8005b62:	460c      	mov	r4, r1
    volatile U8 isNegative = 0;
 8005b64:	f88d 3007 	strb.w	r3, [sp, #7]
   if (a & 0xF0000000)
 8005b68:	d003      	beq.n	8005b72 <uputDec+0x1e>
    {
        isNegative = 1;
 8005b6a:	2301      	movs	r3, #1
	    a =((~(a))+1);
 8005b6c:	4240      	negs	r0, r0
        isNegative = 1;
 8005b6e:	f88d 3007 	strb.w	r3, [sp, #7]
    }

    while(a >= 10)
 8005b72:	2809      	cmp	r0, #9
 8005b74:	4d21      	ldr	r5, [pc, #132]	; (8005bfc <uputDec+0xa8>)
 8005b76:	dd15      	ble.n	8005ba4 <uputDec+0x50>
    {
        *(int_buffer + index) = ((a%10) + ascii_num_offset );
 8005b78:	4e21      	ldr	r6, [pc, #132]	; (8005c00 <uputDec+0xac>)
 8005b7a:	fba6 2300 	umull	r2, r3, r6, r0
 8005b7e:	08db      	lsrs	r3, r3, #3
 8005b80:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8005b84:	eba0 0242 	sub.w	r2, r0, r2, lsl #1
         index++;
         a = a/10;
 8005b88:	4618      	mov	r0, r3
        *(int_buffer + index) = ((a%10) + ascii_num_offset );
 8005b8a:	f89d 1006 	ldrb.w	r1, [sp, #6]
         index++;
 8005b8e:	f89d 3006 	ldrb.w	r3, [sp, #6]
        *(int_buffer + index) = ((a%10) + ascii_num_offset );
 8005b92:	3230      	adds	r2, #48	; 0x30
         index++;
 8005b94:	3301      	adds	r3, #1
        *(int_buffer + index) = ((a%10) + ascii_num_offset );
 8005b96:	b249      	sxtb	r1, r1
         index++;
 8005b98:	b25b      	sxtb	r3, r3
    while(a >= 10)
 8005b9a:	2809      	cmp	r0, #9
        *(int_buffer + index) = ((a%10) + ascii_num_offset );
 8005b9c:	546a      	strb	r2, [r5, r1]
         index++;
 8005b9e:	f88d 3006 	strb.w	r3, [sp, #6]
    while(a >= 10)
 8005ba2:	dcea      	bgt.n	8005b7a <uputDec+0x26>
    }
    
    *(int_buffer + index) = ((a) + ascii_num_offset );
 8005ba4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    
    if(isNegative)
 8005ba8:	f89d 2007 	ldrb.w	r2, [sp, #7]
    *(int_buffer + index) = ((a) + ascii_num_offset );
 8005bac:	3030      	adds	r0, #48	; 0x30
 8005bae:	b25b      	sxtb	r3, r3
 8005bb0:	54e8      	strb	r0, [r5, r3]
    if(isNegative)
 8005bb2:	b152      	cbz	r2, 8005bca <uputDec+0x76>
    {
        index++;
        *(int_buffer + index) = ascii_minus;
 8005bb4:	222d      	movs	r2, #45	; 0x2d
        index++;
 8005bb6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005bba:	3301      	adds	r3, #1
 8005bbc:	b25b      	sxtb	r3, r3
 8005bbe:	f88d 3006 	strb.w	r3, [sp, #6]
        *(int_buffer + index) = ascii_minus;
 8005bc2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005bc6:	b25b      	sxtb	r3, r3
 8005bc8:	54ea      	strb	r2, [r5, r3]
    }    
    for(index; index >= 0; index--) 
 8005bca:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005bce:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005bd2:	061a      	lsls	r2, r3, #24
 8005bd4:	d410      	bmi.n	8005bf8 <uputDec+0xa4>
 8005bd6:	4e0b      	ldr	r6, [pc, #44]	; (8005c04 <uputDec+0xb0>)
    {
        UartPutc(int_buffer[index],USARTx);
 8005bd8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005bdc:	4621      	mov	r1, r4
 8005bde:	b25b      	sxtb	r3, r3
 8005be0:	5ce8      	ldrb	r0, [r5, r3]
 8005be2:	47b0      	blx	r6
    for(index; index >= 0; index--) 
 8005be4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005be8:	3b01      	subs	r3, #1
 8005bea:	b25b      	sxtb	r3, r3
 8005bec:	f88d 3006 	strb.w	r3, [sp, #6]
 8005bf0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005bf4:	061b      	lsls	r3, r3, #24
 8005bf6:	d5ef      	bpl.n	8005bd8 <uputDec+0x84>
    }
    

}
 8005bf8:	b002      	add	sp, #8
 8005bfa:	bd70      	pop	{r4, r5, r6, pc}
 8005bfc:	20000188 	.word	0x20000188
 8005c00:	cccccccd 	.word	0xcccccccd
 8005c04:	08004281 	.word	0x08004281

08005c08 <UsrCode>:

volatile U32  currentTickVal,previousTickVal,deltaTickValue;

void UsrCode()
{
    if(BitTest(GetDsoStatus(),DSO_CaptureDone))
 8005c08:	4b16      	ldr	r3, [pc, #88]	; (8005c64 <UsrCode+0x5c>)
{
 8005c0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(BitTest(GetDsoStatus(),DSO_CaptureDone))
 8005c0e:	4798      	blx	r3
 8005c10:	07c3      	lsls	r3, r0, #31
 8005c12:	d401      	bmi.n	8005c18 <UsrCode+0x10>

    //End Of Records
    uputs((U8 *)"****************", USART1);
    uputs((U8 *) "\n\r", USART1);         
*/
}
 8005c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        twelveToSixten(&SampleBuf[0], &conv_record_buffer[0], GetRecLen());
 8005c18:	4a13      	ldr	r2, [pc, #76]	; (8005c68 <UsrCode+0x60>)
 8005c1a:	4b14      	ldr	r3, [pc, #80]	; (8005c6c <UsrCode+0x64>)
 8005c1c:	6814      	ldr	r4, [r2, #0]
 8005c1e:	4798      	blx	r3
 8005c20:	4913      	ldr	r1, [pc, #76]	; (8005c70 <UsrCode+0x68>)
 8005c22:	4602      	mov	r2, r0
 8005c24:	4b13      	ldr	r3, [pc, #76]	; (8005c74 <UsrCode+0x6c>)
 8005c26:	4620      	mov	r0, r4
 8005c28:	4798      	blx	r3
 8005c2a:	2500      	movs	r5, #0
 8005c2c:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8005c84 <UsrCode+0x7c>
 8005c30:	4f11      	ldr	r7, [pc, #68]	; (8005c78 <UsrCode+0x70>)
 8005c32:	4e12      	ldr	r6, [pc, #72]	; (8005c7c <UsrCode+0x74>)
         uputDec(i, USART1);   
 8005c34:	4c12      	ldr	r4, [pc, #72]	; (8005c80 <UsrCode+0x78>)
         uputs((U8 *) ":", USART1);
 8005c36:	f8df a050 	ldr.w	sl, [pc, #80]	; 8005c88 <UsrCode+0x80>
         uputs((U8 *) "\n\r", USART1);
 8005c3a:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8005c8c <UsrCode+0x84>
         uputDec(i, USART1);   
 8005c3e:	4628      	mov	r0, r5
 8005c40:	4621      	mov	r1, r4
 8005c42:	47b8      	blx	r7
         uputs((U8 *) ":", USART1);
 8005c44:	4621      	mov	r1, r4
 8005c46:	4650      	mov	r0, sl
 8005c48:	47b0      	blx	r6
         uputDec(*(conv_record_buffer+i), USART1);   
 8005c4a:	4621      	mov	r1, r4
 8005c4c:	f938 0f02 	ldrsh.w	r0, [r8, #2]!
 8005c50:	47b8      	blx	r7
 8005c52:	3501      	adds	r5, #1
         uputs((U8 *) "\n\r", USART1);
 8005c54:	4621      	mov	r1, r4
 8005c56:	4648      	mov	r0, r9
 8005c58:	47b0      	blx	r6
        for(U16 i = 0; i< RecLenMax; i++)
 8005c5a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8005c5e:	d1ee      	bne.n	8005c3e <UsrCode+0x36>
}
 8005c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c64:	080021a5 	.word	0x080021a5
 8005c68:	200026e8 	.word	0x200026e8
 8005c6c:	0800213d 	.word	0x0800213d
 8005c70:	200001c8 	.word	0x200001c8
 8005c74:	08005b2d 	.word	0x08005b2d
 8005c78:	08005b55 	.word	0x08005b55
 8005c7c:	080042a9 	.word	0x080042a9
 8005c80:	40013800 	.word	0x40013800
 8005c84:	200001c6 	.word	0x200001c6
 8005c88:	08007fe4 	.word	0x08007fe4
 8005c8c:	08006f9c 	.word	0x08006f9c

08005c90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005c90:	b430      	push	{r4, r5}
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8005c92:	2400      	movs	r4, #0
  RCC->CIR = 0x009F0000;
 8005c94:	f44f 051f 	mov.w	r5, #10420224	; 0x9f0000
  RCC->CR |= (uint32_t)0x00000001;
 8005c98:	4b39      	ldr	r3, [pc, #228]	; (8005d80 <SystemInit+0xf0>)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8005c9a:	493a      	ldr	r1, [pc, #232]	; (8005d84 <SystemInit+0xf4>)
  RCC->CR |= (uint32_t)0x00000001;
 8005c9c:	6818      	ldr	r0, [r3, #0]
{
 8005c9e:	b082      	sub	sp, #8
  RCC->CR |= (uint32_t)0x00000001;
 8005ca0:	f040 0001 	orr.w	r0, r0, #1
 8005ca4:	6018      	str	r0, [r3, #0]
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8005ca6:	6858      	ldr	r0, [r3, #4]
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8005ca8:	461a      	mov	r2, r3
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8005caa:	4001      	ands	r1, r0
 8005cac:	6059      	str	r1, [r3, #4]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005cae:	6819      	ldr	r1, [r3, #0]
 8005cb0:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 8005cb4:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8005cb8:	6019      	str	r1, [r3, #0]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005cba:	6819      	ldr	r1, [r3, #0]
 8005cbc:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8005cc0:	6019      	str	r1, [r3, #0]
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8005cc2:	6859      	ldr	r1, [r3, #4]
 8005cc4:	f421 01fe 	bic.w	r1, r1, #8323072	; 0x7f0000
 8005cc8:	6059      	str	r1, [r3, #4]
  RCC->CIR = 0x009F0000;
 8005cca:	609d      	str	r5, [r3, #8]
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8005ccc:	9400      	str	r4, [sp, #0]
 8005cce:	9401      	str	r4, [sp, #4]
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8005cd0:	6819      	ldr	r1, [r3, #0]
 8005cd2:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8005cd6:	6019      	str	r1, [r3, #0]
 8005cd8:	e003      	b.n	8005ce2 <SystemInit+0x52>
    StartUpCounter++;  
  } while((HSEStatus == 0) && (StartUpCounter != HSEStartUp_TimeOut));
 8005cda:	9b00      	ldr	r3, [sp, #0]
 8005cdc:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005ce0:	d009      	beq.n	8005cf6 <SystemInit+0x66>
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8005ce2:	6813      	ldr	r3, [r2, #0]
 8005ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ce8:	9301      	str	r3, [sp, #4]
    StartUpCounter++;  
 8005cea:	9b00      	ldr	r3, [sp, #0]
 8005cec:	3301      	adds	r3, #1
 8005cee:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSEStartUp_TimeOut));
 8005cf0:	9b01      	ldr	r3, [sp, #4]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d0f1      	beq.n	8005cda <SystemInit+0x4a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8005cf6:	4b22      	ldr	r3, [pc, #136]	; (8005d80 <SystemInit+0xf0>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 8005cfe:	bf18      	it	ne
 8005d00:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8005d02:	9301      	str	r3, [sp, #4]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8005d04:	9b01      	ldr	r3, [sp, #4]
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d002      	beq.n	8005d10 <SystemInit+0x80>
}
 8005d0a:	b002      	add	sp, #8
 8005d0c:	bc30      	pop	{r4, r5}
 8005d0e:	4770      	bx	lr
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8005d10:	491d      	ldr	r1, [pc, #116]	; (8005d88 <SystemInit+0xf8>)
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8005d12:	4b1b      	ldr	r3, [pc, #108]	; (8005d80 <SystemInit+0xf0>)
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8005d14:	6808      	ldr	r0, [r1, #0]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8005d16:	461a      	mov	r2, r3
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8005d18:	f040 0010 	orr.w	r0, r0, #16
 8005d1c:	6008      	str	r0, [r1, #0]
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8005d1e:	6808      	ldr	r0, [r1, #0]
 8005d20:	f020 0003 	bic.w	r0, r0, #3
 8005d24:	6008      	str	r0, [r1, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8005d26:	6808      	ldr	r0, [r1, #0]
 8005d28:	f040 0002 	orr.w	r0, r0, #2
 8005d2c:	6008      	str	r0, [r1, #0]
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8005d2e:	6859      	ldr	r1, [r3, #4]
 8005d30:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8005d32:	6859      	ldr	r1, [r3, #4]
 8005d34:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8005d36:	6859      	ldr	r1, [r3, #4]
 8005d38:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8005d3c:	6059      	str	r1, [r3, #4]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8005d3e:	6859      	ldr	r1, [r3, #4]
 8005d40:	f421 117c 	bic.w	r1, r1, #4128768	; 0x3f0000
 8005d44:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8005d46:	6859      	ldr	r1, [r3, #4]
 8005d48:	f441 11e8 	orr.w	r1, r1, #1900544	; 0x1d0000
 8005d4c:	6059      	str	r1, [r3, #4]
    RCC->CR |= RCC_CR_PLLON;
 8005d4e:	6819      	ldr	r1, [r3, #0]
 8005d50:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8005d54:	6019      	str	r1, [r3, #0]
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8005d56:	6813      	ldr	r3, [r2, #0]
 8005d58:	019b      	lsls	r3, r3, #6
 8005d5a:	d5fc      	bpl.n	8005d56 <SystemInit+0xc6>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8005d5c:	6853      	ldr	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8005d5e:	4908      	ldr	r1, [pc, #32]	; (8005d80 <SystemInit+0xf0>)
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8005d60:	f023 0303 	bic.w	r3, r3, #3
 8005d64:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8005d66:	6853      	ldr	r3, [r2, #4]
 8005d68:	f043 0302 	orr.w	r3, r3, #2
 8005d6c:	6053      	str	r3, [r2, #4]
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8005d6e:	684b      	ldr	r3, [r1, #4]
 8005d70:	f003 030c 	and.w	r3, r3, #12
 8005d74:	2b08      	cmp	r3, #8
 8005d76:	d1fa      	bne.n	8005d6e <SystemInit+0xde>
}
 8005d78:	b002      	add	sp, #8
 8005d7a:	bc30      	pop	{r4, r5}
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop
 8005d80:	40021000 	.word	0x40021000
 8005d84:	f8ff0000 	.word	0xf8ff0000
 8005d88:	40022000 	.word	0x40022000

08005d8c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *   the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8005d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
 8005d8e:	78c3      	ldrb	r3, [r0, #3]
{
 8005d90:	4604      	mov	r4, r0
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d903      	bls.n	8005d9e <NVIC_Init+0x12>
 8005d96:	2174      	movs	r1, #116	; 0x74
 8005d98:	481b      	ldr	r0, [pc, #108]	; (8005e08 <NVIC_Init+0x7c>)
 8005d9a:	4b1c      	ldr	r3, [pc, #112]	; (8005e0c <NVIC_Init+0x80>)
 8005d9c:	4798      	blx	r3
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
 8005d9e:	7863      	ldrb	r3, [r4, #1]
 8005da0:	2b0f      	cmp	r3, #15
 8005da2:	d82c      	bhi.n	8005dfe <NVIC_Init+0x72>
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
 8005da4:	78a3      	ldrb	r3, [r4, #2]
 8005da6:	2b0f      	cmp	r3, #15
 8005da8:	d824      	bhi.n	8005df4 <NVIC_Init+0x68>
 8005daa:	2001      	movs	r0, #1
 8005dac:	7821      	ldrb	r1, [r4, #0]
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8005dae:	78e3      	ldrb	r3, [r4, #3]
 8005db0:	f001 021f 	and.w	r2, r1, #31
 8005db4:	4090      	lsls	r0, r2
 8005db6:	094e      	lsrs	r6, r1, #5
 8005db8:	b923      	cbnz	r3, 8005dc4 <NVIC_Init+0x38>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005dba:	4b15      	ldr	r3, [pc, #84]	; (8005e10 <NVIC_Init+0x84>)
 8005dbc:	3620      	adds	r6, #32
 8005dbe:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8005dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8005dc4:	4b13      	ldr	r3, [pc, #76]	; (8005e14 <NVIC_Init+0x88>)
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8005dc6:	78a2      	ldrb	r2, [r4, #2]
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8005dc8:	68dd      	ldr	r5, [r3, #12]
    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8005dca:	7867      	ldrb	r7, [r4, #1]
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8005dcc:	43ec      	mvns	r4, r5
    tmpsub = tmpsub >> tmppriority;
 8005dce:	230f      	movs	r3, #15
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8005dd0:	f3c4 2402 	ubfx	r4, r4, #8, #3
    tmppre = (0x4 - tmppriority);
 8005dd4:	f1c4 0504 	rsb	r5, r4, #4
    tmpsub = tmpsub >> tmppriority;
 8005dd8:	40e3      	lsrs	r3, r4
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8005dda:	4013      	ands	r3, r2
    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8005ddc:	fa07 f505 	lsl.w	r5, r7, r5
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8005de0:	4a0b      	ldr	r2, [pc, #44]	; (8005e10 <NVIC_Init+0x84>)
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8005de2:	432b      	orrs	r3, r5
    tmppriority = tmppriority << 0x04;
 8005de4:	011b      	lsls	r3, r3, #4
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	4411      	add	r1, r2
 8005dea:	f881 3300 	strb.w	r3, [r1, #768]	; 0x300
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005dee:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
}
 8005df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
 8005df4:	2176      	movs	r1, #118	; 0x76
 8005df6:	4b05      	ldr	r3, [pc, #20]	; (8005e0c <NVIC_Init+0x80>)
 8005df8:	4803      	ldr	r0, [pc, #12]	; (8005e08 <NVIC_Init+0x7c>)
 8005dfa:	4798      	blx	r3
 8005dfc:	e7d5      	b.n	8005daa <NVIC_Init+0x1e>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
 8005dfe:	2175      	movs	r1, #117	; 0x75
 8005e00:	4b02      	ldr	r3, [pc, #8]	; (8005e0c <NVIC_Init+0x80>)
 8005e02:	4801      	ldr	r0, [pc, #4]	; (8005e08 <NVIC_Init+0x7c>)
 8005e04:	4798      	blx	r3
 8005e06:	e7cd      	b.n	8005da4 <NVIC_Init+0x18>
 8005e08:	08007fe8 	.word	0x08007fe8
 8005e0c:	08004bd1 	.word	0x08004bd1
 8005e10:	e000e100 	.word	0xe000e100
 8005e14:	e000ed00 	.word	0xe000ed00

08005e18 <NVIC_SetVectorTable>:
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
 8005e18:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
{ 
 8005e1c:	b538      	push	{r3, r4, r5, lr}
 8005e1e:	4605      	mov	r5, r0
 8005e20:	460c      	mov	r4, r1
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
 8005e22:	d002      	beq.n	8005e2a <NVIC_SetVectorTable+0x12>
 8005e24:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 8005e28:	d10e      	bne.n	8005e48 <NVIC_SetVectorTable+0x30>
  assert_param(IS_NVIC_OFFSET(Offset));  
 8005e2a:	4b0a      	ldr	r3, [pc, #40]	; (8005e54 <NVIC_SetVectorTable+0x3c>)
 8005e2c:	429c      	cmp	r4, r3
 8005e2e:	d903      	bls.n	8005e38 <NVIC_SetVectorTable+0x20>
 8005e30:	219e      	movs	r1, #158	; 0x9e
 8005e32:	4809      	ldr	r0, [pc, #36]	; (8005e58 <NVIC_SetVectorTable+0x40>)
 8005e34:	4b09      	ldr	r3, [pc, #36]	; (8005e5c <NVIC_SetVectorTable+0x44>)
 8005e36:	4798      	blx	r3
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8005e38:	f024 4160 	bic.w	r1, r4, #3758096384	; 0xe0000000
 8005e3c:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8005e40:	4b07      	ldr	r3, [pc, #28]	; (8005e60 <NVIC_SetVectorTable+0x48>)
 8005e42:	4329      	orrs	r1, r5
 8005e44:	6099      	str	r1, [r3, #8]
}
 8005e46:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
 8005e48:	219d      	movs	r1, #157	; 0x9d
 8005e4a:	4b04      	ldr	r3, [pc, #16]	; (8005e5c <NVIC_SetVectorTable+0x44>)
 8005e4c:	4802      	ldr	r0, [pc, #8]	; (8005e58 <NVIC_SetVectorTable+0x40>)
 8005e4e:	4798      	blx	r3
 8005e50:	e7eb      	b.n	8005e2a <NVIC_SetVectorTable+0x12>
 8005e52:	bf00      	nop
 8005e54:	000ffffe 	.word	0x000ffffe
 8005e58:	08007fe8 	.word	0x08007fe8
 8005e5c:	08004bd1 	.word	0x08004bd1
 8005e60:	e000ed00 	.word	0xe000ed00

08005e64 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *   that contains the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8005e64:	b570      	push	{r4, r5, r6, lr}
  uint32_t integerdivider = 0x00;
  uint32_t fractionaldivider = 0x00;
  uint32_t usartxbase = 0;
  RCC_ClocksTypeDef RCC_ClocksStatus;
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8005e66:	4b60      	ldr	r3, [pc, #384]	; (8005fe8 <USART_Init+0x184>)
{
 8005e68:	b086      	sub	sp, #24
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8005e6a:	4298      	cmp	r0, r3
{
 8005e6c:	4604      	mov	r4, r0
 8005e6e:	460d      	mov	r5, r1
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8005e70:	d013      	beq.n	8005e9a <USART_Init+0x36>
 8005e72:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 8005e76:	4298      	cmp	r0, r3
 8005e78:	d00f      	beq.n	8005e9a <USART_Init+0x36>
 8005e7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e7e:	4298      	cmp	r0, r3
 8005e80:	d00b      	beq.n	8005e9a <USART_Init+0x36>
 8005e82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e86:	4298      	cmp	r0, r3
 8005e88:	d007      	beq.n	8005e9a <USART_Init+0x36>
 8005e8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e8e:	4298      	cmp	r0, r3
 8005e90:	d003      	beq.n	8005e9a <USART_Init+0x36>
 8005e92:	21b5      	movs	r1, #181	; 0xb5
 8005e94:	4855      	ldr	r0, [pc, #340]	; (8005fec <USART_Init+0x188>)
 8005e96:	4b56      	ldr	r3, [pc, #344]	; (8005ff0 <USART_Init+0x18c>)
 8005e98:	4798      	blx	r3
  assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
 8005e9a:	682b      	ldr	r3, [r5, #0]
 8005e9c:	4a55      	ldr	r2, [pc, #340]	; (8005ff4 <USART_Init+0x190>)
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	f200 808a 	bhi.w	8005fba <USART_Init+0x156>
  assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
 8005ea6:	88ab      	ldrh	r3, [r5, #4]
 8005ea8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005eac:	b11b      	cbz	r3, 8005eb6 <USART_Init+0x52>
 8005eae:	21b7      	movs	r1, #183	; 0xb7
 8005eb0:	484e      	ldr	r0, [pc, #312]	; (8005fec <USART_Init+0x188>)
 8005eb2:	4b4f      	ldr	r3, [pc, #316]	; (8005ff0 <USART_Init+0x18c>)
 8005eb4:	4798      	blx	r3
  assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
 8005eb6:	88eb      	ldrh	r3, [r5, #6]
 8005eb8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005ebc:	b11b      	cbz	r3, 8005ec6 <USART_Init+0x62>
 8005ebe:	21b8      	movs	r1, #184	; 0xb8
 8005ec0:	484a      	ldr	r0, [pc, #296]	; (8005fec <USART_Init+0x188>)
 8005ec2:	4b4b      	ldr	r3, [pc, #300]	; (8005ff0 <USART_Init+0x18c>)
 8005ec4:	4798      	blx	r3
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
 8005ec6:	892b      	ldrh	r3, [r5, #8]
 8005ec8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005ecc:	b11a      	cbz	r2, 8005ed6 <USART_Init+0x72>
 8005ece:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005ed2:	f040 8083 	bne.w	8005fdc <USART_Init+0x178>
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
 8005ed6:	896b      	ldrh	r3, [r5, #10]
 8005ed8:	f023 020c 	bic.w	r2, r3, #12
 8005edc:	2a00      	cmp	r2, #0
 8005ede:	d165      	bne.n	8005fac <USART_Init+0x148>
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d063      	beq.n	8005fac <USART_Init+0x148>
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
 8005ee4:	89ab      	ldrh	r3, [r5, #12]
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	b1eb      	cbz	r3, 8005f26 <USART_Init+0xc2>
 8005eea:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005eee:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8005ef2:	d009      	beq.n	8005f08 <USART_Init+0xa4>
 8005ef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ef8:	d006      	beq.n	8005f08 <USART_Init+0xa4>
 8005efa:	4b3d      	ldr	r3, [pc, #244]	; (8005ff0 <USART_Init+0x18c>)
 8005efc:	21bb      	movs	r1, #187	; 0xbb
 8005efe:	483b      	ldr	r0, [pc, #236]	; (8005fec <USART_Init+0x188>)
 8005f00:	4798      	blx	r3
  /* The hardware flow control is available only for USART1, USART2 and USART3 */
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
 8005f02:	89ab      	ldrh	r3, [r5, #12]
 8005f04:	461a      	mov	r2, r3
 8005f06:	b173      	cbz	r3, 8005f26 <USART_Init+0xc2>
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
 8005f08:	4a37      	ldr	r2, [pc, #220]	; (8005fe8 <USART_Init+0x184>)
 8005f0a:	4294      	cmp	r4, r2
 8005f0c:	d053      	beq.n	8005fb6 <USART_Init+0x152>
 8005f0e:	4a3a      	ldr	r2, [pc, #232]	; (8005ff8 <USART_Init+0x194>)
 8005f10:	4294      	cmp	r4, r2
 8005f12:	d050      	beq.n	8005fb6 <USART_Init+0x152>
 8005f14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f18:	4294      	cmp	r4, r2
 8005f1a:	d04c      	beq.n	8005fb6 <USART_Init+0x152>
 8005f1c:	21bf      	movs	r1, #191	; 0xbf
 8005f1e:	4833      	ldr	r0, [pc, #204]	; (8005fec <USART_Init+0x188>)
 8005f20:	4b33      	ldr	r3, [pc, #204]	; (8005ff0 <USART_Init+0x18c>)
 8005f22:	4798      	blx	r3
 8005f24:	89aa      	ldrh	r2, [r5, #12]
  }

  usartxbase = (uint32_t)USARTx;

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8005f26:	8a23      	ldrh	r3, [r4, #16]
 8005f28:	88e9      	ldrh	r1, [r5, #6]
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005f30:	430b      	orrs	r3, r1
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8005f32:	8223      	strh	r3, [r4, #16]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8005f34:	8928      	ldrh	r0, [r5, #8]
 8005f36:	88ab      	ldrh	r3, [r5, #4]
  tmpreg = USARTx->CR1;
 8005f38:	89a6      	ldrh	r6, [r4, #12]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8005f3a:	4303      	orrs	r3, r0
 8005f3c:	492f      	ldr	r1, [pc, #188]	; (8005ffc <USART_Init+0x198>)
 8005f3e:	8968      	ldrh	r0, [r5, #10]
 8005f40:	4031      	ands	r1, r6
 8005f42:	4303      	orrs	r3, r0
 8005f44:	430b      	orrs	r3, r1
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8005f46:	81a3      	strh	r3, [r4, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8005f48:	8aa3      	ldrh	r3, [r4, #20]
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8005f4a:	a801      	add	r0, sp, #4
  tmpreg = USARTx->CR3;
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f52:	4313      	orrs	r3, r2
  USARTx->CR3 = (uint16_t)tmpreg;
 8005f54:	82a3      	strh	r3, [r4, #20]
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8005f56:	4b2a      	ldr	r3, [pc, #168]	; (8006000 <USART_Init+0x19c>)
 8005f58:	4798      	blx	r3
  if (usartxbase == USART1_BASE)
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8005f5a:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
  if (usartxbase == USART1_BASE)
 8005f5e:	4822      	ldr	r0, [pc, #136]	; (8005fe8 <USART_Init+0x184>)
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8005f60:	89a1      	ldrh	r1, [r4, #12]
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8005f62:	4284      	cmp	r4, r0
 8005f64:	bf08      	it	eq
 8005f66:	4613      	moveq	r3, r2
 8005f68:	682a      	ldr	r2, [r5, #0]
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8005f6a:	0409      	lsls	r1, r1, #16
 8005f6c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8005f70:	bf4c      	ite	mi
 8005f72:	0052      	lslmi	r2, r2, #1
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8005f74:	0092      	lslpl	r2, r2, #2
 8005f76:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005f7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f7e:	2264      	movs	r2, #100	; 0x64
  }
  tmpreg = (integerdivider / 100) << 4;
 8005f80:	4820      	ldr	r0, [pc, #128]	; (8006004 <USART_Init+0x1a0>)

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8005f82:	89a5      	ldrh	r5, [r4, #12]
  tmpreg = (integerdivider / 100) << 4;
 8005f84:	fba0 6103 	umull	r6, r1, r0, r3
 8005f88:	0949      	lsrs	r1, r1, #5
 8005f8a:	fb02 3311 	mls	r3, r2, r1, r3
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8005f8e:	042a      	lsls	r2, r5, #16
  tmpreg = (integerdivider / 100) << 4;
 8005f90:	ea4f 1101 	mov.w	r1, r1, lsl #4
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8005f94:	d416      	bmi.n	8005fc4 <USART_Init+0x160>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8005f96:	011b      	lsls	r3, r3, #4
 8005f98:	3332      	adds	r3, #50	; 0x32
 8005f9a:	fba0 2303 	umull	r2, r3, r0, r3
 8005f9e:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8005fa2:	430b      	orrs	r3, r1
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	8123      	strh	r3, [r4, #8]
}
 8005fa8:	b006      	add	sp, #24
 8005faa:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
 8005fac:	21ba      	movs	r1, #186	; 0xba
 8005fae:	4b10      	ldr	r3, [pc, #64]	; (8005ff0 <USART_Init+0x18c>)
 8005fb0:	480e      	ldr	r0, [pc, #56]	; (8005fec <USART_Init+0x188>)
 8005fb2:	4798      	blx	r3
 8005fb4:	e796      	b.n	8005ee4 <USART_Init+0x80>
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	e7b5      	b.n	8005f26 <USART_Init+0xc2>
  assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
 8005fba:	21b6      	movs	r1, #182	; 0xb6
 8005fbc:	4b0c      	ldr	r3, [pc, #48]	; (8005ff0 <USART_Init+0x18c>)
 8005fbe:	480b      	ldr	r0, [pc, #44]	; (8005fec <USART_Init+0x188>)
 8005fc0:	4798      	blx	r3
 8005fc2:	e770      	b.n	8005ea6 <USART_Init+0x42>
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8005fc4:	00da      	lsls	r2, r3, #3
 8005fc6:	3232      	adds	r2, #50	; 0x32
 8005fc8:	fba0 3202 	umull	r3, r2, r0, r2
 8005fcc:	f3c2 1242 	ubfx	r2, r2, #5, #3
 8005fd0:	ea42 0301 	orr.w	r3, r2, r1
  USARTx->BRR = (uint16_t)tmpreg;
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	8123      	strh	r3, [r4, #8]
}
 8005fd8:	b006      	add	sp, #24
 8005fda:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
 8005fdc:	21b9      	movs	r1, #185	; 0xb9
 8005fde:	4b04      	ldr	r3, [pc, #16]	; (8005ff0 <USART_Init+0x18c>)
 8005fe0:	4802      	ldr	r0, [pc, #8]	; (8005fec <USART_Init+0x188>)
 8005fe2:	4798      	blx	r3
 8005fe4:	e777      	b.n	8005ed6 <USART_Init+0x72>
 8005fe6:	bf00      	nop
 8005fe8:	40013800 	.word	0x40013800
 8005fec:	08008018 	.word	0x08008018
 8005ff0:	08004bd1 	.word	0x08004bd1
 8005ff4:	0044aa1f 	.word	0x0044aa1f
 8005ff8:	40004400 	.word	0x40004400
 8005ffc:	ffffe9f3 	.word	0xffffe9f3
 8006000:	08006189 	.word	0x08006189
 8006004:	51eb851f 	.word	0x51eb851f

08006008 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8006008:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 800600a:	4b17      	ldr	r3, [pc, #92]	; (8006068 <USART_Cmd+0x60>)
{
 800600c:	4604      	mov	r4, r0
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 800600e:	4298      	cmp	r0, r3
{
 8006010:	460d      	mov	r5, r1
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8006012:	d014      	beq.n	800603e <USART_Cmd+0x36>
 8006014:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 8006018:	4298      	cmp	r0, r3
 800601a:	d010      	beq.n	800603e <USART_Cmd+0x36>
 800601c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006020:	4298      	cmp	r0, r3
 8006022:	d00c      	beq.n	800603e <USART_Cmd+0x36>
 8006024:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006028:	4298      	cmp	r0, r3
 800602a:	d008      	beq.n	800603e <USART_Cmd+0x36>
 800602c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006030:	4298      	cmp	r0, r3
 8006032:	d004      	beq.n	800603e <USART_Cmd+0x36>
 8006034:	f240 115f 	movw	r1, #351	; 0x15f
 8006038:	480c      	ldr	r0, [pc, #48]	; (800606c <USART_Cmd+0x64>)
 800603a:	4b0d      	ldr	r3, [pc, #52]	; (8006070 <USART_Cmd+0x68>)
 800603c:	4798      	blx	r3
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 800603e:	2d01      	cmp	r5, #1
 8006040:	d807      	bhi.n	8006052 <USART_Cmd+0x4a>
  
  if (NewState != DISABLE)
 8006042:	b95d      	cbnz	r5, 800605c <USART_Cmd+0x54>
    USARTx->CR1 |= CR1_UE_Set;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 8006044:	89a3      	ldrh	r3, [r4, #12]
 8006046:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800604a:	041b      	lsls	r3, r3, #16
 800604c:	0c1b      	lsrs	r3, r3, #16
 800604e:	81a3      	strh	r3, [r4, #12]
  }
}
 8006050:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8006052:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8006056:	4805      	ldr	r0, [pc, #20]	; (800606c <USART_Cmd+0x64>)
 8006058:	4b05      	ldr	r3, [pc, #20]	; (8006070 <USART_Cmd+0x68>)
 800605a:	4798      	blx	r3
    USARTx->CR1 |= CR1_UE_Set;
 800605c:	89a3      	ldrh	r3, [r4, #12]
 800605e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006062:	81a3      	strh	r3, [r4, #12]
}
 8006064:	bd38      	pop	{r3, r4, r5, pc}
 8006066:	bf00      	nop
 8006068:	40013800 	.word	0x40013800
 800606c:	08008018 	.word	0x08008018
 8006070:	08004bd1 	.word	0x08004bd1

08006074 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8006074:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8006076:	4b13      	ldr	r3, [pc, #76]	; (80060c4 <USART_SendData+0x50>)
{
 8006078:	4605      	mov	r5, r0
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 800607a:	4298      	cmp	r0, r3
{
 800607c:	460c      	mov	r4, r1
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 800607e:	d014      	beq.n	80060aa <USART_SendData+0x36>
 8006080:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 8006084:	4298      	cmp	r0, r3
 8006086:	d010      	beq.n	80060aa <USART_SendData+0x36>
 8006088:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800608c:	4298      	cmp	r0, r3
 800608e:	d00c      	beq.n	80060aa <USART_SendData+0x36>
 8006090:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006094:	4298      	cmp	r0, r3
 8006096:	d008      	beq.n	80060aa <USART_SendData+0x36>
 8006098:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800609c:	4298      	cmp	r0, r3
 800609e:	d004      	beq.n	80060aa <USART_SendData+0x36>
 80060a0:	f240 214f 	movw	r1, #591	; 0x24f
 80060a4:	4808      	ldr	r0, [pc, #32]	; (80060c8 <USART_SendData+0x54>)
 80060a6:	4b09      	ldr	r3, [pc, #36]	; (80060cc <USART_SendData+0x58>)
 80060a8:	4798      	blx	r3
  assert_param(IS_USART_DATA(Data)); 
 80060aa:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 80060ae:	d304      	bcc.n	80060ba <USART_SendData+0x46>
 80060b0:	f44f 7114 	mov.w	r1, #592	; 0x250
 80060b4:	4804      	ldr	r0, [pc, #16]	; (80060c8 <USART_SendData+0x54>)
 80060b6:	4b05      	ldr	r3, [pc, #20]	; (80060cc <USART_SendData+0x58>)
 80060b8:	4798      	blx	r3
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 80060ba:	f3c4 0408 	ubfx	r4, r4, #0, #9
 80060be:	80ac      	strh	r4, [r5, #4]
}
 80060c0:	bd38      	pop	{r3, r4, r5, pc}
 80060c2:	bf00      	nop
 80060c4:	40013800 	.word	0x40013800
 80060c8:	08008018 	.word	0x08008018
 80060cc:	08004bd1 	.word	0x08004bd1

080060d0 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80060d0:	b538      	push	{r3, r4, r5, lr}
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 80060d2:	4b28      	ldr	r3, [pc, #160]	; (8006174 <USART_GetFlagStatus+0xa4>)
{
 80060d4:	4604      	mov	r4, r0
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 80060d6:	4298      	cmp	r0, r3
{
 80060d8:	460d      	mov	r5, r1
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 80060da:	d014      	beq.n	8006106 <USART_GetFlagStatus+0x36>
 80060dc:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 80060e0:	4298      	cmp	r0, r3
 80060e2:	d010      	beq.n	8006106 <USART_GetFlagStatus+0x36>
 80060e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060e8:	4298      	cmp	r0, r3
 80060ea:	d00c      	beq.n	8006106 <USART_GetFlagStatus+0x36>
 80060ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060f0:	4298      	cmp	r0, r3
 80060f2:	d008      	beq.n	8006106 <USART_GetFlagStatus+0x36>
 80060f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060f8:	4298      	cmp	r0, r3
 80060fa:	d004      	beq.n	8006106 <USART_GetFlagStatus+0x36>
 80060fc:	f240 316a 	movw	r1, #874	; 0x36a
 8006100:	481d      	ldr	r0, [pc, #116]	; (8006178 <USART_GetFlagStatus+0xa8>)
 8006102:	4b1e      	ldr	r3, [pc, #120]	; (800617c <USART_GetFlagStatus+0xac>)
 8006104:	4798      	blx	r3
  assert_param(IS_USART_FLAG(USART_FLAG));
 8006106:	1e6b      	subs	r3, r5, #1
 8006108:	b29b      	uxth	r3, r3
 800610a:	2b1f      	cmp	r3, #31
 800610c:	d91b      	bls.n	8006146 <USART_GetFlagStatus+0x76>
 800610e:	2d80      	cmp	r5, #128	; 0x80
 8006110:	d013      	beq.n	800613a <USART_GetFlagStatus+0x6a>
 8006112:	2d40      	cmp	r5, #64	; 0x40
 8006114:	d011      	beq.n	800613a <USART_GetFlagStatus+0x6a>
 8006116:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800611a:	d00e      	beq.n	800613a <USART_GetFlagStatus+0x6a>
 800611c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8006120:	d017      	beq.n	8006152 <USART_GetFlagStatus+0x82>
 8006122:	2d08      	cmp	r5, #8
 8006124:	d804      	bhi.n	8006130 <USART_GetFlagStatus+0x60>
 8006126:	f44f 738a 	mov.w	r3, #276	; 0x114
 800612a:	40eb      	lsrs	r3, r5
 800612c:	07db      	lsls	r3, r3, #31
 800612e:	d404      	bmi.n	800613a <USART_GetFlagStatus+0x6a>
 8006130:	f240 316b 	movw	r1, #875	; 0x36b
 8006134:	4810      	ldr	r0, [pc, #64]	; (8006178 <USART_GetFlagStatus+0xa8>)
 8006136:	4b11      	ldr	r3, [pc, #68]	; (800617c <USART_GetFlagStatus+0xac>)
 8006138:	4798      	blx	r3
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 800613a:	8823      	ldrh	r3, [r4, #0]
 800613c:	421d      	tst	r5, r3
  }
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
 800613e:	bf14      	ite	ne
 8006140:	2001      	movne	r0, #1
 8006142:	2000      	moveq	r0, #0
}
 8006144:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_USART_FLAG(USART_FLAG));
 8006146:	4a0e      	ldr	r2, [pc, #56]	; (8006180 <USART_GetFlagStatus+0xb0>)
 8006148:	fa22 f303 	lsr.w	r3, r2, r3
 800614c:	07da      	lsls	r2, r3, #31
 800614e:	d4f4      	bmi.n	800613a <USART_GetFlagStatus+0x6a>
 8006150:	e7dd      	b.n	800610e <USART_GetFlagStatus+0x3e>
    assert_param(IS_USART_123_PERIPH(USARTx));
 8006152:	4b08      	ldr	r3, [pc, #32]	; (8006174 <USART_GetFlagStatus+0xa4>)
 8006154:	429c      	cmp	r4, r3
 8006156:	d0f0      	beq.n	800613a <USART_GetFlagStatus+0x6a>
 8006158:	4b0a      	ldr	r3, [pc, #40]	; (8006184 <USART_GetFlagStatus+0xb4>)
 800615a:	429c      	cmp	r4, r3
 800615c:	d0ed      	beq.n	800613a <USART_GetFlagStatus+0x6a>
 800615e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006162:	429c      	cmp	r4, r3
 8006164:	d0e9      	beq.n	800613a <USART_GetFlagStatus+0x6a>
 8006166:	f240 316f 	movw	r1, #879	; 0x36f
 800616a:	4b04      	ldr	r3, [pc, #16]	; (800617c <USART_GetFlagStatus+0xac>)
 800616c:	4802      	ldr	r0, [pc, #8]	; (8006178 <USART_GetFlagStatus+0xa8>)
 800616e:	4798      	blx	r3
 8006170:	e7e3      	b.n	800613a <USART_GetFlagStatus+0x6a>
 8006172:	bf00      	nop
 8006174:	40013800 	.word	0x40013800
 8006178:	08008018 	.word	0x08008018
 800617c:	08004bd1 	.word	0x08004bd1
 8006180:	80008001 	.word	0x80008001
 8006184:	40004400 	.word	0x40004400

08006188 <RCC_GetClocksFreq>:
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8006188:	4a1e      	ldr	r2, [pc, #120]	; (8006204 <RCC_GetClocksFreq+0x7c>)
{
 800618a:	b430      	push	{r4, r5}
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 800618c:	6853      	ldr	r3, [r2, #4]
 800618e:	f003 030c 	and.w	r3, r3, #12
  
  switch (tmp)
 8006192:	2b08      	cmp	r3, #8
 8006194:	d10f      	bne.n	80061b6 <RCC_GetClocksFreq+0x2e>
      RCC_Clocks->SYSCLK_Frequency = HSE_Value;
      break;
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8006196:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8006198:	6851      	ldr	r1, [r2, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 800619a:	f3c3 4383 	ubfx	r3, r3, #18, #4
      
      if (pllsource == 0x00)
 800619e:	03c9      	lsls	r1, r1, #15
      pllmull = ( pllmull >> 18) + 2;
 80061a0:	f103 0302 	add.w	r3, r3, #2
      if (pllsource == 0x00)
 80061a4:	d528      	bpl.n	80061f8 <RCC_GetClocksFreq+0x70>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_Value / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 80061a6:	6852      	ldr	r2, [r2, #4]
 80061a8:	0392      	lsls	r2, r2, #14
 80061aa:	d425      	bmi.n	80061f8 <RCC_GetClocksFreq+0x70>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_Value >> 1) * pllmull;
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_Value * pllmull;
 80061ac:	4a16      	ldr	r2, [pc, #88]	; (8006208 <RCC_GetClocksFreq+0x80>)
 80061ae:	fb02 f303 	mul.w	r3, r2, r3
 80061b2:	6003      	str	r3, [r0, #0]
 80061b4:	e001      	b.n	80061ba <RCC_GetClocksFreq+0x32>
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
 80061b6:	4b14      	ldr	r3, [pc, #80]	; (8006208 <RCC_GetClocksFreq+0x80>)
 80061b8:	6003      	str	r3, [r0, #0]
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80061ba:	4a12      	ldr	r2, [pc, #72]	; (8006204 <RCC_GetClocksFreq+0x7c>)
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 80061bc:	4c13      	ldr	r4, [pc, #76]	; (800620c <RCC_GetClocksFreq+0x84>)
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80061be:	6851      	ldr	r1, [r2, #4]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
  tmp = tmp >> 14;
  presc = ADCPrescTable[tmp];
 80061c0:	4d13      	ldr	r5, [pc, #76]	; (8006210 <RCC_GetClocksFreq+0x88>)
  tmp = tmp >> 4;
 80061c2:	f3c1 1103 	ubfx	r1, r1, #4, #4
  presc = APBAHBPrescTable[tmp];
 80061c6:	5c61      	ldrb	r1, [r4, r1]
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80061c8:	40cb      	lsrs	r3, r1
 80061ca:	6043      	str	r3, [r0, #4]
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 80061cc:	6851      	ldr	r1, [r2, #4]
  tmp = tmp >> 8;
 80061ce:	f3c1 2102 	ubfx	r1, r1, #8, #3
  presc = APBAHBPrescTable[tmp];
 80061d2:	5c61      	ldrb	r1, [r4, r1]
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80061d4:	fa23 f101 	lsr.w	r1, r3, r1
 80061d8:	6081      	str	r1, [r0, #8]
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 80061da:	6851      	ldr	r1, [r2, #4]
  tmp = tmp >> 11;
 80061dc:	f3c1 21c2 	ubfx	r1, r1, #11, #3
  presc = APBAHBPrescTable[tmp];
 80061e0:	5c61      	ldrb	r1, [r4, r1]
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80061e2:	40cb      	lsrs	r3, r1
 80061e4:	60c3      	str	r3, [r0, #12]
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 80061e6:	6852      	ldr	r2, [r2, #4]
  tmp = tmp >> 14;
 80061e8:	f3c2 3281 	ubfx	r2, r2, #14, #2
  presc = ADCPrescTable[tmp];
 80061ec:	5caa      	ldrb	r2, [r5, r2]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
}
 80061ee:	bc30      	pop	{r4, r5}
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 80061f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80061f4:	6103      	str	r3, [r0, #16]
}
 80061f6:	4770      	bx	lr
          RCC_Clocks->SYSCLK_Frequency = (HSE_Value >> 1) * pllmull;
 80061f8:	4a06      	ldr	r2, [pc, #24]	; (8006214 <RCC_GetClocksFreq+0x8c>)
 80061fa:	fb02 f303 	mul.w	r3, r2, r3
 80061fe:	6003      	str	r3, [r0, #0]
 8006200:	e7db      	b.n	80061ba <RCC_GetClocksFreq+0x32>
 8006202:	bf00      	nop
 8006204:	40021000 	.word	0x40021000
 8006208:	007a1200 	.word	0x007a1200
 800620c:	20000170 	.word	0x20000170
 8006210:	2000016c 	.word	0x2000016c
 8006214:	003d0900 	.word	0x003d0900

08006218 <FLASH_Unlock>:
  * @retval None
  */
void FLASH_Unlock(void)
{
  /* Authorize the FPEC of Bank1 Access */
  FLASH->KEYR = FLASH_KEY1;
 8006218:	4b02      	ldr	r3, [pc, #8]	; (8006224 <FLASH_Unlock+0xc>)
 800621a:	4903      	ldr	r1, [pc, #12]	; (8006228 <FLASH_Unlock+0x10>)
  FLASH->KEYR = FLASH_KEY2;
 800621c:	4a03      	ldr	r2, [pc, #12]	; (800622c <FLASH_Unlock+0x14>)
  FLASH->KEYR = FLASH_KEY1;
 800621e:	6059      	str	r1, [r3, #4]
  FLASH->KEYR = FLASH_KEY2;
 8006220:	605a      	str	r2, [r3, #4]
#ifdef STM32F10X_XL
  /* Authorize the FPEC of Bank2 Access */
  FLASH->KEYR2 = FLASH_KEY1;
  FLASH->KEYR2 = FLASH_KEY2;
#endif /* STM32F10X_XL */
}
 8006222:	4770      	bx	lr
 8006224:	40022000 	.word	0x40022000
 8006228:	45670123 	.word	0x45670123
 800622c:	cdef89ab 	.word	0xcdef89ab

08006230 <FLASH_GetBank1Status>:
  */
FLASH_Status FLASH_GetBank1Status(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8006230:	4b08      	ldr	r3, [pc, #32]	; (8006254 <FLASH_GetBank1Status+0x24>)
 8006232:	68da      	ldr	r2, [r3, #12]
 8006234:	07d1      	lsls	r1, r2, #31
 8006236:	d409      	bmi.n	800624c <FLASH_GetBank1Status+0x1c>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8006238:	68da      	ldr	r2, [r3, #12]
 800623a:	0752      	lsls	r2, r2, #29
 800623c:	d408      	bmi.n	8006250 <FLASH_GetBank1Status+0x20>
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	f013 0f10 	tst.w	r3, #16
      {
        flashstatus = FLASH_ERROR_WRP;
      }
      else
      {
        flashstatus = FLASH_COMPLETE;
 8006244:	bf14      	ite	ne
 8006246:	2003      	movne	r0, #3
 8006248:	2004      	moveq	r0, #4
 800624a:	4770      	bx	lr
    flashstatus = FLASH_BUSY;
 800624c:	2001      	movs	r0, #1
 800624e:	4770      	bx	lr
      flashstatus = FLASH_ERROR_PG;
 8006250:	2002      	movs	r0, #2
      }
    }
  }
  /* Return the Flash Status */
  return flashstatus;
}
 8006252:	4770      	bx	lr
 8006254:	40022000 	.word	0x40022000

08006258 <FLASH_WaitForLastOperation>:
  * @param  Timeout: FLASH progamming Timeout
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *   FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8006258:	b538      	push	{r3, r4, r5, lr}
  FLASH_Status status = FLASH_COMPLETE;
   
  /* Check for the Flash Status */
  status = FLASH_GetBank1Status();
 800625a:	4d07      	ldr	r5, [pc, #28]	; (8006278 <FLASH_WaitForLastOperation+0x20>)
{ 
 800625c:	4604      	mov	r4, r0
  status = FLASH_GetBank1Status();
 800625e:	47a8      	blx	r5
  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8006260:	2801      	cmp	r0, #1
 8006262:	d105      	bne.n	8006270 <FLASH_WaitForLastOperation+0x18>
 8006264:	b134      	cbz	r4, 8006274 <FLASH_WaitForLastOperation+0x1c>
  {
    status = FLASH_GetBank1Status();
 8006266:	47a8      	blx	r5
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8006268:	2801      	cmp	r0, #1
    Timeout--;
 800626a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 800626e:	d0f9      	beq.n	8006264 <FLASH_WaitForLastOperation+0xc>
  }
  if(Timeout == 0x00 )
 8006270:	b104      	cbz	r4, 8006274 <FLASH_WaitForLastOperation+0x1c>
  {
    status = FLASH_TIMEOUT;
  }
  /* Return the operation status */
  return status;
}
 8006272:	bd38      	pop	{r3, r4, r5, pc}
    status = FLASH_TIMEOUT;
 8006274:	2005      	movs	r0, #5
}
 8006276:	bd38      	pop	{r3, r4, r5, pc}
 8006278:	08006231 	.word	0x08006231

0800627c <FLASH_ErasePage>:
  assert_param(IS_FLASH_ADDRESS(Page_Address));
 800627c:	4b14      	ldr	r3, [pc, #80]	; (80062d0 <FLASH_ErasePage+0x54>)
 800627e:	f100 4278 	add.w	r2, r0, #4160749568	; 0xf8000000
 8006282:	429a      	cmp	r2, r3
{
 8006284:	b570      	push	{r4, r5, r6, lr}
 8006286:	4605      	mov	r5, r0
  assert_param(IS_FLASH_ADDRESS(Page_Address));
 8006288:	d81b      	bhi.n	80062c2 <FLASH_ErasePage+0x46>
  status = FLASH_WaitForLastOperation(EraseTimeout);
 800628a:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 800628e:	4c11      	ldr	r4, [pc, #68]	; (80062d4 <FLASH_ErasePage+0x58>)
 8006290:	47a0      	blx	r4
  if(status == FLASH_COMPLETE)
 8006292:	2804      	cmp	r0, #4
 8006294:	d000      	beq.n	8006298 <FLASH_ErasePage+0x1c>
}
 8006296:	bd70      	pop	{r4, r5, r6, pc}
    FLASH->CR|= CR_PER_Set;
 8006298:	4e0f      	ldr	r6, [pc, #60]	; (80062d8 <FLASH_ErasePage+0x5c>)
    status = FLASH_WaitForLastOperation(EraseTimeout);
 800629a:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
    FLASH->CR|= CR_PER_Set;
 800629e:	6933      	ldr	r3, [r6, #16]
 80062a0:	f043 0302 	orr.w	r3, r3, #2
 80062a4:	6133      	str	r3, [r6, #16]
    FLASH->AR = Page_Address; 
 80062a6:	6175      	str	r5, [r6, #20]
    FLASH->CR|= CR_STRT_Set;
 80062a8:	6933      	ldr	r3, [r6, #16]
 80062aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062ae:	6133      	str	r3, [r6, #16]
    status = FLASH_WaitForLastOperation(EraseTimeout);
 80062b0:	47a0      	blx	r4
    if(status != FLASH_TIMEOUT)
 80062b2:	2805      	cmp	r0, #5
 80062b4:	d0ef      	beq.n	8006296 <FLASH_ErasePage+0x1a>
      FLASH->CR &= CR_PER_Reset;
 80062b6:	f641 72fd 	movw	r2, #8189	; 0x1ffd
 80062ba:	6933      	ldr	r3, [r6, #16]
 80062bc:	4013      	ands	r3, r2
 80062be:	6133      	str	r3, [r6, #16]
}
 80062c0:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_FLASH_ADDRESS(Page_Address));
 80062c2:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 80062c6:	4b05      	ldr	r3, [pc, #20]	; (80062dc <FLASH_ErasePage+0x60>)
 80062c8:	4805      	ldr	r0, [pc, #20]	; (80062e0 <FLASH_ErasePage+0x64>)
 80062ca:	4798      	blx	r3
 80062cc:	e7dd      	b.n	800628a <FLASH_ErasePage+0xe>
 80062ce:	bf00      	nop
 80062d0:	000ffffe 	.word	0x000ffffe
 80062d4:	08006259 	.word	0x08006259
 80062d8:	40022000 	.word	0x40022000
 80062dc:	08004bd1 	.word	0x08004bd1
 80062e0:	08008054 	.word	0x08008054

080062e4 <FLASH_ProgramHalfWord>:
{
 80062e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_FLASH_ADDRESS(Address));
 80062e6:	4b12      	ldr	r3, [pc, #72]	; (8006330 <FLASH_ProgramHalfWord+0x4c>)
 80062e8:	f100 4278 	add.w	r2, r0, #4160749568	; 0xf8000000
 80062ec:	429a      	cmp	r2, r3
{
 80062ee:	4605      	mov	r5, r0
 80062f0:	460e      	mov	r6, r1
  assert_param(IS_FLASH_ADDRESS(Address));
 80062f2:	d817      	bhi.n	8006324 <FLASH_ProgramHalfWord+0x40>
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 80062f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80062f8:	4c0e      	ldr	r4, [pc, #56]	; (8006334 <FLASH_ProgramHalfWord+0x50>)
 80062fa:	47a0      	blx	r4
  if(status == FLASH_COMPLETE)
 80062fc:	2804      	cmp	r0, #4
 80062fe:	d000      	beq.n	8006302 <FLASH_ProgramHalfWord+0x1e>
}
 8006300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    FLASH->CR |= CR_PG_Set;
 8006302:	4f0d      	ldr	r7, [pc, #52]	; (8006338 <FLASH_ProgramHalfWord+0x54>)
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8006304:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    FLASH->CR |= CR_PG_Set;
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	f043 0301 	orr.w	r3, r3, #1
 800630e:	613b      	str	r3, [r7, #16]
    *(__IO uint16_t*)Address = Data;
 8006310:	802e      	strh	r6, [r5, #0]
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8006312:	47a0      	blx	r4
    if(status != FLASH_TIMEOUT)
 8006314:	2805      	cmp	r0, #5
 8006316:	d0f3      	beq.n	8006300 <FLASH_ProgramHalfWord+0x1c>
      FLASH->CR &= CR_PG_Reset;
 8006318:	f641 72fe 	movw	r2, #8190	; 0x1ffe
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	4013      	ands	r3, r2
 8006320:	613b      	str	r3, [r7, #16]
}
 8006322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_FLASH_ADDRESS(Address));
 8006324:	f240 318b 	movw	r1, #907	; 0x38b
 8006328:	4b04      	ldr	r3, [pc, #16]	; (800633c <FLASH_ProgramHalfWord+0x58>)
 800632a:	4805      	ldr	r0, [pc, #20]	; (8006340 <FLASH_ProgramHalfWord+0x5c>)
 800632c:	4798      	blx	r3
 800632e:	e7e1      	b.n	80062f4 <FLASH_ProgramHalfWord+0x10>
 8006330:	000ffffe 	.word	0x000ffffe
 8006334:	08006259 	.word	0x08006259
 8006338:	40022000 	.word	0x40022000
 800633c:	08004bd1 	.word	0x08004bd1
 8006340:	08008054 	.word	0x08008054

08006344 <DMA_DeInit>:
  * @retval None
  */
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
 8006344:	4b61      	ldr	r3, [pc, #388]	; (80064cc <DMA_DeInit+0x188>)
 8006346:	4298      	cmp	r0, r3
 8006348:	d045      	beq.n	80063d6 <DMA_DeInit+0x92>
 800634a:	3314      	adds	r3, #20
 800634c:	4298      	cmp	r0, r3
 800634e:	d033      	beq.n	80063b8 <DMA_DeInit+0x74>
 8006350:	3314      	adds	r3, #20
 8006352:	4298      	cmp	r0, r3
 8006354:	d05d      	beq.n	8006412 <DMA_DeInit+0xce>
 8006356:	3314      	adds	r3, #20
 8006358:	4298      	cmp	r0, r3
 800635a:	d069      	beq.n	8006430 <DMA_DeInit+0xec>
 800635c:	3314      	adds	r3, #20
 800635e:	4298      	cmp	r0, r3
 8006360:	d048      	beq.n	80063f4 <DMA_DeInit+0xb0>
 8006362:	3314      	adds	r3, #20
 8006364:	4298      	cmp	r0, r3
 8006366:	d072      	beq.n	800644e <DMA_DeInit+0x10a>
 8006368:	3314      	adds	r3, #20
 800636a:	4298      	cmp	r0, r3
 800636c:	f000 8082 	beq.w	8006474 <DMA_DeInit+0x130>
 8006370:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8006374:	4298      	cmp	r0, r3
 8006376:	f000 808c 	beq.w	8006492 <DMA_DeInit+0x14e>
 800637a:	3314      	adds	r3, #20
 800637c:	4298      	cmp	r0, r3
 800637e:	d075      	beq.n	800646c <DMA_DeInit+0x128>
 8006380:	3314      	adds	r3, #20
 8006382:	4298      	cmp	r0, r3
 8006384:	f000 8089 	beq.w	800649a <DMA_DeInit+0x156>
 8006388:	3314      	adds	r3, #20
 800638a:	4298      	cmp	r0, r3
 800638c:	f000 8095 	beq.w	80064ba <DMA_DeInit+0x176>
 8006390:	3314      	adds	r3, #20
 8006392:	4298      	cmp	r0, r3
 8006394:	f000 8095 	beq.w	80064c2 <DMA_DeInit+0x17e>
{
 8006398:	b510      	push	{r4, lr}
 800639a:	4604      	mov	r4, r0
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
 800639c:	4b4c      	ldr	r3, [pc, #304]	; (80064d0 <DMA_DeInit+0x18c>)
 800639e:	2171      	movs	r1, #113	; 0x71
 80063a0:	484c      	ldr	r0, [pc, #304]	; (80064d4 <DMA_DeInit+0x190>)
 80063a2:	4798      	blx	r3
  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= CCR_ENABLE_Reset;
  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 80063a4:	2300      	movs	r3, #0
  DMAy_Channelx->CCR &= CCR_ENABLE_Reset;
 80063a6:	6822      	ldr	r2, [r4, #0]
 80063a8:	f022 0201 	bic.w	r2, r2, #1
 80063ac:	6022      	str	r2, [r4, #0]
  DMAy_Channelx->CCR  = 0;
 80063ae:	6023      	str	r3, [r4, #0]
  
  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 80063b0:	6063      	str	r3, [r4, #4]
  
  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 80063b2:	60a3      	str	r3, [r4, #8]
  
  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 80063b4:	60e3      	str	r3, [r4, #12]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
    }
  }
}
 80063b6:	bd10      	pop	{r4, pc}
  DMAy_Channelx->CCR  = 0;
 80063b8:	2300      	movs	r3, #0
  DMAy_Channelx->CCR &= CCR_ENABLE_Reset;
 80063ba:	6802      	ldr	r2, [r0, #0]
    DMA1->IFCR |= DMA1_Channel2_IT_Mask;
 80063bc:	4946      	ldr	r1, [pc, #280]	; (80064d8 <DMA_DeInit+0x194>)
  DMAy_Channelx->CCR &= CCR_ENABLE_Reset;
 80063be:	f022 0201 	bic.w	r2, r2, #1
 80063c2:	6002      	str	r2, [r0, #0]
  DMAy_Channelx->CCR  = 0;
 80063c4:	6003      	str	r3, [r0, #0]
  DMAy_Channelx->CNDTR = 0;
 80063c6:	6043      	str	r3, [r0, #4]
  DMAy_Channelx->CPAR  = 0;
 80063c8:	6083      	str	r3, [r0, #8]
  DMAy_Channelx->CMAR = 0;
 80063ca:	60c3      	str	r3, [r0, #12]
    DMA2->IFCR |= DMA2_Channel2_IT_Mask;
 80063cc:	684b      	ldr	r3, [r1, #4]
 80063ce:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80063d2:	604b      	str	r3, [r1, #4]
 80063d4:	4770      	bx	lr
  DMAy_Channelx->CCR  = 0;
 80063d6:	2300      	movs	r3, #0
  DMAy_Channelx->CCR &= CCR_ENABLE_Reset;
 80063d8:	6802      	ldr	r2, [r0, #0]
    DMA1->IFCR |= DMA1_Channel1_IT_Mask;
 80063da:	493f      	ldr	r1, [pc, #252]	; (80064d8 <DMA_DeInit+0x194>)
  DMAy_Channelx->CCR &= CCR_ENABLE_Reset;
 80063dc:	f022 0201 	bic.w	r2, r2, #1
 80063e0:	6002      	str	r2, [r0, #0]
  DMAy_Channelx->CCR  = 0;
 80063e2:	6003      	str	r3, [r0, #0]
  DMAy_Channelx->CNDTR = 0;
 80063e4:	6043      	str	r3, [r0, #4]
  DMAy_Channelx->CPAR  = 0;
 80063e6:	6083      	str	r3, [r0, #8]
  DMAy_Channelx->CMAR = 0;
 80063e8:	60c3      	str	r3, [r0, #12]
    DMA2->IFCR |= DMA2_Channel1_IT_Mask;
 80063ea:	684b      	ldr	r3, [r1, #4]
 80063ec:	f043 030f 	orr.w	r3, r3, #15
 80063f0:	604b      	str	r3, [r1, #4]
 80063f2:	4770      	bx	lr
  DMAy_Channelx->CCR  = 0;
 80063f4:	2300      	movs	r3, #0
  DMAy_Channelx->CCR &= CCR_ENABLE_Reset;
 80063f6:	6802      	ldr	r2, [r0, #0]
    DMA1->IFCR |= DMA1_Channel5_IT_Mask;
 80063f8:	4937      	ldr	r1, [pc, #220]	; (80064d8 <DMA_DeInit+0x194>)
  DMAy_Channelx->CCR &= CCR_ENABLE_Reset;
 80063fa:	f022 0201 	bic.w	r2, r2, #1
 80063fe:	6002      	str	r2, [r0, #0]
  DMAy_Channelx->CCR  = 0;
 8006400:	6003      	str	r3, [r0, #0]
  DMAy_Channelx->CNDTR = 0;
 8006402:	6043      	str	r3, [r0, #4]
  DMAy_Channelx->CPAR  = 0;
 8006404:	6083      	str	r3, [r0, #8]
  DMAy_Channelx->CMAR = 0;
 8006406:	60c3      	str	r3, [r0, #12]
    DMA1->IFCR |= DMA1_Channel5_IT_Mask;
 8006408:	684b      	ldr	r3, [r1, #4]
 800640a:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 800640e:	604b      	str	r3, [r1, #4]
 8006410:	4770      	bx	lr
  DMAy_Channelx->CCR  = 0;
 8006412:	2300      	movs	r3, #0
  DMAy_Channelx->CCR &= CCR_ENABLE_Reset;
 8006414:	6802      	ldr	r2, [r0, #0]
    DMA1->IFCR |= DMA1_Channel3_IT_Mask;
 8006416:	4930      	ldr	r1, [pc, #192]	; (80064d8 <DMA_DeInit+0x194>)
  DMAy_Channelx->CCR &= CCR_ENABLE_Reset;
 8006418:	f022 0201 	bic.w	r2, r2, #1
 800641c:	6002      	str	r2, [r0, #0]
  DMAy_Channelx->CCR  = 0;
 800641e:	6003      	str	r3, [r0, #0]
  DMAy_Channelx->CNDTR = 0;
 8006420:	6043      	str	r3, [r0, #4]
  DMAy_Channelx->CPAR  = 0;
 8006422:	6083      	str	r3, [r0, #8]
  DMAy_Channelx->CMAR = 0;
 8006424:	60c3      	str	r3, [r0, #12]
    DMA1->IFCR |= DMA1_Channel3_IT_Mask;
 8006426:	684b      	ldr	r3, [r1, #4]
 8006428:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 800642c:	604b      	str	r3, [r1, #4]
 800642e:	4770      	bx	lr
  DMAy_Channelx->CCR  = 0;
 8006430:	2300      	movs	r3, #0
  DMAy_Channelx->CCR &= CCR_ENABLE_Reset;
 8006432:	6802      	ldr	r2, [r0, #0]
    DMA1->IFCR |= DMA1_Channel4_IT_Mask;
 8006434:	4928      	ldr	r1, [pc, #160]	; (80064d8 <DMA_DeInit+0x194>)
  DMAy_Channelx->CCR &= CCR_ENABLE_Reset;
 8006436:	f022 0201 	bic.w	r2, r2, #1
 800643a:	6002      	str	r2, [r0, #0]
  DMAy_Channelx->CCR  = 0;
 800643c:	6003      	str	r3, [r0, #0]
  DMAy_Channelx->CNDTR = 0;
 800643e:	6043      	str	r3, [r0, #4]
  DMAy_Channelx->CPAR  = 0;
 8006440:	6083      	str	r3, [r0, #8]
  DMAy_Channelx->CMAR = 0;
 8006442:	60c3      	str	r3, [r0, #12]
    DMA1->IFCR |= DMA1_Channel4_IT_Mask;
 8006444:	684b      	ldr	r3, [r1, #4]
 8006446:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 800644a:	604b      	str	r3, [r1, #4]
 800644c:	4770      	bx	lr
  DMAy_Channelx->CCR  = 0;
 800644e:	2300      	movs	r3, #0
  DMAy_Channelx->CCR &= CCR_ENABLE_Reset;
 8006450:	6802      	ldr	r2, [r0, #0]
    DMA1->IFCR |= DMA1_Channel6_IT_Mask;
 8006452:	4921      	ldr	r1, [pc, #132]	; (80064d8 <DMA_DeInit+0x194>)
  DMAy_Channelx->CCR &= CCR_ENABLE_Reset;
 8006454:	f022 0201 	bic.w	r2, r2, #1
 8006458:	6002      	str	r2, [r0, #0]
  DMAy_Channelx->CCR  = 0;
 800645a:	6003      	str	r3, [r0, #0]
  DMAy_Channelx->CNDTR = 0;
 800645c:	6043      	str	r3, [r0, #4]
  DMAy_Channelx->CPAR  = 0;
 800645e:	6083      	str	r3, [r0, #8]
  DMAy_Channelx->CMAR = 0;
 8006460:	60c3      	str	r3, [r0, #12]
    DMA1->IFCR |= DMA1_Channel6_IT_Mask;
 8006462:	684b      	ldr	r3, [r1, #4]
 8006464:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006468:	604b      	str	r3, [r1, #4]
 800646a:	4770      	bx	lr
  DMAy_Channelx->CCR  = 0;
 800646c:	2300      	movs	r3, #0
  DMAy_Channelx->CCR &= CCR_ENABLE_Reset;
 800646e:	6802      	ldr	r2, [r0, #0]
    DMA2->IFCR |= DMA2_Channel2_IT_Mask;
 8006470:	491a      	ldr	r1, [pc, #104]	; (80064dc <DMA_DeInit+0x198>)
 8006472:	e7a4      	b.n	80063be <DMA_DeInit+0x7a>
  DMAy_Channelx->CCR  = 0;
 8006474:	2300      	movs	r3, #0
  DMAy_Channelx->CCR &= CCR_ENABLE_Reset;
 8006476:	6802      	ldr	r2, [r0, #0]
    DMA1->IFCR |= DMA1_Channel7_IT_Mask;
 8006478:	4917      	ldr	r1, [pc, #92]	; (80064d8 <DMA_DeInit+0x194>)
  DMAy_Channelx->CCR &= CCR_ENABLE_Reset;
 800647a:	f022 0201 	bic.w	r2, r2, #1
 800647e:	6002      	str	r2, [r0, #0]
  DMAy_Channelx->CCR  = 0;
 8006480:	6003      	str	r3, [r0, #0]
  DMAy_Channelx->CNDTR = 0;
 8006482:	6043      	str	r3, [r0, #4]
  DMAy_Channelx->CPAR  = 0;
 8006484:	6083      	str	r3, [r0, #8]
  DMAy_Channelx->CMAR = 0;
 8006486:	60c3      	str	r3, [r0, #12]
    DMA1->IFCR |= DMA1_Channel7_IT_Mask;
 8006488:	684b      	ldr	r3, [r1, #4]
 800648a:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 800648e:	604b      	str	r3, [r1, #4]
 8006490:	4770      	bx	lr
  DMAy_Channelx->CCR  = 0;
 8006492:	2300      	movs	r3, #0
  DMAy_Channelx->CCR &= CCR_ENABLE_Reset;
 8006494:	6802      	ldr	r2, [r0, #0]
    DMA2->IFCR |= DMA2_Channel1_IT_Mask;
 8006496:	4911      	ldr	r1, [pc, #68]	; (80064dc <DMA_DeInit+0x198>)
 8006498:	e7a0      	b.n	80063dc <DMA_DeInit+0x98>
  DMAy_Channelx->CCR  = 0;
 800649a:	2200      	movs	r2, #0
  DMAy_Channelx->CCR &= CCR_ENABLE_Reset;
 800649c:	4b10      	ldr	r3, [pc, #64]	; (80064e0 <DMA_DeInit+0x19c>)
    DMA2->IFCR |= DMA2_Channel3_IT_Mask;
 800649e:	480f      	ldr	r0, [pc, #60]	; (80064dc <DMA_DeInit+0x198>)
  DMAy_Channelx->CCR &= CCR_ENABLE_Reset;
 80064a0:	6819      	ldr	r1, [r3, #0]
 80064a2:	f021 0101 	bic.w	r1, r1, #1
 80064a6:	6019      	str	r1, [r3, #0]
  DMAy_Channelx->CCR  = 0;
 80064a8:	601a      	str	r2, [r3, #0]
  DMAy_Channelx->CNDTR = 0;
 80064aa:	605a      	str	r2, [r3, #4]
  DMAy_Channelx->CPAR  = 0;
 80064ac:	609a      	str	r2, [r3, #8]
  DMAy_Channelx->CMAR = 0;
 80064ae:	60da      	str	r2, [r3, #12]
    DMA2->IFCR |= DMA2_Channel3_IT_Mask;
 80064b0:	6843      	ldr	r3, [r0, #4]
 80064b2:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 80064b6:	6043      	str	r3, [r0, #4]
 80064b8:	4770      	bx	lr
  DMAy_Channelx->CCR  = 0;
 80064ba:	2300      	movs	r3, #0
  DMAy_Channelx->CCR &= CCR_ENABLE_Reset;
 80064bc:	6802      	ldr	r2, [r0, #0]
    DMA2->IFCR |= DMA2_Channel4_IT_Mask;
 80064be:	4907      	ldr	r1, [pc, #28]	; (80064dc <DMA_DeInit+0x198>)
 80064c0:	e7b9      	b.n	8006436 <DMA_DeInit+0xf2>
  DMAy_Channelx->CCR  = 0;
 80064c2:	2300      	movs	r3, #0
  DMAy_Channelx->CCR &= CCR_ENABLE_Reset;
 80064c4:	6802      	ldr	r2, [r0, #0]
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
 80064c6:	4905      	ldr	r1, [pc, #20]	; (80064dc <DMA_DeInit+0x198>)
 80064c8:	e797      	b.n	80063fa <DMA_DeInit+0xb6>
 80064ca:	bf00      	nop
 80064cc:	40020008 	.word	0x40020008
 80064d0:	08004bd1 	.word	0x08004bd1
 80064d4:	08008090 	.word	0x08008090
 80064d8:	40020000 	.word	0x40020000
 80064dc:	40020400 	.word	0x40020400
 80064e0:	40020430 	.word	0x40020430

080064e4 <Logo>:
 80064e4:	ffffff1f f8ffffff ffffff3f 0000ffff     ........?.......
 80064f4:	ffffff7f ff07c0ff ffffffff ffff00fc     ................
 8006504:	ffffffff ffff1ff0 ffffffff ffff7fc0     ................
 8006514:	ffffffff ffffff83 ffffffff ffffff07     ................
 8006524:	ffffffff ffffff07 feffffff ffffff07     ................
 8006534:	feffffff ffffff07 ffffffff ffffff03     ................
 8006544:	ffffffff ffffff01 ffffffff ffffff80     ................
 8006554:	ffffffff ffff7fc0 ffffffff ffff7fc0     ................
 8006564:	ffffffff ffff3fc0 ffffffff ffff3fc0     .....?.......?..
 8006574:	ffffffff ffff1fc0 ffffffff ffff1f80     ................
 8006584:	ffffffff ffff3f00 f8ffffff ffff3f00     .....?.......?..
 8006594:	e0ffffff ffff7f00 00ffffff ffffff00     ................
 80065a4:	00f0ffff ffffff01 0000fcff ffffff03     ................
 80065b4:	000000fc ffffff07 00000000 ffffff0f     ................
 80065c4:	00000000 ffffff3f 00000000 ffffffff     ....?...........
 80065d4:	07000000 ffffffff 3f000000 feffffff     ...........?....
 80065e4:	ff000000 fcffffff ff070000 f8ffffff     ................
	...

08006704 <Jinyuedianzi_font>:
	...
 800670c:	00800100 00000000 80030000 0f3c0000     ..............<.
 800671c:	c0030030 ff0f0000 070000c0 7c0000c0     0..............|
 800672c:	0300780e 1f0000c0 0000f0ff 0100c00f     .x..............
 800673c:	03e00efc 00e0c183 00f0c33f 00e01f00     ........?.......
 800674c:	00eeff03 e0ffff07 f8073c00 fc3c0000     .........<....<.
 800675c:	ff7c0000 ffff07f8 7f0000f0 780000c0     ..|............x
 800676c:	fc07803f 830700e7 0000e0c0 0100003e     ?...........>...
 800677c:	0ff81ff6 0770e7ff 00e0c083 00003c00     ......p......<..
 800678c:	ff87ef07 70677c06 e0ffff07 ffffff07     .....|gp........
 800679c:	f1c77fe0 e7fc01ff c18303e0 ffff0fe0     ................
 80067ac:	037fe0ff ff01fee0 8303e0ef f80fe0c1     ................
 80067bc:	18e07f1e 013c0000 03c0fffc 0fe0ffc3     ......<.........
 80067cc:	c0071e00 00ffff00 f0f7fc03 e0ffff03     ................
 80067dc:	001e0000 ffff0100 cefe0300 ffff03f8     ................
 80067ec:	1e0000c0 c0010000 bf07001f c3017cd8     .............|..
 80067fc:	000000c0 0000001e 0f001e00 0030fc07     ..............0.
 800680c:	c001e003 00001e00 003c0000 f8ff003f     ..........<.?...
 800681c:	0ffc0100 003e0080 78000000 1f003e00     ......>....x.>..
 800682c:	ff0080ff 7e3880ff 01000000 000000f0     ......8~........
 800683c:	0080ff07 1f00ff7f 000000fe 0000e007     ................
 800684c:	00ff0000 00fe1f00 0000f807 00800700     ................
 800685c:	3c000000 f8010000 00c00000 00000000     ...<............

0800686c <Jyetech_font>:
	...
 8006874:	00e00100 0f000000 8fff0f00 ff0ffcbf     ................
 8006884:	e0000080 00007f00 8f030007 0c0c0e03     ................
 8006894:	00008071 011c00e0 030007c0 040e0687     q...............
 80068a4:	0080710c 1c00e000 0007c001 0e848703     .q..............
 80068b4:	80700800 00e00000 07c0011c 88830300     ..p.............
 80068c4:	7000100e eff8800f f8071c00 810300ff     ...p............
 80068d4:	00300ed0 9cc31870 011c80f3 0300c7c1     ..0.p...........
 80068e4:	f00ff081 e3387000 1c80e31c 0087c301     .....p8.........
 80068f4:	0ee08003 3f700030 80e31ce7 87c3011c     ....0.p?........
 8006904:	e080e300 7000100e e3000738 c3011c80     .......p8.......
 8006914:	80e30087 00020ee0 00073870 091c80e3     ........p8......
 8006924:	e30c87c3 060ee080 27387000 1c80e304     .........p8'....
 8006934:	1e87c319 0ee000c7 1c70000e 80e38843     ..........p.C...
 8006944:	c7c1391c f8033c1e fc01fe3f f7f1810f     .9...<..?.......
 8006954:	f8f87fc0 00008cff                       ........

0800695c <Web_font>:
	...
 8006964:	03000000 00000080 00000000 01000000     ................
 8006974:	00000080 00800100 00000000 00000000     ................
 8006984:	00800100 01000003 00000080 00000000     ................
 8006994:	00000000 00030000 00800100 00000000     ................
 80069a4:	fecc9f79 e3bc0367 e1c1c3c7 78f000b8     y...g..........x
 80069b4:	89313877 01624c8c 06634698 01cc3163     w81..Lb..Fc.c1..
 80069c4:	cc39cc98 4c8c8931 4c980162 31660c63     ..9.1..Lb..Lc.f1
 80069d4:	8619038c d01a8c31 01b486d6 0fe38f8c     ....1...........
 80069e4:	038c01e6 8c318601 86d6d01a 8c8c01b4     ......1.........
 80069f4:	01060c03 8601038c 600c8c31 01180363     ........1..`c...
 8006a04:	0c030c87 038c0106 8c318601 0363600c     ..........1..`c.
 8006a14:	06876118 11230623 cc88618c 600c8c31     .a..#.#..a..1..`
 8006a24:	61180363 c3c10382 60dee3c1 de7b78f0     c..a.......`.x{.
 8006a34:	00000000 00820100 00000000 00000000     ................
 8006a44:	00000000 0d000000 0000001c 00000000     ................
	...
 8006a5c:	00180e00 00000000 00000000 00000000     ................

08006a6c <DSO138_font>:
 8006a6c:	00c0ff7f 03c0fc07 000000fe 00000000     ................
 8006a7c:	ff0f007f ff3f00f8 80ff0fc0 00000000     ......?.........
 8006a8c:	c0c30300 00fee007 3fc00f7e 0000e007     ........~..?....
 8006a9c:	07000000 e007f0c3 03fc003f f0037ec0     ........?....~..
 8006aac:	00000000 f0810f00 801fe007 fcc001f8     ................
 8006abc:	0000f801 1f000000 e007f881 00f8c10f     ................
 8006acc:	fc00f8c1 7f003800 f8811f00 e10fe007     .....8..........
 8006adc:	f8c300f8 7800fe00 1fe08703 e007f881     .......x........
 8006aec:	00fce10f 7e00f043 c307f801 f8c11ff0     ....C..~........
 8006afc:	f107e007 f00300ff f81f7f00 1ff0c10f     ................
 8006b0c:	e007f0f1 e0fff007 7f00f007 c10ff801     ................
 8006b1c:	e0f90ff8 f007e007 f007fcff f8017f00     ................
 8006b2c:	07f8c10f e00700ff ff7ff007 7f00f007     ................
 8006b3c:	c10ff801 c0ff03f8 f007e007 f087ff3f     ............?...
 8006b4c:	f8017f00 00f88107 e007f0ff ff0ff007     ................
 8006b5c:	7f00f0c7 0100f801 f8bf07f0 f007e007     ................
 8006b6c:	f0e7ff00 f8017f00 1fe00300 e007f88f     ................
 8006b7c:	3f00f207 7e00f0e7 0700f801 fc031fc0     ...?...~........
 8006b8c:	e307e007 f0e30f00 f8017e00 3f007e00     .........~...~.?
 8006b9c:	e007fc01 0700e30f fe00f8e3 7f00f801     ................
 8006bac:	fc003fc0 c30fe007 f8e10780 f801fc00     .?..............
 8006bbc:	3ff00300 e007fc00 07c0831f f801fcc0     ...?............
 8006bcc:	0100f801 f8003ff8 033fe007 7ec00fe0     .....?....?....~
 8006bdc:	f801f003 1ffc0000 f007f800 1ff8037e     ............~...
 8006bec:	e0073f80 0000f801 f0810ffc 03f8ff0f     .?..............
 8006bfc:	0f00feff fc0380ff 07fc000f ff7fc0c3     ................
 8006c0c:	f83f03c0 00fe0300 809fff1f 00ff01fc     ..?.............
	...
 8006c28:	00fc801f 00000000 00000000 00000000     ................
 8006c38:	801f0000 000000f8 00000000 00000000     ................
 8006c48:	00000000 00f8811f 00000000 00000000     ................
 8006c58:	00000000 830f0000 000000f0 00000000     ................
	...
 8006c70:	00c00707 00000000 00000000 00000000     ................
 8006c80:	fe000000 00000000                       ........

08006c88 <DSO138a_font>:
 8006c88:	0ff080ff 030f08e0 0cc171e0 1f38701c     .........q...p8.
 8006c98:	e370708e 78383804 70308c23 1c708073     .pp..88x#.0ps.p.
 8006ca8:	308e0118 70e07370 0f03181c f8717060     ...0ps.p....`pq.
 8006cb8:	0f181c70 7070c083 181c707c 70e0c303     p.....pp|p.....p
 8006cc8:	1c701e70 70cc0118 70067270 cc00181c     p.p....ppr.p....
 8006cd8:	06e37030 20183838 c371308c 1c701c84     0p..88. .0q...p.
 8006ce8:	ff708e79 c0077800 c0073e7e              y.p..x..~>..

08006cf4 <ByJyetech_font>:
 8006cf4:	b001801f 01c08fdf 01c01f80 c08f9f99     ................
 8006d04:	c0188001 03989901 18800100 188f01db     ................
 8006d14:	b0390e03 8f019b1f 7d1f831f 019b1ff8     ..9........}....
 8006d24:	1b831f86 ca18986d 0318860d 1898611f     ....m........a..
 8006d34:	18860dca 986d1803 860fce1f 7d1b831f     ......m........}
 8006d44:	078e1f98 0e831f06 04009839 00000000     ........9.......
 8006d54:	00000000 0000001c 00000000 00001800     ................
	...

08006d6c <Jinyue_font>:
 8006d6c:	6100c000 00800180 c001807f 21a06100     ...a.........a.!
 8006d7c:	c0f90084 ff03f003 00fe3ff0 1e06c00f     .........?......
 8006d8c:	3180e403 00060084 7cc2cf1d 03fc3fa0     ...1.......|.?..
 8006d9c:	e378feff 31e07cc0 fce60784 e7810804     ..x..|.1........
 8006dac:	04fc3f60 fc0f0c02 1fb0e501 000300fc     `?..............
 8006dbc:	1e031800 00800110 38000006 00fe0706     ...........8....
 8006dcc:	0006c0ff 00006000 807f00fc c000007e     .....`......~...
 8006ddc:	00180000 0018001f                       ........

08006de4 <Web1_font>:
 8006de4:	e7dff33e ef07fffe 3cfc001e 610c1e3c     >..........<<..a
 8006df4:	6366668c 030c6618 1c1cc30c 240c310c     .ffc.f.......1.$
 8006e04:	26186162 c304030c 310c2c16 6060000c     ba.&.....,.1..``
 8006e14:	060c0630 2c968101 c00f1a0c 07307e60     0......,....`~0.
 8006e24:	810106fc 1a0c2c96 6060000c 060c0630     .....,....``0...
 8006e34:	4c938101 000c0ccc 06306060 8101060c     ...L....``0.....
 8006e44:	0ccc4c93 6060100c 030c2698 8c11c304     .L....``.&......
 8006e54:	300c0ccc 46986160 c308630c 1e788c11     ...0`a.F.c....x.
 8006e64:	fff0f01f 601e8f87 9e393cf0              .......`.<9.

08006e70 <VsenString>:
 8006e70:	00005635 00563200 56310000 30000000     5V...2V...1V...0
 8006e80:	0056352e 56322e30 312e3000 30350056     .5V.0.2V.0.1V.50
 8006e90:	3200566d 00566d30 566d3031 00000000     mV.20mV.10mV....

08006ea0 <TLvlRate>:
 8006ea0:	437a0000 42c80000 42480000 41c80000     ..zC...B..HB...A
 8006eb0:	41200000 40a00000 40200000 3f800000     .. A...@.. @...?
 8006ec0:	3f000000                                ...?

08006ec4 <CplString>:
 8006ec4:	00004344 00004341 00444e47              DC..AC..GND.

08006ed0 <TBString>:
 8006ed0:	73303035 30320000 00007330 73303031     500s..200s..100s
 8006ee0:	30350000 00000073 00733032 30310000     ..50s...20s...10
 8006ef0:	00000073 00007335 73320000 00000000     s...5s....2s....
 8006f00:	00007331 2e300000 00007335 73322e30     1s....0.5s..0.2s
 8006f10:	2e300000 00007331 736d3035 30320000     ..0.1s..50ms..20
 8006f20:	0000736d 736d3031 6d350000 00000073     ms..10ms..5ms...
 8006f30:	00736d32 6d310000 00000073 6d352e30     2ms...1ms...0.5m
 8006f40:	2e300073 00736d32 6d312e30 30350073     s.0.2ms.0.1ms.50
 8006f50:	00007375 73753032 30310000 00007375     us..20us..10us..
	...

08006f68 <TMString>:
 8006f68:	4f545541 524f4e00 4953004d 0000474e     AUTO.NORM.SING..
 8006f78:	20202020 20202020 00000000 444c4f48             ....HOLD
 8006f88:	00000000 6e6e7552 00676e69 74726155     ....Running.Uart
 8006f98:	6b4f2031 00000d0a 203a5746 2d333131     1 Ok....FW: 113-
 8006fa8:	30383331 33302d31 00000037 746f6f42     13801-037...Boot
 8006fb8:	2e676e69 00002e2e                       ing.....

08006fc0 <Font_ASC8X16>:
	...
 8006fd0:	3c180000 18183c3c 18180018 00000000     ...<<<..........
 8006fe0:	66666600 00000024 00000000 00000000     .fff$...........
 8006ff0:	6c000000 6c6cfe6c 6c6cfe6c 00000000     ...ll.lll.ll....
 8007000:	c67c1818 067cc0c2 7cc68606 00001818     ..|...|....|....
 8007010:	00000000 180cc6c2 86c66030 00000000     ........0`......
 8007020:	6c380000 dc76386c 76cccccc 00000000     ..8ll8v....v....
 8007030:	30303000 00000060 00000000 00000000     .000`...........
 8007040:	180c0000 30303030 0c183030 00000000     ....000000......
 8007050:	18300000 0c0c0c0c 30180c0c 00000000     ..0........0....
 8007060:	00000000 ff3c6600 0000663c 00000000     .....f<.<f......
 8007070:	00000000 7e181800 00001818 00000000     .......~........
	...
 8007088:	18181800 00000030 00000000 fe000000     ....0...........
	...
 80070a8:	18180000 00000000 00000000 180c0602     ................
 80070b8:	80c06030 00000000 6c380000 d6d6c6c6     0`........8l....
 80070c8:	386cc6c6 00000000 38180000 18181878     ..l8.......8x...
 80070d8:	7e181818 00000000 c67c0000 30180c06     ...~......|....0
 80070e8:	fec6c060 00000000 c67c0000 063c0606     `.........|...<.
 80070f8:	7cc60606 00000000 1c0c0000 fecc6c3c     ...|........<l..
 8007108:	1e0c0c0c 00000000 c0fe0000 06fcc0c0     ................
 8007118:	7cc60606 00000000 60380000 c6fcc0c0     ...|......8`....
 8007128:	7cc6c6c6 00000000 c6fe0000 180c0606     ...|............
 8007138:	30303030 00000000 c67c0000 c67cc6c6     0000......|...|.
 8007148:	7cc6c6c6 00000000 c67c0000 067ec6c6     ...|......|...~.
 8007158:	780c0606 00000000 00000000 00001818     ...x............
 8007168:	00181800 00000000 00000000 00001818     ................
 8007178:	30181800 00000000 06000000 6030180c     ...0..........0`
 8007188:	060c1830 00000000 00000000 00007e00     0............~..
 8007198:	0000007e 00000000 60000000 060c1830     ~..........`0...
 80071a8:	6030180c 00000000 c67c0000 18180cc6     ..0`......|.....
 80071b8:	18180018 00000000 7c000000 dedec6c6     ...........|....
 80071c8:	7cc0dcde 00000000 38100000 fec6c66c     ...|.......8l...
 80071d8:	c6c6c6c6 00000000 66fc0000 667c6666     ...........fff|f
 80071e8:	fc666666 00000000 663c0000 c0c0c0c2     fff.......<f....
 80071f8:	3c66c2c0 00000000 6cf80000 66666666     ..f<.......lffff
 8007208:	f86c6666 00000000 66fe0000 68786862     ffl........fbhxh
 8007218:	fe666260 00000000 66fe0000 68786862     `bf........fbhxh
 8007228:	f0606060 00000000 663c0000 dec0c0c2     ```.......<f....
 8007238:	3a66c6c6 00000000 c6c60000 c6fec6c6     ..f:............
 8007248:	c6c6c6c6 00000000 183c0000 18181818     ..........<.....
 8007258:	3c181818 00000000 0c1e0000 0c0c0c0c     ...<............
 8007268:	78cccccc 00000000 66e60000 78786c66     ...x.......fflxx
 8007278:	e666666c 00000000 60f00000 60606060     lff........`````
 8007288:	fe666260 00000000 eec60000 c6d6fefe     `bf.............
 8007298:	c6c6c6c6 00000000 e6c60000 cedefef6     ................
 80072a8:	c6c6c6c6 00000000 c67c0000 c6c6c6c6     ..........|.....
 80072b8:	7cc6c6c6 00000000 66fc0000 607c6666     ...|.......fff|`
 80072c8:	f0606060 00000000 c67c0000 c6c6c6c6     ```.......|.....
 80072d8:	7cded6c6 00000e0c 66fc0000 6c7c6666     ...|.......fff|l
 80072e8:	e6666666 00000000 c67c0000 0c3860c6     fff.......|..`8.
 80072f8:	7cc6c606 00000000 7e7e0000 1818185a     ...|......~~Z...
 8007308:	3c181818 00000000 c6c60000 c6c6c6c6     ...<............
 8007318:	7cc6c6c6 00000000 c6c60000 c6c6c6c6     ...|............
 8007328:	10386cc6 00000000 c6c60000 d6d6c6c6     .l8.............
 8007338:	6ceefed6 00000000 c6c60000 38387c6c     ...l........l|88
 8007348:	c6c66c7c 00000000 66660000 183c6666     |l........ffff<.
 8007358:	3c181818 00000000 c6fe0000 30180c86     ...<...........0
 8007368:	fec6c260 00000000 303c0000 30303030     `.........<00000
 8007378:	3c303030 00000000 80000000 3870e0c0     000<..........p8
 8007388:	02060e1c 00000000 0c3c0000 0c0c0c0c     ..........<.....
 8007398:	3c0c0c0c 00000000 c66c3810 00000000     ...<.....8l.....
	...
 80073bc:	0000ff00 00183030 00000000 00000000     ....00..........
	...
 80073d4:	7c0c7800 76cccccc 00000000 60e00000     .x.|...v.......`
 80073e4:	666c7860 7c666666 00000000 00000000     `xlffff|........
 80073f4:	c0c67c00 7cc6c0c0 00000000 0c1c0000     .|.....|........
 8007404:	cc6c3c0c 76cccccc 00000000 00000000     .<l....v........
 8007414:	fec67c00 7cc6c0c0 00000000 6c380000     .|.....|......8l
 8007424:	60f06064 f0606060 00000000 00000000     d`.````.........
 8007434:	cccc7600 7ccccccc 0078cc0c 60e00000     .v.....|..x....`
 8007444:	66766c60 e6666666 00000000 18180000     `lvffff.........
 8007454:	18183800 3c181818 00000000 06060000     .8.....<........
 8007464:	06060e00 06060606 003c6666 60e00000     ........ff<....`
 8007474:	786c6660 e6666c78 00000000 18380000     `flxxlf.......8.
 8007484:	18181818 3c181818 00000000 00000000     .......<........
 8007494:	d6feec00 c6d6d6d6 00000000 00000000     ................
 80074a4:	6666dc00 66666666 00000000 00000000     ..ffffff........
 80074b4:	c6c67c00 7cc6c6c6 00000000 00000000     .|.....|........
 80074c4:	6666dc00 7c666666 00f06060 00000000     ..fffff|``......
 80074d4:	cccc7600 7ccccccc 001e0c0c 00000000     .v.....|........
 80074e4:	6676dc00 f0606060 00000000 00000000     ..vf```.........
 80074f4:	60c67c00 7cc60c38 00000000 30100000     .|.`8..|.......0
 8007504:	3030fc30 1c363030 00000000 00000000     0.00006.........
 8007514:	cccccc00 76cccccc 00000000 00000000     .......v........
 8007524:	66666600 183c6666 00000000 00000000     .fffff<.........
 8007534:	d6c6c600 6cfed6d6 00000000 00000000     .......l........
 8007544:	386cc600 c66c3838 00000000 00000000     ..l888l.........
 8007554:	c6c6c600 7ec6c6c6 00f80c06 00000000     .......~........
 8007564:	18ccfe00 fec66030 00000000 180e0000     ....0`..........
 8007574:	18701818 0e181818 00000000 18180000     ..p.............
 8007584:	18001818 18181818 00000000 18700000     ..............p.
 8007594:	180e1818 70181818 00000000 dc760000     .......p......v.
	...
 80075b4:	66660000 7e666666 c0606062 00000000     ..fffff~b``.....
	...

08007fc0 <KScanCodeTab>:
 8007fc0:	31017fff 3202bfff 3303dfff 3404efff     ...1...2...3...4
 8007fd0:	35057ffe 3606bffe 3707dffe 3808effe     ...5...6...7...8
 8007fe0:	00000000 0000003a 7262694c 65697261     ....:...Librarie
 8007ff0:	54532f73 4632334d 5f783031 50647453     s/STM32F10x_StdP
 8008000:	70697265 72445f68 72657669 6372732f     eriph_Driver/src
 8008010:	73696d2f 00632e63 7262694c 65697261     /misc.c.Librarie
 8008020:	54532f73 4632334d 5f783031 50647453     s/STM32F10x_StdP
 8008030:	70697265 72445f68 72657669 6372732f     eriph_Driver/src
 8008040:	6d74732f 31663233 755f7830 74726173     /stm32f10x_usart
 8008050:	0000632e 7262694c 65697261 54532f73     .c..Libraries/ST
 8008060:	4632334d 5f783031 50647453 70697265     M32F10x_StdPerip
 8008070:	72445f68 72657669 6372732f 6d74732f     h_Driver/src/stm
 8008080:	31663233 665f7830 6873616c 0000632e     32f10x_flash.c..
 8008090:	7262694c 65697261 54532f73 4632334d     Libraries/STM32F
 80080a0:	5f783031 50647453 70697265 72445f68     10x_StdPeriph_Dr
 80080b0:	72657669 6372732f 6d74732f 31663233     iver/src/stm32f1
 80080c0:	645f7830 632e616d 00000000              0x_dma.c....
